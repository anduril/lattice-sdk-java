// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/ontology/v1/type.pub.proto

package com.anduril.ontology.v1;

/**
 * <pre>
 * Refers to the relationship of the tracker to the operational object being represented.
 * Maps 1 to 1 with mil-std affiliation. Pending is a default, yet to be classified object.
 * Ranking from most friendly to most hostile:
 * FRIENDLY
 * ASSUMED FRIENDLY
 * NEUTRAL
 * PENDING
 * UNKNOWN
 * SUSPICIOUS
 * HOSTILE
 * </pre>
 *
 * Protobuf enum {@code anduril.ontology.v1.Disposition}
 */
public enum Disposition
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>DISPOSITION_UNKNOWN = 0;</code>
   */
  DISPOSITION_UNKNOWN(0),
  /**
   * <code>DISPOSITION_FRIENDLY = 1;</code>
   */
  DISPOSITION_FRIENDLY(1),
  /**
   * <code>DISPOSITION_HOSTILE = 2;</code>
   */
  DISPOSITION_HOSTILE(2),
  /**
   * <code>DISPOSITION_SUSPICIOUS = 3;</code>
   */
  DISPOSITION_SUSPICIOUS(3),
  /**
   * <code>DISPOSITION_ASSUMED_FRIENDLY = 4;</code>
   */
  DISPOSITION_ASSUMED_FRIENDLY(4),
  /**
   * <code>DISPOSITION_NEUTRAL = 5;</code>
   */
  DISPOSITION_NEUTRAL(5),
  /**
   * <code>DISPOSITION_PENDING = 6;</code>
   */
  DISPOSITION_PENDING(6),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>DISPOSITION_UNKNOWN = 0;</code>
   */
  public static final int DISPOSITION_UNKNOWN_VALUE = 0;
  /**
   * <code>DISPOSITION_FRIENDLY = 1;</code>
   */
  public static final int DISPOSITION_FRIENDLY_VALUE = 1;
  /**
   * <code>DISPOSITION_HOSTILE = 2;</code>
   */
  public static final int DISPOSITION_HOSTILE_VALUE = 2;
  /**
   * <code>DISPOSITION_SUSPICIOUS = 3;</code>
   */
  public static final int DISPOSITION_SUSPICIOUS_VALUE = 3;
  /**
   * <code>DISPOSITION_ASSUMED_FRIENDLY = 4;</code>
   */
  public static final int DISPOSITION_ASSUMED_FRIENDLY_VALUE = 4;
  /**
   * <code>DISPOSITION_NEUTRAL = 5;</code>
   */
  public static final int DISPOSITION_NEUTRAL_VALUE = 5;
  /**
   * <code>DISPOSITION_PENDING = 6;</code>
   */
  public static final int DISPOSITION_PENDING_VALUE = 6;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Disposition valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Disposition forNumber(int value) {
    switch (value) {
      case 0: return DISPOSITION_UNKNOWN;
      case 1: return DISPOSITION_FRIENDLY;
      case 2: return DISPOSITION_HOSTILE;
      case 3: return DISPOSITION_SUSPICIOUS;
      case 4: return DISPOSITION_ASSUMED_FRIENDLY;
      case 5: return DISPOSITION_NEUTRAL;
      case 6: return DISPOSITION_PENDING;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Disposition>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Disposition> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Disposition>() {
          public Disposition findValueByNumber(int number) {
            return Disposition.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.anduril.ontology.v1.TypePubProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final Disposition[] VALUES = values();

  public static Disposition valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Disposition(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:anduril.ontology.v1.Disposition)
}

