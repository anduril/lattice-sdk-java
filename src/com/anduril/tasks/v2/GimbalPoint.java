// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/tasks/v2/shared/isr.pub.proto

package com.anduril.tasks.v2;

/**
 * <pre>
 * Gimbal pointing command.
 * </pre>
 *
 * Protobuf type {@code anduril.tasks.v2.GimbalPoint}
 */
public final class GimbalPoint extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:anduril.tasks.v2.GimbalPoint)
    GimbalPointOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GimbalPoint.newBuilder() to construct.
  private GimbalPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GimbalPoint() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new GimbalPoint();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.anduril.tasks.v2.IsrPubProto.internal_static_anduril_tasks_v2_GimbalPoint_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.anduril.tasks.v2.IsrPubProto.internal_static_anduril_tasks_v2_GimbalPoint_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.anduril.tasks.v2.GimbalPoint.class, com.anduril.tasks.v2.GimbalPoint.Builder.class);
  }

  private int pointTypeCase_ = 0;
  @SuppressWarnings("serial")
  private java.lang.Object pointType_;
  public enum PointTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    LOOK_AT(1),
    CELESTIAL_LOCATION(2),
    FRAME_LOCATION(4),
    POINTTYPE_NOT_SET(0);
    private final int value;
    private PointTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PointTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static PointTypeCase forNumber(int value) {
      switch (value) {
        case 1: return LOOK_AT;
        case 2: return CELESTIAL_LOCATION;
        case 4: return FRAME_LOCATION;
        case 0: return POINTTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PointTypeCase
  getPointTypeCase() {
    return PointTypeCase.forNumber(
        pointTypeCase_);
  }

  public static final int LOOK_AT_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
   * </pre>
   *
   * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
   * @return Whether the lookAt field is set.
   */
  @java.lang.Override
  public boolean hasLookAt() {
    return pointTypeCase_ == 1;
  }
  /**
   * <pre>
   * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
   * </pre>
   *
   * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
   * @return The lookAt.
   */
  @java.lang.Override
  public com.anduril.tasks.v2.Objective getLookAt() {
    if (pointTypeCase_ == 1) {
       return (com.anduril.tasks.v2.Objective) pointType_;
    }
    return com.anduril.tasks.v2.Objective.getDefaultInstance();
  }
  /**
   * <pre>
   * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
   * </pre>
   *
   * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
   */
  @java.lang.Override
  public com.anduril.tasks.v2.ObjectiveOrBuilder getLookAtOrBuilder() {
    if (pointTypeCase_ == 1) {
       return (com.anduril.tasks.v2.Objective) pointType_;
    }
    return com.anduril.tasks.v2.Objective.getDefaultInstance();
  }

  public static final int CELESTIAL_LOCATION_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
   * </pre>
   *
   * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
   * @return Whether the celestialLocation field is set.
   */
  @java.lang.Override
  public boolean hasCelestialLocation() {
    return pointTypeCase_ == 2;
  }
  /**
   * <pre>
   * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
   * </pre>
   *
   * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
   * @return The celestialLocation.
   */
  @java.lang.Override
  public com.anduril.tasks.v2.AzimuthElevationPoint getCelestialLocation() {
    if (pointTypeCase_ == 2) {
       return (com.anduril.tasks.v2.AzimuthElevationPoint) pointType_;
    }
    return com.anduril.tasks.v2.AzimuthElevationPoint.getDefaultInstance();
  }
  /**
   * <pre>
   * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
   * </pre>
   *
   * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
   */
  @java.lang.Override
  public com.anduril.tasks.v2.AzimuthElevationPointOrBuilder getCelestialLocationOrBuilder() {
    if (pointTypeCase_ == 2) {
       return (com.anduril.tasks.v2.AzimuthElevationPoint) pointType_;
    }
    return com.anduril.tasks.v2.AzimuthElevationPoint.getDefaultInstance();
  }

  public static final int FRAME_LOCATION_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Point gimbal to an [x, y] location in the video feed.
   * </pre>
   *
   * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
   * @return Whether the frameLocation field is set.
   */
  @java.lang.Override
  public boolean hasFrameLocation() {
    return pointTypeCase_ == 4;
  }
  /**
   * <pre>
   * Point gimbal to an [x, y] location in the video feed.
   * </pre>
   *
   * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
   * @return The frameLocation.
   */
  @java.lang.Override
  public com.anduril.tasks.v2.FramePoint getFrameLocation() {
    if (pointTypeCase_ == 4) {
       return (com.anduril.tasks.v2.FramePoint) pointType_;
    }
    return com.anduril.tasks.v2.FramePoint.getDefaultInstance();
  }
  /**
   * <pre>
   * Point gimbal to an [x, y] location in the video feed.
   * </pre>
   *
   * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
   */
  @java.lang.Override
  public com.anduril.tasks.v2.FramePointOrBuilder getFrameLocationOrBuilder() {
    if (pointTypeCase_ == 4) {
       return (com.anduril.tasks.v2.FramePoint) pointType_;
    }
    return com.anduril.tasks.v2.FramePoint.getDefaultInstance();
  }

  public static final int PARAMETERS_FIELD_NUMBER = 3;
  private com.anduril.tasks.v2.ISRParameters parameters_;
  /**
   * <pre>
   * Optional common ISR parameters.
   * </pre>
   *
   * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
   * @return Whether the parameters field is set.
   */
  @java.lang.Override
  public boolean hasParameters() {
    return parameters_ != null;
  }
  /**
   * <pre>
   * Optional common ISR parameters.
   * </pre>
   *
   * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
   * @return The parameters.
   */
  @java.lang.Override
  public com.anduril.tasks.v2.ISRParameters getParameters() {
    return parameters_ == null ? com.anduril.tasks.v2.ISRParameters.getDefaultInstance() : parameters_;
  }
  /**
   * <pre>
   * Optional common ISR parameters.
   * </pre>
   *
   * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
   */
  @java.lang.Override
  public com.anduril.tasks.v2.ISRParametersOrBuilder getParametersOrBuilder() {
    return parameters_ == null ? com.anduril.tasks.v2.ISRParameters.getDefaultInstance() : parameters_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (pointTypeCase_ == 1) {
      output.writeMessage(1, (com.anduril.tasks.v2.Objective) pointType_);
    }
    if (pointTypeCase_ == 2) {
      output.writeMessage(2, (com.anduril.tasks.v2.AzimuthElevationPoint) pointType_);
    }
    if (parameters_ != null) {
      output.writeMessage(3, getParameters());
    }
    if (pointTypeCase_ == 4) {
      output.writeMessage(4, (com.anduril.tasks.v2.FramePoint) pointType_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (pointTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.anduril.tasks.v2.Objective) pointType_);
    }
    if (pointTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.anduril.tasks.v2.AzimuthElevationPoint) pointType_);
    }
    if (parameters_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getParameters());
    }
    if (pointTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.anduril.tasks.v2.FramePoint) pointType_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.anduril.tasks.v2.GimbalPoint)) {
      return super.equals(obj);
    }
    com.anduril.tasks.v2.GimbalPoint other = (com.anduril.tasks.v2.GimbalPoint) obj;

    if (hasParameters() != other.hasParameters()) return false;
    if (hasParameters()) {
      if (!getParameters()
          .equals(other.getParameters())) return false;
    }
    if (!getPointTypeCase().equals(other.getPointTypeCase())) return false;
    switch (pointTypeCase_) {
      case 1:
        if (!getLookAt()
            .equals(other.getLookAt())) return false;
        break;
      case 2:
        if (!getCelestialLocation()
            .equals(other.getCelestialLocation())) return false;
        break;
      case 4:
        if (!getFrameLocation()
            .equals(other.getFrameLocation())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasParameters()) {
      hash = (37 * hash) + PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + getParameters().hashCode();
    }
    switch (pointTypeCase_) {
      case 1:
        hash = (37 * hash) + LOOK_AT_FIELD_NUMBER;
        hash = (53 * hash) + getLookAt().hashCode();
        break;
      case 2:
        hash = (37 * hash) + CELESTIAL_LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getCelestialLocation().hashCode();
        break;
      case 4:
        hash = (37 * hash) + FRAME_LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getFrameLocation().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.anduril.tasks.v2.GimbalPoint parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.anduril.tasks.v2.GimbalPoint parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.anduril.tasks.v2.GimbalPoint prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Gimbal pointing command.
   * </pre>
   *
   * Protobuf type {@code anduril.tasks.v2.GimbalPoint}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:anduril.tasks.v2.GimbalPoint)
      com.anduril.tasks.v2.GimbalPointOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.anduril.tasks.v2.IsrPubProto.internal_static_anduril_tasks_v2_GimbalPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.anduril.tasks.v2.IsrPubProto.internal_static_anduril_tasks_v2_GimbalPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.anduril.tasks.v2.GimbalPoint.class, com.anduril.tasks.v2.GimbalPoint.Builder.class);
    }

    // Construct using com.anduril.tasks.v2.GimbalPoint.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (lookAtBuilder_ != null) {
        lookAtBuilder_.clear();
      }
      if (celestialLocationBuilder_ != null) {
        celestialLocationBuilder_.clear();
      }
      if (frameLocationBuilder_ != null) {
        frameLocationBuilder_.clear();
      }
      parameters_ = null;
      if (parametersBuilder_ != null) {
        parametersBuilder_.dispose();
        parametersBuilder_ = null;
      }
      pointTypeCase_ = 0;
      pointType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.anduril.tasks.v2.IsrPubProto.internal_static_anduril_tasks_v2_GimbalPoint_descriptor;
    }

    @java.lang.Override
    public com.anduril.tasks.v2.GimbalPoint getDefaultInstanceForType() {
      return com.anduril.tasks.v2.GimbalPoint.getDefaultInstance();
    }

    @java.lang.Override
    public com.anduril.tasks.v2.GimbalPoint build() {
      com.anduril.tasks.v2.GimbalPoint result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.anduril.tasks.v2.GimbalPoint buildPartial() {
      com.anduril.tasks.v2.GimbalPoint result = new com.anduril.tasks.v2.GimbalPoint(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.anduril.tasks.v2.GimbalPoint result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.parameters_ = parametersBuilder_ == null
            ? parameters_
            : parametersBuilder_.build();
      }
    }

    private void buildPartialOneofs(com.anduril.tasks.v2.GimbalPoint result) {
      result.pointTypeCase_ = pointTypeCase_;
      result.pointType_ = this.pointType_;
      if (pointTypeCase_ == 1 &&
          lookAtBuilder_ != null) {
        result.pointType_ = lookAtBuilder_.build();
      }
      if (pointTypeCase_ == 2 &&
          celestialLocationBuilder_ != null) {
        result.pointType_ = celestialLocationBuilder_.build();
      }
      if (pointTypeCase_ == 4 &&
          frameLocationBuilder_ != null) {
        result.pointType_ = frameLocationBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.anduril.tasks.v2.GimbalPoint) {
        return mergeFrom((com.anduril.tasks.v2.GimbalPoint)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.anduril.tasks.v2.GimbalPoint other) {
      if (other == com.anduril.tasks.v2.GimbalPoint.getDefaultInstance()) return this;
      if (other.hasParameters()) {
        mergeParameters(other.getParameters());
      }
      switch (other.getPointTypeCase()) {
        case LOOK_AT: {
          mergeLookAt(other.getLookAt());
          break;
        }
        case CELESTIAL_LOCATION: {
          mergeCelestialLocation(other.getCelestialLocation());
          break;
        }
        case FRAME_LOCATION: {
          mergeFrameLocation(other.getFrameLocation());
          break;
        }
        case POINTTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getLookAtFieldBuilder().getBuilder(),
                  extensionRegistry);
              pointTypeCase_ = 1;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getCelestialLocationFieldBuilder().getBuilder(),
                  extensionRegistry);
              pointTypeCase_ = 2;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getParametersFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getFrameLocationFieldBuilder().getBuilder(),
                  extensionRegistry);
              pointTypeCase_ = 4;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int pointTypeCase_ = 0;
    private java.lang.Object pointType_;
    public PointTypeCase
        getPointTypeCase() {
      return PointTypeCase.forNumber(
          pointTypeCase_);
    }

    public Builder clearPointType() {
      pointTypeCase_ = 0;
      pointType_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    private com.google.protobuf.SingleFieldBuilderV3<
        com.anduril.tasks.v2.Objective, com.anduril.tasks.v2.Objective.Builder, com.anduril.tasks.v2.ObjectiveOrBuilder> lookAtBuilder_;
    /**
     * <pre>
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     * </pre>
     *
     * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
     * @return Whether the lookAt field is set.
     */
    @java.lang.Override
    public boolean hasLookAt() {
      return pointTypeCase_ == 1;
    }
    /**
     * <pre>
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     * </pre>
     *
     * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
     * @return The lookAt.
     */
    @java.lang.Override
    public com.anduril.tasks.v2.Objective getLookAt() {
      if (lookAtBuilder_ == null) {
        if (pointTypeCase_ == 1) {
          return (com.anduril.tasks.v2.Objective) pointType_;
        }
        return com.anduril.tasks.v2.Objective.getDefaultInstance();
      } else {
        if (pointTypeCase_ == 1) {
          return lookAtBuilder_.getMessage();
        }
        return com.anduril.tasks.v2.Objective.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     * </pre>
     *
     * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
     */
    public Builder setLookAt(com.anduril.tasks.v2.Objective value) {
      if (lookAtBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pointType_ = value;
        onChanged();
      } else {
        lookAtBuilder_.setMessage(value);
      }
      pointTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     * </pre>
     *
     * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
     */
    public Builder setLookAt(
        com.anduril.tasks.v2.Objective.Builder builderForValue) {
      if (lookAtBuilder_ == null) {
        pointType_ = builderForValue.build();
        onChanged();
      } else {
        lookAtBuilder_.setMessage(builderForValue.build());
      }
      pointTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     * </pre>
     *
     * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
     */
    public Builder mergeLookAt(com.anduril.tasks.v2.Objective value) {
      if (lookAtBuilder_ == null) {
        if (pointTypeCase_ == 1 &&
            pointType_ != com.anduril.tasks.v2.Objective.getDefaultInstance()) {
          pointType_ = com.anduril.tasks.v2.Objective.newBuilder((com.anduril.tasks.v2.Objective) pointType_)
              .mergeFrom(value).buildPartial();
        } else {
          pointType_ = value;
        }
        onChanged();
      } else {
        if (pointTypeCase_ == 1) {
          lookAtBuilder_.mergeFrom(value);
        } else {
          lookAtBuilder_.setMessage(value);
        }
      }
      pointTypeCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     * </pre>
     *
     * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
     */
    public Builder clearLookAt() {
      if (lookAtBuilder_ == null) {
        if (pointTypeCase_ == 1) {
          pointTypeCase_ = 0;
          pointType_ = null;
          onChanged();
        }
      } else {
        if (pointTypeCase_ == 1) {
          pointTypeCase_ = 0;
          pointType_ = null;
        }
        lookAtBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     * </pre>
     *
     * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
     */
    public com.anduril.tasks.v2.Objective.Builder getLookAtBuilder() {
      return getLookAtFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     * </pre>
     *
     * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
     */
    @java.lang.Override
    public com.anduril.tasks.v2.ObjectiveOrBuilder getLookAtOrBuilder() {
      if ((pointTypeCase_ == 1) && (lookAtBuilder_ != null)) {
        return lookAtBuilder_.getMessageOrBuilder();
      } else {
        if (pointTypeCase_ == 1) {
          return (com.anduril.tasks.v2.Objective) pointType_;
        }
        return com.anduril.tasks.v2.Objective.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Point the gimbal at and lock on, continuing to look at a specific objective even as the platform moves.
     * </pre>
     *
     * <code>.anduril.tasks.v2.Objective look_at = 1 [json_name = "lookAt"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.anduril.tasks.v2.Objective, com.anduril.tasks.v2.Objective.Builder, com.anduril.tasks.v2.ObjectiveOrBuilder> 
        getLookAtFieldBuilder() {
      if (lookAtBuilder_ == null) {
        if (!(pointTypeCase_ == 1)) {
          pointType_ = com.anduril.tasks.v2.Objective.getDefaultInstance();
        }
        lookAtBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.anduril.tasks.v2.Objective, com.anduril.tasks.v2.Objective.Builder, com.anduril.tasks.v2.ObjectiveOrBuilder>(
                (com.anduril.tasks.v2.Objective) pointType_,
                getParentForChildren(),
                isClean());
        pointType_ = null;
      }
      pointTypeCase_ = 1;
      onChanged();
      return lookAtBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.anduril.tasks.v2.AzimuthElevationPoint, com.anduril.tasks.v2.AzimuthElevationPoint.Builder, com.anduril.tasks.v2.AzimuthElevationPointOrBuilder> celestialLocationBuilder_;
    /**
     * <pre>
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     * </pre>
     *
     * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
     * @return Whether the celestialLocation field is set.
     */
    @java.lang.Override
    public boolean hasCelestialLocation() {
      return pointTypeCase_ == 2;
    }
    /**
     * <pre>
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     * </pre>
     *
     * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
     * @return The celestialLocation.
     */
    @java.lang.Override
    public com.anduril.tasks.v2.AzimuthElevationPoint getCelestialLocation() {
      if (celestialLocationBuilder_ == null) {
        if (pointTypeCase_ == 2) {
          return (com.anduril.tasks.v2.AzimuthElevationPoint) pointType_;
        }
        return com.anduril.tasks.v2.AzimuthElevationPoint.getDefaultInstance();
      } else {
        if (pointTypeCase_ == 2) {
          return celestialLocationBuilder_.getMessage();
        }
        return com.anduril.tasks.v2.AzimuthElevationPoint.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     * </pre>
     *
     * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
     */
    public Builder setCelestialLocation(com.anduril.tasks.v2.AzimuthElevationPoint value) {
      if (celestialLocationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pointType_ = value;
        onChanged();
      } else {
        celestialLocationBuilder_.setMessage(value);
      }
      pointTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     * </pre>
     *
     * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
     */
    public Builder setCelestialLocation(
        com.anduril.tasks.v2.AzimuthElevationPoint.Builder builderForValue) {
      if (celestialLocationBuilder_ == null) {
        pointType_ = builderForValue.build();
        onChanged();
      } else {
        celestialLocationBuilder_.setMessage(builderForValue.build());
      }
      pointTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     * </pre>
     *
     * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
     */
    public Builder mergeCelestialLocation(com.anduril.tasks.v2.AzimuthElevationPoint value) {
      if (celestialLocationBuilder_ == null) {
        if (pointTypeCase_ == 2 &&
            pointType_ != com.anduril.tasks.v2.AzimuthElevationPoint.getDefaultInstance()) {
          pointType_ = com.anduril.tasks.v2.AzimuthElevationPoint.newBuilder((com.anduril.tasks.v2.AzimuthElevationPoint) pointType_)
              .mergeFrom(value).buildPartial();
        } else {
          pointType_ = value;
        }
        onChanged();
      } else {
        if (pointTypeCase_ == 2) {
          celestialLocationBuilder_.mergeFrom(value);
        } else {
          celestialLocationBuilder_.setMessage(value);
        }
      }
      pointTypeCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     * </pre>
     *
     * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
     */
    public Builder clearCelestialLocation() {
      if (celestialLocationBuilder_ == null) {
        if (pointTypeCase_ == 2) {
          pointTypeCase_ = 0;
          pointType_ = null;
          onChanged();
        }
      } else {
        if (pointTypeCase_ == 2) {
          pointTypeCase_ = 0;
          pointType_ = null;
        }
        celestialLocationBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     * </pre>
     *
     * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
     */
    public com.anduril.tasks.v2.AzimuthElevationPoint.Builder getCelestialLocationBuilder() {
      return getCelestialLocationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     * </pre>
     *
     * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
     */
    @java.lang.Override
    public com.anduril.tasks.v2.AzimuthElevationPointOrBuilder getCelestialLocationOrBuilder() {
      if ((pointTypeCase_ == 2) && (celestialLocationBuilder_ != null)) {
        return celestialLocationBuilder_.getMessageOrBuilder();
      } else {
        if (pointTypeCase_ == 2) {
          return (com.anduril.tasks.v2.AzimuthElevationPoint) pointType_;
        }
        return com.anduril.tasks.v2.AzimuthElevationPoint.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Point the gimbal at a fixed azimuth/elevation with respect to the platform frame.
     * </pre>
     *
     * <code>.anduril.tasks.v2.AzimuthElevationPoint celestial_location = 2 [json_name = "celestialLocation"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.anduril.tasks.v2.AzimuthElevationPoint, com.anduril.tasks.v2.AzimuthElevationPoint.Builder, com.anduril.tasks.v2.AzimuthElevationPointOrBuilder> 
        getCelestialLocationFieldBuilder() {
      if (celestialLocationBuilder_ == null) {
        if (!(pointTypeCase_ == 2)) {
          pointType_ = com.anduril.tasks.v2.AzimuthElevationPoint.getDefaultInstance();
        }
        celestialLocationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.anduril.tasks.v2.AzimuthElevationPoint, com.anduril.tasks.v2.AzimuthElevationPoint.Builder, com.anduril.tasks.v2.AzimuthElevationPointOrBuilder>(
                (com.anduril.tasks.v2.AzimuthElevationPoint) pointType_,
                getParentForChildren(),
                isClean());
        pointType_ = null;
      }
      pointTypeCase_ = 2;
      onChanged();
      return celestialLocationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.anduril.tasks.v2.FramePoint, com.anduril.tasks.v2.FramePoint.Builder, com.anduril.tasks.v2.FramePointOrBuilder> frameLocationBuilder_;
    /**
     * <pre>
     * Point gimbal to an [x, y] location in the video feed.
     * </pre>
     *
     * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
     * @return Whether the frameLocation field is set.
     */
    @java.lang.Override
    public boolean hasFrameLocation() {
      return pointTypeCase_ == 4;
    }
    /**
     * <pre>
     * Point gimbal to an [x, y] location in the video feed.
     * </pre>
     *
     * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
     * @return The frameLocation.
     */
    @java.lang.Override
    public com.anduril.tasks.v2.FramePoint getFrameLocation() {
      if (frameLocationBuilder_ == null) {
        if (pointTypeCase_ == 4) {
          return (com.anduril.tasks.v2.FramePoint) pointType_;
        }
        return com.anduril.tasks.v2.FramePoint.getDefaultInstance();
      } else {
        if (pointTypeCase_ == 4) {
          return frameLocationBuilder_.getMessage();
        }
        return com.anduril.tasks.v2.FramePoint.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Point gimbal to an [x, y] location in the video feed.
     * </pre>
     *
     * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
     */
    public Builder setFrameLocation(com.anduril.tasks.v2.FramePoint value) {
      if (frameLocationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pointType_ = value;
        onChanged();
      } else {
        frameLocationBuilder_.setMessage(value);
      }
      pointTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Point gimbal to an [x, y] location in the video feed.
     * </pre>
     *
     * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
     */
    public Builder setFrameLocation(
        com.anduril.tasks.v2.FramePoint.Builder builderForValue) {
      if (frameLocationBuilder_ == null) {
        pointType_ = builderForValue.build();
        onChanged();
      } else {
        frameLocationBuilder_.setMessage(builderForValue.build());
      }
      pointTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Point gimbal to an [x, y] location in the video feed.
     * </pre>
     *
     * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
     */
    public Builder mergeFrameLocation(com.anduril.tasks.v2.FramePoint value) {
      if (frameLocationBuilder_ == null) {
        if (pointTypeCase_ == 4 &&
            pointType_ != com.anduril.tasks.v2.FramePoint.getDefaultInstance()) {
          pointType_ = com.anduril.tasks.v2.FramePoint.newBuilder((com.anduril.tasks.v2.FramePoint) pointType_)
              .mergeFrom(value).buildPartial();
        } else {
          pointType_ = value;
        }
        onChanged();
      } else {
        if (pointTypeCase_ == 4) {
          frameLocationBuilder_.mergeFrom(value);
        } else {
          frameLocationBuilder_.setMessage(value);
        }
      }
      pointTypeCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Point gimbal to an [x, y] location in the video feed.
     * </pre>
     *
     * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
     */
    public Builder clearFrameLocation() {
      if (frameLocationBuilder_ == null) {
        if (pointTypeCase_ == 4) {
          pointTypeCase_ = 0;
          pointType_ = null;
          onChanged();
        }
      } else {
        if (pointTypeCase_ == 4) {
          pointTypeCase_ = 0;
          pointType_ = null;
        }
        frameLocationBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Point gimbal to an [x, y] location in the video feed.
     * </pre>
     *
     * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
     */
    public com.anduril.tasks.v2.FramePoint.Builder getFrameLocationBuilder() {
      return getFrameLocationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Point gimbal to an [x, y] location in the video feed.
     * </pre>
     *
     * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
     */
    @java.lang.Override
    public com.anduril.tasks.v2.FramePointOrBuilder getFrameLocationOrBuilder() {
      if ((pointTypeCase_ == 4) && (frameLocationBuilder_ != null)) {
        return frameLocationBuilder_.getMessageOrBuilder();
      } else {
        if (pointTypeCase_ == 4) {
          return (com.anduril.tasks.v2.FramePoint) pointType_;
        }
        return com.anduril.tasks.v2.FramePoint.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Point gimbal to an [x, y] location in the video feed.
     * </pre>
     *
     * <code>.anduril.tasks.v2.FramePoint frame_location = 4 [json_name = "frameLocation"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.anduril.tasks.v2.FramePoint, com.anduril.tasks.v2.FramePoint.Builder, com.anduril.tasks.v2.FramePointOrBuilder> 
        getFrameLocationFieldBuilder() {
      if (frameLocationBuilder_ == null) {
        if (!(pointTypeCase_ == 4)) {
          pointType_ = com.anduril.tasks.v2.FramePoint.getDefaultInstance();
        }
        frameLocationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.anduril.tasks.v2.FramePoint, com.anduril.tasks.v2.FramePoint.Builder, com.anduril.tasks.v2.FramePointOrBuilder>(
                (com.anduril.tasks.v2.FramePoint) pointType_,
                getParentForChildren(),
                isClean());
        pointType_ = null;
      }
      pointTypeCase_ = 4;
      onChanged();
      return frameLocationBuilder_;
    }

    private com.anduril.tasks.v2.ISRParameters parameters_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.anduril.tasks.v2.ISRParameters, com.anduril.tasks.v2.ISRParameters.Builder, com.anduril.tasks.v2.ISRParametersOrBuilder> parametersBuilder_;
    /**
     * <pre>
     * Optional common ISR parameters.
     * </pre>
     *
     * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
     * @return Whether the parameters field is set.
     */
    public boolean hasParameters() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Optional common ISR parameters.
     * </pre>
     *
     * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
     * @return The parameters.
     */
    public com.anduril.tasks.v2.ISRParameters getParameters() {
      if (parametersBuilder_ == null) {
        return parameters_ == null ? com.anduril.tasks.v2.ISRParameters.getDefaultInstance() : parameters_;
      } else {
        return parametersBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional common ISR parameters.
     * </pre>
     *
     * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
     */
    public Builder setParameters(com.anduril.tasks.v2.ISRParameters value) {
      if (parametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        parameters_ = value;
      } else {
        parametersBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional common ISR parameters.
     * </pre>
     *
     * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
     */
    public Builder setParameters(
        com.anduril.tasks.v2.ISRParameters.Builder builderForValue) {
      if (parametersBuilder_ == null) {
        parameters_ = builderForValue.build();
      } else {
        parametersBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional common ISR parameters.
     * </pre>
     *
     * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
     */
    public Builder mergeParameters(com.anduril.tasks.v2.ISRParameters value) {
      if (parametersBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          parameters_ != null &&
          parameters_ != com.anduril.tasks.v2.ISRParameters.getDefaultInstance()) {
          getParametersBuilder().mergeFrom(value);
        } else {
          parameters_ = value;
        }
      } else {
        parametersBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional common ISR parameters.
     * </pre>
     *
     * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
     */
    public Builder clearParameters() {
      bitField0_ = (bitField0_ & ~0x00000008);
      parameters_ = null;
      if (parametersBuilder_ != null) {
        parametersBuilder_.dispose();
        parametersBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional common ISR parameters.
     * </pre>
     *
     * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
     */
    public com.anduril.tasks.v2.ISRParameters.Builder getParametersBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getParametersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional common ISR parameters.
     * </pre>
     *
     * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
     */
    public com.anduril.tasks.v2.ISRParametersOrBuilder getParametersOrBuilder() {
      if (parametersBuilder_ != null) {
        return parametersBuilder_.getMessageOrBuilder();
      } else {
        return parameters_ == null ?
            com.anduril.tasks.v2.ISRParameters.getDefaultInstance() : parameters_;
      }
    }
    /**
     * <pre>
     * Optional common ISR parameters.
     * </pre>
     *
     * <code>.anduril.tasks.v2.ISRParameters parameters = 3 [json_name = "parameters"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.anduril.tasks.v2.ISRParameters, com.anduril.tasks.v2.ISRParameters.Builder, com.anduril.tasks.v2.ISRParametersOrBuilder> 
        getParametersFieldBuilder() {
      if (parametersBuilder_ == null) {
        parametersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.anduril.tasks.v2.ISRParameters, com.anduril.tasks.v2.ISRParameters.Builder, com.anduril.tasks.v2.ISRParametersOrBuilder>(
                getParameters(),
                getParentForChildren(),
                isClean());
        parameters_ = null;
      }
      return parametersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:anduril.tasks.v2.GimbalPoint)
  }

  // @@protoc_insertion_point(class_scope:anduril.tasks.v2.GimbalPoint)
  private static final com.anduril.tasks.v2.GimbalPoint DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.anduril.tasks.v2.GimbalPoint();
  }

  public static com.anduril.tasks.v2.GimbalPoint getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GimbalPoint>
      PARSER = new com.google.protobuf.AbstractParser<GimbalPoint>() {
    @java.lang.Override
    public GimbalPoint parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<GimbalPoint> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GimbalPoint> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.anduril.tasks.v2.GimbalPoint getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

