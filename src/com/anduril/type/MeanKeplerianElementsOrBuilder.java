// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/type/orbit.pub.proto

package com.anduril.type;

public interface MeanKeplerianElementsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:anduril.type.MeanKeplerianElements)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * UTC time of validity
   * </pre>
   *
   * <code>.google.protobuf.Timestamp epoch = 1 [json_name = "epoch"];</code>
   * @return Whether the epoch field is set.
   */
  boolean hasEpoch();
  /**
   * <pre>
   * UTC time of validity
   * </pre>
   *
   * <code>.google.protobuf.Timestamp epoch = 1 [json_name = "epoch"];</code>
   * @return The epoch.
   */
  com.google.protobuf.Timestamp getEpoch();
  /**
   * <pre>
   * UTC time of validity
   * </pre>
   *
   * <code>.google.protobuf.Timestamp epoch = 1 [json_name = "epoch"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getEpochOrBuilder();

  /**
   * <pre>
   * Preferred: semi major axis in kilometers
   * </pre>
   *
   * <code>double semi_major_axis_km = 2 [json_name = "semiMajorAxisKm"];</code>
   * @return Whether the semiMajorAxisKm field is set.
   */
  boolean hasSemiMajorAxisKm();
  /**
   * <pre>
   * Preferred: semi major axis in kilometers
   * </pre>
   *
   * <code>double semi_major_axis_km = 2 [json_name = "semiMajorAxisKm"];</code>
   * @return The semiMajorAxisKm.
   */
  double getSemiMajorAxisKm();

  /**
   * <pre>
   * If using SGP/SGP4, provide the Keplerian Mean Motion in revolutions per day
   * </pre>
   *
   * <code>double mean_motion = 3 [json_name = "meanMotion"];</code>
   * @return Whether the meanMotion field is set.
   */
  boolean hasMeanMotion();
  /**
   * <pre>
   * If using SGP/SGP4, provide the Keplerian Mean Motion in revolutions per day
   * </pre>
   *
   * <code>double mean_motion = 3 [json_name = "meanMotion"];</code>
   * @return The meanMotion.
   */
  double getMeanMotion();

  /**
   * <code>double eccentricity = 4 [json_name = "eccentricity"];</code>
   * @return The eccentricity.
   */
  double getEccentricity();

  /**
   * <pre>
   * Angle of inclination in deg
   * </pre>
   *
   * <code>double inclination_deg = 5 [json_name = "inclinationDeg"];</code>
   * @return The inclinationDeg.
   */
  double getInclinationDeg();

  /**
   * <pre>
   * Right ascension of the ascending node in deg
   * </pre>
   *
   * <code>double ra_of_asc_node_deg = 6 [json_name = "raOfAscNodeDeg"];</code>
   * @return The raOfAscNodeDeg.
   */
  double getRaOfAscNodeDeg();

  /**
   * <pre>
   * Argument of pericenter in deg
   * </pre>
   *
   * <code>double arg_of_pericenter_deg = 7 [json_name = "argOfPericenterDeg"];</code>
   * @return The argOfPericenterDeg.
   */
  double getArgOfPericenterDeg();

  /**
   * <pre>
   * Mean anomaly in deg
   * </pre>
   *
   * <code>double mean_anomaly_deg = 8 [json_name = "meanAnomalyDeg"];</code>
   * @return The meanAnomalyDeg.
   */
  double getMeanAnomalyDeg();

  /**
   * <pre>
   * Optional: gravitational coefficient (Gravitational Constant x central mass) in kg^3 / s^2
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue gm = 9 [json_name = "gm"];</code>
   * @return Whether the gm field is set.
   */
  boolean hasGm();
  /**
   * <pre>
   * Optional: gravitational coefficient (Gravitational Constant x central mass) in kg^3 / s^2
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue gm = 9 [json_name = "gm"];</code>
   * @return The gm.
   */
  com.google.protobuf.DoubleValue getGm();
  /**
   * <pre>
   * Optional: gravitational coefficient (Gravitational Constant x central mass) in kg^3 / s^2
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue gm = 9 [json_name = "gm"];</code>
   */
  com.google.protobuf.DoubleValueOrBuilder getGmOrBuilder();

  com.anduril.type.MeanKeplerianElements.Line2Field8Case getLine2Field8Case();
}
