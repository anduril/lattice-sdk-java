// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/type/coords.pub.proto
// Protobuf Java Version: 4.27.3

package com.anduril.type;

/**
 * Protobuf type {@code anduril.type.LLA}
 */
public final class LLA extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:anduril.type.LLA)
    LLAOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 3,
      /* suffix= */ "",
      LLA.class.getName());
  }
  // Use LLA.newBuilder() to construct.
  private LLA(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private LLA() {
    altitudeReference_ = 0;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.anduril.type.CoordsPubProto.internal_static_anduril_type_LLA_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.anduril.type.CoordsPubProto.internal_static_anduril_type_LLA_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.anduril.type.LLA.class, com.anduril.type.LLA.Builder.class);
  }

  /**
   * <pre>
   * What altitude of zero refers to.
   * </pre>
   *
   * Protobuf enum {@code anduril.type.LLA.AltitudeReference}
   */
  public enum AltitudeReference
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Depending on the context its possible INVALID just means that it is
     * clear from the context (e.g. this is LLA is named lla_hae).
     * This also might mean AGL which would depend on what height map you are
     * using.
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_INVALID = 0;</code>
     */
    ALTITUDE_REFERENCE_INVALID(0),
    /**
     * <pre>
     * commonly called height above ellipsoid (HAE)
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS84 = 1;</code>
     */
    ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS84(1),
    /**
     * <pre>
     * commonly called mean sea level (MSL)
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM96 = 2;</code>
     */
    ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM96(2),
    /**
     * <pre>
     * Publishing an altitude with an unkown reference
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_UNKNOWN = 3;</code>
     */
    ALTITUDE_REFERENCE_UNKNOWN(3),
    /**
     * <pre>
     * ADSB sometimes published barometrically-measured alt
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_BAROMETRIC = 4;</code>
     */
    ALTITUDE_REFERENCE_BAROMETRIC(4),
    /**
     * <pre>
     * Positive distance above sea floor (ASF) at a specific lat/lon
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR = 5;</code>
     */
    ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR(5),
    /**
     * <pre>
     * Positive distance below surface at a specific lat/lon
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_BELOW_SEA_SURFACE = 6;</code>
     */
    ALTITUDE_REFERENCE_BELOW_SEA_SURFACE(6),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 27,
        /* patch= */ 3,
        /* suffix= */ "",
        AltitudeReference.class.getName());
    }
    /**
     * <pre>
     * Depending on the context its possible INVALID just means that it is
     * clear from the context (e.g. this is LLA is named lla_hae).
     * This also might mean AGL which would depend on what height map you are
     * using.
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_INVALID = 0;</code>
     */
    public static final int ALTITUDE_REFERENCE_INVALID_VALUE = 0;
    /**
     * <pre>
     * commonly called height above ellipsoid (HAE)
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS84 = 1;</code>
     */
    public static final int ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS84_VALUE = 1;
    /**
     * <pre>
     * commonly called mean sea level (MSL)
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM96 = 2;</code>
     */
    public static final int ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM96_VALUE = 2;
    /**
     * <pre>
     * Publishing an altitude with an unkown reference
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_UNKNOWN = 3;</code>
     */
    public static final int ALTITUDE_REFERENCE_UNKNOWN_VALUE = 3;
    /**
     * <pre>
     * ADSB sometimes published barometrically-measured alt
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_BAROMETRIC = 4;</code>
     */
    public static final int ALTITUDE_REFERENCE_BAROMETRIC_VALUE = 4;
    /**
     * <pre>
     * Positive distance above sea floor (ASF) at a specific lat/lon
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR = 5;</code>
     */
    public static final int ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR_VALUE = 5;
    /**
     * <pre>
     * Positive distance below surface at a specific lat/lon
     * </pre>
     *
     * <code>ALTITUDE_REFERENCE_BELOW_SEA_SURFACE = 6;</code>
     */
    public static final int ALTITUDE_REFERENCE_BELOW_SEA_SURFACE_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AltitudeReference valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static AltitudeReference forNumber(int value) {
      switch (value) {
        case 0: return ALTITUDE_REFERENCE_INVALID;
        case 1: return ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS84;
        case 2: return ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM96;
        case 3: return ALTITUDE_REFERENCE_UNKNOWN;
        case 4: return ALTITUDE_REFERENCE_BAROMETRIC;
        case 5: return ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR;
        case 6: return ALTITUDE_REFERENCE_BELOW_SEA_SURFACE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AltitudeReference>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AltitudeReference> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AltitudeReference>() {
            public AltitudeReference findValueByNumber(int number) {
              return AltitudeReference.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.anduril.type.LLA.getDescriptor().getEnumTypes().get(0);
    }

    private static final AltitudeReference[] VALUES = values();

    public static AltitudeReference valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private AltitudeReference(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:anduril.type.LLA.AltitudeReference)
  }

  public static final int LON_FIELD_NUMBER = 1;
  private double lon_ = 0D;
  /**
   * <pre>
   * WGS84 longitude in decimal degrees
   * </pre>
   *
   * <code>double lon = 1 [json_name = "lon"];</code>
   * @return The lon.
   */
  @java.lang.Override
  public double getLon() {
    return lon_;
  }

  public static final int LAT_FIELD_NUMBER = 2;
  private double lat_ = 0D;
  /**
   * <pre>
   * WGS84 geodetic latitude in decimal degrees
   * </pre>
   *
   * <code>double lat = 2 [json_name = "lat"];</code>
   * @return The lat.
   */
  @java.lang.Override
  public double getLat() {
    return lat_;
  }

  public static final int ALT_FIELD_NUMBER = 3;
  private double alt_ = 0D;
  /**
   * <pre>
   * altitude in meters above either WGS84 or EGM96 (see altitude_reference)
   * </pre>
   *
   * <code>double alt = 3 [json_name = "alt"];</code>
   * @return The alt.
   */
  @java.lang.Override
  public double getAlt() {
    return alt_;
  }

  public static final int IS2D_FIELD_NUMBER = 4;
  private boolean is2D_ = false;
  /**
   * <pre>
   * [default=false] indicates that altitude is either unset or so uncertain that it is meaningless
   * </pre>
   *
   * <code>bool is2d = 4 [json_name = "is2d"];</code>
   * @return The is2d.
   */
  @java.lang.Override
  public boolean getIs2D() {
    return is2D_;
  }

  public static final int ALTITUDE_REFERENCE_FIELD_NUMBER = 5;
  private int altitudeReference_ = 0;
  /**
   * <pre>
   * Meaning of alt.
   * altitude in meters above either WGS84 or EGM96, use altitude_reference to
   * determine what zero means.
   * </pre>
   *
   * <code>.anduril.type.LLA.AltitudeReference altitude_reference = 5 [json_name = "altitudeReference"];</code>
   * @return The enum numeric value on the wire for altitudeReference.
   */
  @java.lang.Override public int getAltitudeReferenceValue() {
    return altitudeReference_;
  }
  /**
   * <pre>
   * Meaning of alt.
   * altitude in meters above either WGS84 or EGM96, use altitude_reference to
   * determine what zero means.
   * </pre>
   *
   * <code>.anduril.type.LLA.AltitudeReference altitude_reference = 5 [json_name = "altitudeReference"];</code>
   * @return The altitudeReference.
   */
  @java.lang.Override public com.anduril.type.LLA.AltitudeReference getAltitudeReference() {
    com.anduril.type.LLA.AltitudeReference result = com.anduril.type.LLA.AltitudeReference.forNumber(altitudeReference_);
    return result == null ? com.anduril.type.LLA.AltitudeReference.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (java.lang.Double.doubleToRawLongBits(lon_) != 0) {
      output.writeDouble(1, lon_);
    }
    if (java.lang.Double.doubleToRawLongBits(lat_) != 0) {
      output.writeDouble(2, lat_);
    }
    if (java.lang.Double.doubleToRawLongBits(alt_) != 0) {
      output.writeDouble(3, alt_);
    }
    if (is2D_ != false) {
      output.writeBool(4, is2D_);
    }
    if (altitudeReference_ != com.anduril.type.LLA.AltitudeReference.ALTITUDE_REFERENCE_INVALID.getNumber()) {
      output.writeEnum(5, altitudeReference_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (java.lang.Double.doubleToRawLongBits(lon_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, lon_);
    }
    if (java.lang.Double.doubleToRawLongBits(lat_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(2, lat_);
    }
    if (java.lang.Double.doubleToRawLongBits(alt_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, alt_);
    }
    if (is2D_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, is2D_);
    }
    if (altitudeReference_ != com.anduril.type.LLA.AltitudeReference.ALTITUDE_REFERENCE_INVALID.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, altitudeReference_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.anduril.type.LLA)) {
      return super.equals(obj);
    }
    com.anduril.type.LLA other = (com.anduril.type.LLA) obj;

    if (java.lang.Double.doubleToLongBits(getLon())
        != java.lang.Double.doubleToLongBits(
            other.getLon())) return false;
    if (java.lang.Double.doubleToLongBits(getLat())
        != java.lang.Double.doubleToLongBits(
            other.getLat())) return false;
    if (java.lang.Double.doubleToLongBits(getAlt())
        != java.lang.Double.doubleToLongBits(
            other.getAlt())) return false;
    if (getIs2D()
        != other.getIs2D()) return false;
    if (altitudeReference_ != other.altitudeReference_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + LON_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getLon()));
    hash = (37 * hash) + LAT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getLat()));
    hash = (37 * hash) + ALT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getAlt()));
    hash = (37 * hash) + IS2D_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIs2D());
    hash = (37 * hash) + ALTITUDE_REFERENCE_FIELD_NUMBER;
    hash = (53 * hash) + altitudeReference_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.anduril.type.LLA parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.type.LLA parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.type.LLA parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.type.LLA parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.type.LLA parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.type.LLA parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.type.LLA parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.anduril.type.LLA parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.anduril.type.LLA parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.anduril.type.LLA parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.anduril.type.LLA parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.anduril.type.LLA parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.anduril.type.LLA prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code anduril.type.LLA}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:anduril.type.LLA)
      com.anduril.type.LLAOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.anduril.type.CoordsPubProto.internal_static_anduril_type_LLA_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.anduril.type.CoordsPubProto.internal_static_anduril_type_LLA_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.anduril.type.LLA.class, com.anduril.type.LLA.Builder.class);
    }

    // Construct using com.anduril.type.LLA.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      lon_ = 0D;
      lat_ = 0D;
      alt_ = 0D;
      is2D_ = false;
      altitudeReference_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.anduril.type.CoordsPubProto.internal_static_anduril_type_LLA_descriptor;
    }

    @java.lang.Override
    public com.anduril.type.LLA getDefaultInstanceForType() {
      return com.anduril.type.LLA.getDefaultInstance();
    }

    @java.lang.Override
    public com.anduril.type.LLA build() {
      com.anduril.type.LLA result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.anduril.type.LLA buildPartial() {
      com.anduril.type.LLA result = new com.anduril.type.LLA(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.anduril.type.LLA result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.lon_ = lon_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.lat_ = lat_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.alt_ = alt_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.is2D_ = is2D_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.altitudeReference_ = altitudeReference_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.anduril.type.LLA) {
        return mergeFrom((com.anduril.type.LLA)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.anduril.type.LLA other) {
      if (other == com.anduril.type.LLA.getDefaultInstance()) return this;
      if (other.getLon() != 0D) {
        setLon(other.getLon());
      }
      if (other.getLat() != 0D) {
        setLat(other.getLat());
      }
      if (other.getAlt() != 0D) {
        setAlt(other.getAlt());
      }
      if (other.getIs2D() != false) {
        setIs2D(other.getIs2D());
      }
      if (other.altitudeReference_ != 0) {
        setAltitudeReferenceValue(other.getAltitudeReferenceValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              lon_ = input.readDouble();
              bitField0_ |= 0x00000001;
              break;
            } // case 9
            case 17: {
              lat_ = input.readDouble();
              bitField0_ |= 0x00000002;
              break;
            } // case 17
            case 25: {
              alt_ = input.readDouble();
              bitField0_ |= 0x00000004;
              break;
            } // case 25
            case 32: {
              is2D_ = input.readBool();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              altitudeReference_ = input.readEnum();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private double lon_ ;
    /**
     * <pre>
     * WGS84 longitude in decimal degrees
     * </pre>
     *
     * <code>double lon = 1 [json_name = "lon"];</code>
     * @return The lon.
     */
    @java.lang.Override
    public double getLon() {
      return lon_;
    }
    /**
     * <pre>
     * WGS84 longitude in decimal degrees
     * </pre>
     *
     * <code>double lon = 1 [json_name = "lon"];</code>
     * @param value The lon to set.
     * @return This builder for chaining.
     */
    public Builder setLon(double value) {

      lon_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * WGS84 longitude in decimal degrees
     * </pre>
     *
     * <code>double lon = 1 [json_name = "lon"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLon() {
      bitField0_ = (bitField0_ & ~0x00000001);
      lon_ = 0D;
      onChanged();
      return this;
    }

    private double lat_ ;
    /**
     * <pre>
     * WGS84 geodetic latitude in decimal degrees
     * </pre>
     *
     * <code>double lat = 2 [json_name = "lat"];</code>
     * @return The lat.
     */
    @java.lang.Override
    public double getLat() {
      return lat_;
    }
    /**
     * <pre>
     * WGS84 geodetic latitude in decimal degrees
     * </pre>
     *
     * <code>double lat = 2 [json_name = "lat"];</code>
     * @param value The lat to set.
     * @return This builder for chaining.
     */
    public Builder setLat(double value) {

      lat_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * WGS84 geodetic latitude in decimal degrees
     * </pre>
     *
     * <code>double lat = 2 [json_name = "lat"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLat() {
      bitField0_ = (bitField0_ & ~0x00000002);
      lat_ = 0D;
      onChanged();
      return this;
    }

    private double alt_ ;
    /**
     * <pre>
     * altitude in meters above either WGS84 or EGM96 (see altitude_reference)
     * </pre>
     *
     * <code>double alt = 3 [json_name = "alt"];</code>
     * @return The alt.
     */
    @java.lang.Override
    public double getAlt() {
      return alt_;
    }
    /**
     * <pre>
     * altitude in meters above either WGS84 or EGM96 (see altitude_reference)
     * </pre>
     *
     * <code>double alt = 3 [json_name = "alt"];</code>
     * @param value The alt to set.
     * @return This builder for chaining.
     */
    public Builder setAlt(double value) {

      alt_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * altitude in meters above either WGS84 or EGM96 (see altitude_reference)
     * </pre>
     *
     * <code>double alt = 3 [json_name = "alt"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAlt() {
      bitField0_ = (bitField0_ & ~0x00000004);
      alt_ = 0D;
      onChanged();
      return this;
    }

    private boolean is2D_ ;
    /**
     * <pre>
     * [default=false] indicates that altitude is either unset or so uncertain that it is meaningless
     * </pre>
     *
     * <code>bool is2d = 4 [json_name = "is2d"];</code>
     * @return The is2d.
     */
    @java.lang.Override
    public boolean getIs2D() {
      return is2D_;
    }
    /**
     * <pre>
     * [default=false] indicates that altitude is either unset or so uncertain that it is meaningless
     * </pre>
     *
     * <code>bool is2d = 4 [json_name = "is2d"];</code>
     * @param value The is2d to set.
     * @return This builder for chaining.
     */
    public Builder setIs2D(boolean value) {

      is2D_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * [default=false] indicates that altitude is either unset or so uncertain that it is meaningless
     * </pre>
     *
     * <code>bool is2d = 4 [json_name = "is2d"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIs2D() {
      bitField0_ = (bitField0_ & ~0x00000008);
      is2D_ = false;
      onChanged();
      return this;
    }

    private int altitudeReference_ = 0;
    /**
     * <pre>
     * Meaning of alt.
     * altitude in meters above either WGS84 or EGM96, use altitude_reference to
     * determine what zero means.
     * </pre>
     *
     * <code>.anduril.type.LLA.AltitudeReference altitude_reference = 5 [json_name = "altitudeReference"];</code>
     * @return The enum numeric value on the wire for altitudeReference.
     */
    @java.lang.Override public int getAltitudeReferenceValue() {
      return altitudeReference_;
    }
    /**
     * <pre>
     * Meaning of alt.
     * altitude in meters above either WGS84 or EGM96, use altitude_reference to
     * determine what zero means.
     * </pre>
     *
     * <code>.anduril.type.LLA.AltitudeReference altitude_reference = 5 [json_name = "altitudeReference"];</code>
     * @param value The enum numeric value on the wire for altitudeReference to set.
     * @return This builder for chaining.
     */
    public Builder setAltitudeReferenceValue(int value) {
      altitudeReference_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Meaning of alt.
     * altitude in meters above either WGS84 or EGM96, use altitude_reference to
     * determine what zero means.
     * </pre>
     *
     * <code>.anduril.type.LLA.AltitudeReference altitude_reference = 5 [json_name = "altitudeReference"];</code>
     * @return The altitudeReference.
     */
    @java.lang.Override
    public com.anduril.type.LLA.AltitudeReference getAltitudeReference() {
      com.anduril.type.LLA.AltitudeReference result = com.anduril.type.LLA.AltitudeReference.forNumber(altitudeReference_);
      return result == null ? com.anduril.type.LLA.AltitudeReference.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Meaning of alt.
     * altitude in meters above either WGS84 or EGM96, use altitude_reference to
     * determine what zero means.
     * </pre>
     *
     * <code>.anduril.type.LLA.AltitudeReference altitude_reference = 5 [json_name = "altitudeReference"];</code>
     * @param value The altitudeReference to set.
     * @return This builder for chaining.
     */
    public Builder setAltitudeReference(com.anduril.type.LLA.AltitudeReference value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000010;
      altitudeReference_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Meaning of alt.
     * altitude in meters above either WGS84 or EGM96, use altitude_reference to
     * determine what zero means.
     * </pre>
     *
     * <code>.anduril.type.LLA.AltitudeReference altitude_reference = 5 [json_name = "altitudeReference"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAltitudeReference() {
      bitField0_ = (bitField0_ & ~0x00000010);
      altitudeReference_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:anduril.type.LLA)
  }

  // @@protoc_insertion_point(class_scope:anduril.type.LLA)
  private static final com.anduril.type.LLA DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.anduril.type.LLA();
  }

  public static com.anduril.type.LLA getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LLA>
      PARSER = new com.google.protobuf.AbstractParser<LLA>() {
    @java.lang.Override
    public LLA parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<LLA> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LLA> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.anduril.type.LLA getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

