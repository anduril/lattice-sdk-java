// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/supplies.pub.proto

// Protobuf Java Version: 3.25.3
package com.anduril.entitymanager.v1;

/**
 * <pre>
 * DOD Condition Codes as documented: DLM 4000.25, Volume 2, April 09, 2022 Change 14. located at https://www.dla.mil/Defense-Data-Standards/Publications/Appendices/
 * Please refer to the DLM reference for more details about each condition code
 * </pre>
 *
 * Protobuf enum {@code anduril.entitymanager.v1.DODConditionCode}
 */
public enum DODConditionCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>DOD_CONDITION_CODE_INVALID = 0;</code>
   */
  DOD_CONDITION_CODE_INVALID(0),
  /**
   * <pre>
   * Serviceable issuable without qualification (i.e., ready for use)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_A = 1;</code>
   */
  DOD_CONDITION_CODE_A(1),
  /**
   * <pre>
   * Serviceable issuable with qualification  (e.g., limited shelf life)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_B = 2;</code>
   */
  DOD_CONDITION_CODE_B(2),
  /**
   * <pre>
   * Serviceable priority issue (i.e., use before A or B)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_C = 3;</code>
   */
  DOD_CONDITION_CODE_C(3),
  /**
   * <pre>
   * Serviceable (requires test or modification)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_D = 4;</code>
   */
  DOD_CONDITION_CODE_D(4),
  /**
   * <pre>
   * Unserviceable but limited restoration required
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_E = 5;</code>
   */
  DOD_CONDITION_CODE_E(5),
  /**
   * <pre>
   * Unserviceable Repairable (i.e., requires repair before ready for use)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_F = 6;</code>
   */
  DOD_CONDITION_CODE_F(6),
  /**
   * <pre>
   * Unserviceable Incomplete (needs add't parts)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_G = 7;</code>
   */
  DOD_CONDITION_CODE_G(7),
  /**
   * <pre>
   * Unserviceable (Condemned; requires classification or analysis)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_H = 8;</code>
   */
  DOD_CONDITION_CODE_H(8),
  /**
   * <pre>
   * Suspended (Product Deficiency)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_Q = 9;</code>
   */
  DOD_CONDITION_CODE_Q(9),
  /**
   * <pre>
   * Scrap. Materiel that has no value except for its basic materiel content
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_S = 10;</code>
   */
  DOD_CONDITION_CODE_S(10),
  /**
   * <pre>
   * Suspended (In Stock; requires classification or analysis)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_J = 11;</code>
   */
  DOD_CONDITION_CODE_J(11),
  /**
   * <pre>
   * Suspended (Returns)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_K = 12;</code>
   */
  DOD_CONDITION_CODE_K(12),
  /**
   * <pre>
   * Suspended (Litigation)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_L = 13;</code>
   */
  DOD_CONDITION_CODE_L(13),
  /**
   * <pre>
   * Suspended (In work; undergoing maintenance)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_M = 14;</code>
   */
  DOD_CONDITION_CODE_M(14),
  /**
   * <pre>
   * Suspended (Ammunition Suitable for Emergency Combat Use Only)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_N = 15;</code>
   */
  DOD_CONDITION_CODE_N(15),
  /**
   * <pre>
   * Unserviceable (Contains parts that could be reclaimed)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_P = 16;</code>
   */
  DOD_CONDITION_CODE_P(16),
  /**
   * <pre>
   * Suspended (Reclaimed items, awaiting condition determination)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_R = 17;</code>
   */
  DOD_CONDITION_CODE_R(17),
  /**
   * <pre>
   * Serviceable (Ammunition Suitable for Training Use Only)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_T = 18;</code>
   */
  DOD_CONDITION_CODE_T(18),
  /**
   * <pre>
   * Unserviceable (waste military munitions)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_V = 19;</code>
   */
  DOD_CONDITION_CODE_V(19),
  /**
   * <pre>
   * Suspended (repair decision delayed)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_X = 20;</code>
   */
  DOD_CONDITION_CODE_X(20),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>DOD_CONDITION_CODE_INVALID = 0;</code>
   */
  public static final int DOD_CONDITION_CODE_INVALID_VALUE = 0;
  /**
   * <pre>
   * Serviceable issuable without qualification (i.e., ready for use)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_A = 1;</code>
   */
  public static final int DOD_CONDITION_CODE_A_VALUE = 1;
  /**
   * <pre>
   * Serviceable issuable with qualification  (e.g., limited shelf life)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_B = 2;</code>
   */
  public static final int DOD_CONDITION_CODE_B_VALUE = 2;
  /**
   * <pre>
   * Serviceable priority issue (i.e., use before A or B)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_C = 3;</code>
   */
  public static final int DOD_CONDITION_CODE_C_VALUE = 3;
  /**
   * <pre>
   * Serviceable (requires test or modification)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_D = 4;</code>
   */
  public static final int DOD_CONDITION_CODE_D_VALUE = 4;
  /**
   * <pre>
   * Unserviceable but limited restoration required
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_E = 5;</code>
   */
  public static final int DOD_CONDITION_CODE_E_VALUE = 5;
  /**
   * <pre>
   * Unserviceable Repairable (i.e., requires repair before ready for use)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_F = 6;</code>
   */
  public static final int DOD_CONDITION_CODE_F_VALUE = 6;
  /**
   * <pre>
   * Unserviceable Incomplete (needs add't parts)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_G = 7;</code>
   */
  public static final int DOD_CONDITION_CODE_G_VALUE = 7;
  /**
   * <pre>
   * Unserviceable (Condemned; requires classification or analysis)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_H = 8;</code>
   */
  public static final int DOD_CONDITION_CODE_H_VALUE = 8;
  /**
   * <pre>
   * Suspended (Product Deficiency)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_Q = 9;</code>
   */
  public static final int DOD_CONDITION_CODE_Q_VALUE = 9;
  /**
   * <pre>
   * Scrap. Materiel that has no value except for its basic materiel content
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_S = 10;</code>
   */
  public static final int DOD_CONDITION_CODE_S_VALUE = 10;
  /**
   * <pre>
   * Suspended (In Stock; requires classification or analysis)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_J = 11;</code>
   */
  public static final int DOD_CONDITION_CODE_J_VALUE = 11;
  /**
   * <pre>
   * Suspended (Returns)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_K = 12;</code>
   */
  public static final int DOD_CONDITION_CODE_K_VALUE = 12;
  /**
   * <pre>
   * Suspended (Litigation)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_L = 13;</code>
   */
  public static final int DOD_CONDITION_CODE_L_VALUE = 13;
  /**
   * <pre>
   * Suspended (In work; undergoing maintenance)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_M = 14;</code>
   */
  public static final int DOD_CONDITION_CODE_M_VALUE = 14;
  /**
   * <pre>
   * Suspended (Ammunition Suitable for Emergency Combat Use Only)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_N = 15;</code>
   */
  public static final int DOD_CONDITION_CODE_N_VALUE = 15;
  /**
   * <pre>
   * Unserviceable (Contains parts that could be reclaimed)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_P = 16;</code>
   */
  public static final int DOD_CONDITION_CODE_P_VALUE = 16;
  /**
   * <pre>
   * Suspended (Reclaimed items, awaiting condition determination)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_R = 17;</code>
   */
  public static final int DOD_CONDITION_CODE_R_VALUE = 17;
  /**
   * <pre>
   * Serviceable (Ammunition Suitable for Training Use Only)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_T = 18;</code>
   */
  public static final int DOD_CONDITION_CODE_T_VALUE = 18;
  /**
   * <pre>
   * Unserviceable (waste military munitions)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_V = 19;</code>
   */
  public static final int DOD_CONDITION_CODE_V_VALUE = 19;
  /**
   * <pre>
   * Suspended (repair decision delayed)
   * </pre>
   *
   * <code>DOD_CONDITION_CODE_X = 20;</code>
   */
  public static final int DOD_CONDITION_CODE_X_VALUE = 20;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static DODConditionCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static DODConditionCode forNumber(int value) {
    switch (value) {
      case 0: return DOD_CONDITION_CODE_INVALID;
      case 1: return DOD_CONDITION_CODE_A;
      case 2: return DOD_CONDITION_CODE_B;
      case 3: return DOD_CONDITION_CODE_C;
      case 4: return DOD_CONDITION_CODE_D;
      case 5: return DOD_CONDITION_CODE_E;
      case 6: return DOD_CONDITION_CODE_F;
      case 7: return DOD_CONDITION_CODE_G;
      case 8: return DOD_CONDITION_CODE_H;
      case 9: return DOD_CONDITION_CODE_Q;
      case 10: return DOD_CONDITION_CODE_S;
      case 11: return DOD_CONDITION_CODE_J;
      case 12: return DOD_CONDITION_CODE_K;
      case 13: return DOD_CONDITION_CODE_L;
      case 14: return DOD_CONDITION_CODE_M;
      case 15: return DOD_CONDITION_CODE_N;
      case 16: return DOD_CONDITION_CODE_P;
      case 17: return DOD_CONDITION_CODE_R;
      case 18: return DOD_CONDITION_CODE_T;
      case 19: return DOD_CONDITION_CODE_V;
      case 20: return DOD_CONDITION_CODE_X;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<DODConditionCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      DODConditionCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<DODConditionCode>() {
          public DODConditionCode findValueByNumber(int number) {
            return DODConditionCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.anduril.entitymanager.v1.SuppliesPubProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final DODConditionCode[] VALUES = values();

  public static DODConditionCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private DODConditionCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:anduril.entitymanager.v1.DODConditionCode)
}

