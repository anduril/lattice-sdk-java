// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/sensors.pub.proto
// Protobuf Java Version: 4.27.3

package com.anduril.entitymanager.v1;

/**
 * <pre>
 * Sensor Field Of View closely resembling fov.proto SensorFieldOfView.
 * </pre>
 *
 * Protobuf type {@code anduril.entitymanager.v1.FieldOfView}
 */
public final class FieldOfView extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:anduril.entitymanager.v1.FieldOfView)
    FieldOfViewOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 3,
      /* suffix= */ "",
      FieldOfView.class.getName());
  }
  // Use FieldOfView.newBuilder() to construct.
  private FieldOfView(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private FieldOfView() {
    mountId_ = "";
    mode_ = 0;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.anduril.entitymanager.v1.SensorsPubProto.internal_static_anduril_entitymanager_v1_FieldOfView_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.anduril.entitymanager.v1.SensorsPubProto.internal_static_anduril_entitymanager_v1_FieldOfView_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.anduril.entitymanager.v1.FieldOfView.class, com.anduril.entitymanager.v1.FieldOfView.Builder.class);
  }

  private int bitField0_;
  public static final int FOV_ID_FIELD_NUMBER = 1;
  private int fovId_ = 0;
  /**
   * <pre>
   * The Id for one instance of a FieldOfView, persisted across multiple updates to provide continuity during
   * smoothing. This is relevant for sensors like an ESM or Radar where the dwell schedule is on the order of
   * milliseconds, making multiple FOVs a requirement for proper display of search and weapon support beams.
   * </pre>
   *
   * <code>int32 fov_id = 1 [json_name = "fovId"];</code>
   * @return The fovId.
   */
  @java.lang.Override
  public int getFovId() {
    return fovId_;
  }

  public static final int MOUNT_ID_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object mountId_ = "";
  /**
   * <pre>
   * The Id of the mount the sensor is on.
   * </pre>
   *
   * <code>string mount_id = 2 [json_name = "mountId"];</code>
   * @return The mountId.
   */
  @java.lang.Override
  public java.lang.String getMountId() {
    java.lang.Object ref = mountId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      mountId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The Id of the mount the sensor is on.
   * </pre>
   *
   * <code>string mount_id = 2 [json_name = "mountId"];</code>
   * @return The bytes for mountId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getMountIdBytes() {
    java.lang.Object ref = mountId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      mountId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PROJECTED_FRUSTUM_FIELD_NUMBER = 3;
  private com.anduril.entitymanager.v1.ProjectedFrustum projectedFrustum_;
  /**
   * <pre>
   * The field of view the sensor projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
   * @return Whether the projectedFrustum field is set.
   */
  @java.lang.Override
  public boolean hasProjectedFrustum() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The field of view the sensor projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
   * @return The projectedFrustum.
   */
  @java.lang.Override
  public com.anduril.entitymanager.v1.ProjectedFrustum getProjectedFrustum() {
    return projectedFrustum_ == null ? com.anduril.entitymanager.v1.ProjectedFrustum.getDefaultInstance() : projectedFrustum_;
  }
  /**
   * <pre>
   * The field of view the sensor projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
   */
  @java.lang.Override
  public com.anduril.entitymanager.v1.ProjectedFrustumOrBuilder getProjectedFrustumOrBuilder() {
    return projectedFrustum_ == null ? com.anduril.entitymanager.v1.ProjectedFrustum.getDefaultInstance() : projectedFrustum_;
  }

  public static final int PROJECTED_CENTER_RAY_FIELD_NUMBER = 4;
  private com.anduril.entitymanager.v1.Position projectedCenterRay_;
  /**
   * <pre>
   * Center ray of the frustum projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
   * @return Whether the projectedCenterRay field is set.
   */
  @java.lang.Override
  public boolean hasProjectedCenterRay() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Center ray of the frustum projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
   * @return The projectedCenterRay.
   */
  @java.lang.Override
  public com.anduril.entitymanager.v1.Position getProjectedCenterRay() {
    return projectedCenterRay_ == null ? com.anduril.entitymanager.v1.Position.getDefaultInstance() : projectedCenterRay_;
  }
  /**
   * <pre>
   * Center ray of the frustum projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
   */
  @java.lang.Override
  public com.anduril.entitymanager.v1.PositionOrBuilder getProjectedCenterRayOrBuilder() {
    return projectedCenterRay_ == null ? com.anduril.entitymanager.v1.Position.getDefaultInstance() : projectedCenterRay_;
  }

  public static final int CENTER_RAY_POSE_FIELD_NUMBER = 5;
  private com.anduril.entitymanager.v1.Pose centerRayPose_;
  /**
   * <pre>
   * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
   * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
   * frame when transformed by the quaternion contained in this pose.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
   * @return Whether the centerRayPose field is set.
   */
  @java.lang.Override
  public boolean hasCenterRayPose() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
   * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
   * frame when transformed by the quaternion contained in this pose.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
   * @return The centerRayPose.
   */
  @java.lang.Override
  public com.anduril.entitymanager.v1.Pose getCenterRayPose() {
    return centerRayPose_ == null ? com.anduril.entitymanager.v1.Pose.getDefaultInstance() : centerRayPose_;
  }
  /**
   * <pre>
   * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
   * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
   * frame when transformed by the quaternion contained in this pose.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
   */
  @java.lang.Override
  public com.anduril.entitymanager.v1.PoseOrBuilder getCenterRayPoseOrBuilder() {
    return centerRayPose_ == null ? com.anduril.entitymanager.v1.Pose.getDefaultInstance() : centerRayPose_;
  }

  public static final int HORIZONTAL_FOV_FIELD_NUMBER = 6;
  private float horizontalFov_ = 0F;
  /**
   * <pre>
   * Horizontal field of view in radians.
   * </pre>
   *
   * <code>float horizontal_fov = 6 [json_name = "horizontalFov"];</code>
   * @return The horizontalFov.
   */
  @java.lang.Override
  public float getHorizontalFov() {
    return horizontalFov_;
  }

  public static final int VERTICAL_FOV_FIELD_NUMBER = 7;
  private float verticalFov_ = 0F;
  /**
   * <pre>
   * Vertical field of view in radians.
   * </pre>
   *
   * <code>float vertical_fov = 7 [json_name = "verticalFov"];</code>
   * @return The verticalFov.
   */
  @java.lang.Override
  public float getVerticalFov() {
    return verticalFov_;
  }

  public static final int RANGE_FIELD_NUMBER = 8;
  private com.google.protobuf.FloatValue range_;
  /**
   * <pre>
   * Sensor range in meters.
   * </pre>
   *
   * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
   * @return Whether the range field is set.
   */
  @java.lang.Override
  public boolean hasRange() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Sensor range in meters.
   * </pre>
   *
   * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
   * @return The range.
   */
  @java.lang.Override
  public com.google.protobuf.FloatValue getRange() {
    return range_ == null ? com.google.protobuf.FloatValue.getDefaultInstance() : range_;
  }
  /**
   * <pre>
   * Sensor range in meters.
   * </pre>
   *
   * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
   */
  @java.lang.Override
  public com.google.protobuf.FloatValueOrBuilder getRangeOrBuilder() {
    return range_ == null ? com.google.protobuf.FloatValue.getDefaultInstance() : range_;
  }

  public static final int MODE_FIELD_NUMBER = 9;
  private int mode_ = 0;
  /**
   * <pre>
   * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
   * sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
   * tighter bounded tracking.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.SensorMode mode = 9 [json_name = "mode"];</code>
   * @return The enum numeric value on the wire for mode.
   */
  @java.lang.Override public int getModeValue() {
    return mode_;
  }
  /**
   * <pre>
   * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
   * sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
   * tighter bounded tracking.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.SensorMode mode = 9 [json_name = "mode"];</code>
   * @return The mode.
   */
  @java.lang.Override public com.anduril.entitymanager.v1.SensorMode getMode() {
    com.anduril.entitymanager.v1.SensorMode result = com.anduril.entitymanager.v1.SensorMode.forNumber(mode_);
    return result == null ? com.anduril.entitymanager.v1.SensorMode.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (fovId_ != 0) {
      output.writeInt32(1, fovId_);
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(mountId_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 2, mountId_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(3, getProjectedFrustum());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(4, getProjectedCenterRay());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(5, getCenterRayPose());
    }
    if (java.lang.Float.floatToRawIntBits(horizontalFov_) != 0) {
      output.writeFloat(6, horizontalFov_);
    }
    if (java.lang.Float.floatToRawIntBits(verticalFov_) != 0) {
      output.writeFloat(7, verticalFov_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(8, getRange());
    }
    if (mode_ != com.anduril.entitymanager.v1.SensorMode.SENSOR_MODE_INVALID.getNumber()) {
      output.writeEnum(9, mode_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (fovId_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, fovId_);
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(mountId_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(2, mountId_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getProjectedFrustum());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getProjectedCenterRay());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getCenterRayPose());
    }
    if (java.lang.Float.floatToRawIntBits(horizontalFov_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(6, horizontalFov_);
    }
    if (java.lang.Float.floatToRawIntBits(verticalFov_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, verticalFov_);
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getRange());
    }
    if (mode_ != com.anduril.entitymanager.v1.SensorMode.SENSOR_MODE_INVALID.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, mode_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.anduril.entitymanager.v1.FieldOfView)) {
      return super.equals(obj);
    }
    com.anduril.entitymanager.v1.FieldOfView other = (com.anduril.entitymanager.v1.FieldOfView) obj;

    if (getFovId()
        != other.getFovId()) return false;
    if (!getMountId()
        .equals(other.getMountId())) return false;
    if (hasProjectedFrustum() != other.hasProjectedFrustum()) return false;
    if (hasProjectedFrustum()) {
      if (!getProjectedFrustum()
          .equals(other.getProjectedFrustum())) return false;
    }
    if (hasProjectedCenterRay() != other.hasProjectedCenterRay()) return false;
    if (hasProjectedCenterRay()) {
      if (!getProjectedCenterRay()
          .equals(other.getProjectedCenterRay())) return false;
    }
    if (hasCenterRayPose() != other.hasCenterRayPose()) return false;
    if (hasCenterRayPose()) {
      if (!getCenterRayPose()
          .equals(other.getCenterRayPose())) return false;
    }
    if (java.lang.Float.floatToIntBits(getHorizontalFov())
        != java.lang.Float.floatToIntBits(
            other.getHorizontalFov())) return false;
    if (java.lang.Float.floatToIntBits(getVerticalFov())
        != java.lang.Float.floatToIntBits(
            other.getVerticalFov())) return false;
    if (hasRange() != other.hasRange()) return false;
    if (hasRange()) {
      if (!getRange()
          .equals(other.getRange())) return false;
    }
    if (mode_ != other.mode_) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + FOV_ID_FIELD_NUMBER;
    hash = (53 * hash) + getFovId();
    hash = (37 * hash) + MOUNT_ID_FIELD_NUMBER;
    hash = (53 * hash) + getMountId().hashCode();
    if (hasProjectedFrustum()) {
      hash = (37 * hash) + PROJECTED_FRUSTUM_FIELD_NUMBER;
      hash = (53 * hash) + getProjectedFrustum().hashCode();
    }
    if (hasProjectedCenterRay()) {
      hash = (37 * hash) + PROJECTED_CENTER_RAY_FIELD_NUMBER;
      hash = (53 * hash) + getProjectedCenterRay().hashCode();
    }
    if (hasCenterRayPose()) {
      hash = (37 * hash) + CENTER_RAY_POSE_FIELD_NUMBER;
      hash = (53 * hash) + getCenterRayPose().hashCode();
    }
    hash = (37 * hash) + HORIZONTAL_FOV_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getHorizontalFov());
    hash = (37 * hash) + VERTICAL_FOV_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getVerticalFov());
    if (hasRange()) {
      hash = (37 * hash) + RANGE_FIELD_NUMBER;
      hash = (53 * hash) + getRange().hashCode();
    }
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.anduril.entitymanager.v1.FieldOfView parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.anduril.entitymanager.v1.FieldOfView parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.anduril.entitymanager.v1.FieldOfView parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.anduril.entitymanager.v1.FieldOfView prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Sensor Field Of View closely resembling fov.proto SensorFieldOfView.
   * </pre>
   *
   * Protobuf type {@code anduril.entitymanager.v1.FieldOfView}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:anduril.entitymanager.v1.FieldOfView)
      com.anduril.entitymanager.v1.FieldOfViewOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.anduril.entitymanager.v1.SensorsPubProto.internal_static_anduril_entitymanager_v1_FieldOfView_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.anduril.entitymanager.v1.SensorsPubProto.internal_static_anduril_entitymanager_v1_FieldOfView_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.anduril.entitymanager.v1.FieldOfView.class, com.anduril.entitymanager.v1.FieldOfView.Builder.class);
    }

    // Construct using com.anduril.entitymanager.v1.FieldOfView.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getProjectedFrustumFieldBuilder();
        getProjectedCenterRayFieldBuilder();
        getCenterRayPoseFieldBuilder();
        getRangeFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      fovId_ = 0;
      mountId_ = "";
      projectedFrustum_ = null;
      if (projectedFrustumBuilder_ != null) {
        projectedFrustumBuilder_.dispose();
        projectedFrustumBuilder_ = null;
      }
      projectedCenterRay_ = null;
      if (projectedCenterRayBuilder_ != null) {
        projectedCenterRayBuilder_.dispose();
        projectedCenterRayBuilder_ = null;
      }
      centerRayPose_ = null;
      if (centerRayPoseBuilder_ != null) {
        centerRayPoseBuilder_.dispose();
        centerRayPoseBuilder_ = null;
      }
      horizontalFov_ = 0F;
      verticalFov_ = 0F;
      range_ = null;
      if (rangeBuilder_ != null) {
        rangeBuilder_.dispose();
        rangeBuilder_ = null;
      }
      mode_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.anduril.entitymanager.v1.SensorsPubProto.internal_static_anduril_entitymanager_v1_FieldOfView_descriptor;
    }

    @java.lang.Override
    public com.anduril.entitymanager.v1.FieldOfView getDefaultInstanceForType() {
      return com.anduril.entitymanager.v1.FieldOfView.getDefaultInstance();
    }

    @java.lang.Override
    public com.anduril.entitymanager.v1.FieldOfView build() {
      com.anduril.entitymanager.v1.FieldOfView result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.anduril.entitymanager.v1.FieldOfView buildPartial() {
      com.anduril.entitymanager.v1.FieldOfView result = new com.anduril.entitymanager.v1.FieldOfView(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.anduril.entitymanager.v1.FieldOfView result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.fovId_ = fovId_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.mountId_ = mountId_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.projectedFrustum_ = projectedFrustumBuilder_ == null
            ? projectedFrustum_
            : projectedFrustumBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.projectedCenterRay_ = projectedCenterRayBuilder_ == null
            ? projectedCenterRay_
            : projectedCenterRayBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.centerRayPose_ = centerRayPoseBuilder_ == null
            ? centerRayPose_
            : centerRayPoseBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.horizontalFov_ = horizontalFov_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.verticalFov_ = verticalFov_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.range_ = rangeBuilder_ == null
            ? range_
            : rangeBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.mode_ = mode_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.anduril.entitymanager.v1.FieldOfView) {
        return mergeFrom((com.anduril.entitymanager.v1.FieldOfView)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.anduril.entitymanager.v1.FieldOfView other) {
      if (other == com.anduril.entitymanager.v1.FieldOfView.getDefaultInstance()) return this;
      if (other.getFovId() != 0) {
        setFovId(other.getFovId());
      }
      if (!other.getMountId().isEmpty()) {
        mountId_ = other.mountId_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasProjectedFrustum()) {
        mergeProjectedFrustum(other.getProjectedFrustum());
      }
      if (other.hasProjectedCenterRay()) {
        mergeProjectedCenterRay(other.getProjectedCenterRay());
      }
      if (other.hasCenterRayPose()) {
        mergeCenterRayPose(other.getCenterRayPose());
      }
      if (other.getHorizontalFov() != 0F) {
        setHorizontalFov(other.getHorizontalFov());
      }
      if (other.getVerticalFov() != 0F) {
        setVerticalFov(other.getVerticalFov());
      }
      if (other.hasRange()) {
        mergeRange(other.getRange());
      }
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              fovId_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              mountId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getProjectedFrustumFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getProjectedCenterRayFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getCenterRayPoseFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 53: {
              horizontalFov_ = input.readFloat();
              bitField0_ |= 0x00000020;
              break;
            } // case 53
            case 61: {
              verticalFov_ = input.readFloat();
              bitField0_ |= 0x00000040;
              break;
            } // case 61
            case 66: {
              input.readMessage(
                  getRangeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            case 72: {
              mode_ = input.readEnum();
              bitField0_ |= 0x00000100;
              break;
            } // case 72
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int fovId_ ;
    /**
     * <pre>
     * The Id for one instance of a FieldOfView, persisted across multiple updates to provide continuity during
     * smoothing. This is relevant for sensors like an ESM or Radar where the dwell schedule is on the order of
     * milliseconds, making multiple FOVs a requirement for proper display of search and weapon support beams.
     * </pre>
     *
     * <code>int32 fov_id = 1 [json_name = "fovId"];</code>
     * @return The fovId.
     */
    @java.lang.Override
    public int getFovId() {
      return fovId_;
    }
    /**
     * <pre>
     * The Id for one instance of a FieldOfView, persisted across multiple updates to provide continuity during
     * smoothing. This is relevant for sensors like an ESM or Radar where the dwell schedule is on the order of
     * milliseconds, making multiple FOVs a requirement for proper display of search and weapon support beams.
     * </pre>
     *
     * <code>int32 fov_id = 1 [json_name = "fovId"];</code>
     * @param value The fovId to set.
     * @return This builder for chaining.
     */
    public Builder setFovId(int value) {

      fovId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Id for one instance of a FieldOfView, persisted across multiple updates to provide continuity during
     * smoothing. This is relevant for sensors like an ESM or Radar where the dwell schedule is on the order of
     * milliseconds, making multiple FOVs a requirement for proper display of search and weapon support beams.
     * </pre>
     *
     * <code>int32 fov_id = 1 [json_name = "fovId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFovId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fovId_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object mountId_ = "";
    /**
     * <pre>
     * The Id of the mount the sensor is on.
     * </pre>
     *
     * <code>string mount_id = 2 [json_name = "mountId"];</code>
     * @return The mountId.
     */
    public java.lang.String getMountId() {
      java.lang.Object ref = mountId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mountId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The Id of the mount the sensor is on.
     * </pre>
     *
     * <code>string mount_id = 2 [json_name = "mountId"];</code>
     * @return The bytes for mountId.
     */
    public com.google.protobuf.ByteString
        getMountIdBytes() {
      java.lang.Object ref = mountId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mountId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The Id of the mount the sensor is on.
     * </pre>
     *
     * <code>string mount_id = 2 [json_name = "mountId"];</code>
     * @param value The mountId to set.
     * @return This builder for chaining.
     */
    public Builder setMountId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      mountId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Id of the mount the sensor is on.
     * </pre>
     *
     * <code>string mount_id = 2 [json_name = "mountId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMountId() {
      mountId_ = getDefaultInstance().getMountId();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The Id of the mount the sensor is on.
     * </pre>
     *
     * <code>string mount_id = 2 [json_name = "mountId"];</code>
     * @param value The bytes for mountId to set.
     * @return This builder for chaining.
     */
    public Builder setMountIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      mountId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private com.anduril.entitymanager.v1.ProjectedFrustum projectedFrustum_;
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.entitymanager.v1.ProjectedFrustum, com.anduril.entitymanager.v1.ProjectedFrustum.Builder, com.anduril.entitymanager.v1.ProjectedFrustumOrBuilder> projectedFrustumBuilder_;
    /**
     * <pre>
     * The field of view the sensor projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
     * @return Whether the projectedFrustum field is set.
     */
    public boolean hasProjectedFrustum() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The field of view the sensor projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
     * @return The projectedFrustum.
     */
    public com.anduril.entitymanager.v1.ProjectedFrustum getProjectedFrustum() {
      if (projectedFrustumBuilder_ == null) {
        return projectedFrustum_ == null ? com.anduril.entitymanager.v1.ProjectedFrustum.getDefaultInstance() : projectedFrustum_;
      } else {
        return projectedFrustumBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The field of view the sensor projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
     */
    public Builder setProjectedFrustum(com.anduril.entitymanager.v1.ProjectedFrustum value) {
      if (projectedFrustumBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        projectedFrustum_ = value;
      } else {
        projectedFrustumBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The field of view the sensor projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
     */
    public Builder setProjectedFrustum(
        com.anduril.entitymanager.v1.ProjectedFrustum.Builder builderForValue) {
      if (projectedFrustumBuilder_ == null) {
        projectedFrustum_ = builderForValue.build();
      } else {
        projectedFrustumBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The field of view the sensor projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
     */
    public Builder mergeProjectedFrustum(com.anduril.entitymanager.v1.ProjectedFrustum value) {
      if (projectedFrustumBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          projectedFrustum_ != null &&
          projectedFrustum_ != com.anduril.entitymanager.v1.ProjectedFrustum.getDefaultInstance()) {
          getProjectedFrustumBuilder().mergeFrom(value);
        } else {
          projectedFrustum_ = value;
        }
      } else {
        projectedFrustumBuilder_.mergeFrom(value);
      }
      if (projectedFrustum_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The field of view the sensor projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
     */
    public Builder clearProjectedFrustum() {
      bitField0_ = (bitField0_ & ~0x00000004);
      projectedFrustum_ = null;
      if (projectedFrustumBuilder_ != null) {
        projectedFrustumBuilder_.dispose();
        projectedFrustumBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The field of view the sensor projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
     */
    public com.anduril.entitymanager.v1.ProjectedFrustum.Builder getProjectedFrustumBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getProjectedFrustumFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The field of view the sensor projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
     */
    public com.anduril.entitymanager.v1.ProjectedFrustumOrBuilder getProjectedFrustumOrBuilder() {
      if (projectedFrustumBuilder_ != null) {
        return projectedFrustumBuilder_.getMessageOrBuilder();
      } else {
        return projectedFrustum_ == null ?
            com.anduril.entitymanager.v1.ProjectedFrustum.getDefaultInstance() : projectedFrustum_;
      }
    }
    /**
     * <pre>
     * The field of view the sensor projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.entitymanager.v1.ProjectedFrustum, com.anduril.entitymanager.v1.ProjectedFrustum.Builder, com.anduril.entitymanager.v1.ProjectedFrustumOrBuilder> 
        getProjectedFrustumFieldBuilder() {
      if (projectedFrustumBuilder_ == null) {
        projectedFrustumBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.anduril.entitymanager.v1.ProjectedFrustum, com.anduril.entitymanager.v1.ProjectedFrustum.Builder, com.anduril.entitymanager.v1.ProjectedFrustumOrBuilder>(
                getProjectedFrustum(),
                getParentForChildren(),
                isClean());
        projectedFrustum_ = null;
      }
      return projectedFrustumBuilder_;
    }

    private com.anduril.entitymanager.v1.Position projectedCenterRay_;
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.entitymanager.v1.Position, com.anduril.entitymanager.v1.Position.Builder, com.anduril.entitymanager.v1.PositionOrBuilder> projectedCenterRayBuilder_;
    /**
     * <pre>
     * Center ray of the frustum projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
     * @return Whether the projectedCenterRay field is set.
     */
    public boolean hasProjectedCenterRay() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Center ray of the frustum projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
     * @return The projectedCenterRay.
     */
    public com.anduril.entitymanager.v1.Position getProjectedCenterRay() {
      if (projectedCenterRayBuilder_ == null) {
        return projectedCenterRay_ == null ? com.anduril.entitymanager.v1.Position.getDefaultInstance() : projectedCenterRay_;
      } else {
        return projectedCenterRayBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Center ray of the frustum projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
     */
    public Builder setProjectedCenterRay(com.anduril.entitymanager.v1.Position value) {
      if (projectedCenterRayBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        projectedCenterRay_ = value;
      } else {
        projectedCenterRayBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Center ray of the frustum projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
     */
    public Builder setProjectedCenterRay(
        com.anduril.entitymanager.v1.Position.Builder builderForValue) {
      if (projectedCenterRayBuilder_ == null) {
        projectedCenterRay_ = builderForValue.build();
      } else {
        projectedCenterRayBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Center ray of the frustum projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
     */
    public Builder mergeProjectedCenterRay(com.anduril.entitymanager.v1.Position value) {
      if (projectedCenterRayBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          projectedCenterRay_ != null &&
          projectedCenterRay_ != com.anduril.entitymanager.v1.Position.getDefaultInstance()) {
          getProjectedCenterRayBuilder().mergeFrom(value);
        } else {
          projectedCenterRay_ = value;
        }
      } else {
        projectedCenterRayBuilder_.mergeFrom(value);
      }
      if (projectedCenterRay_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Center ray of the frustum projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
     */
    public Builder clearProjectedCenterRay() {
      bitField0_ = (bitField0_ & ~0x00000008);
      projectedCenterRay_ = null;
      if (projectedCenterRayBuilder_ != null) {
        projectedCenterRayBuilder_.dispose();
        projectedCenterRayBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Center ray of the frustum projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
     */
    public com.anduril.entitymanager.v1.Position.Builder getProjectedCenterRayBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getProjectedCenterRayFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Center ray of the frustum projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
     */
    public com.anduril.entitymanager.v1.PositionOrBuilder getProjectedCenterRayOrBuilder() {
      if (projectedCenterRayBuilder_ != null) {
        return projectedCenterRayBuilder_.getMessageOrBuilder();
      } else {
        return projectedCenterRay_ == null ?
            com.anduril.entitymanager.v1.Position.getDefaultInstance() : projectedCenterRay_;
      }
    }
    /**
     * <pre>
     * Center ray of the frustum projected onto the ground.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.entitymanager.v1.Position, com.anduril.entitymanager.v1.Position.Builder, com.anduril.entitymanager.v1.PositionOrBuilder> 
        getProjectedCenterRayFieldBuilder() {
      if (projectedCenterRayBuilder_ == null) {
        projectedCenterRayBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.anduril.entitymanager.v1.Position, com.anduril.entitymanager.v1.Position.Builder, com.anduril.entitymanager.v1.PositionOrBuilder>(
                getProjectedCenterRay(),
                getParentForChildren(),
                isClean());
        projectedCenterRay_ = null;
      }
      return projectedCenterRayBuilder_;
    }

    private com.anduril.entitymanager.v1.Pose centerRayPose_;
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.entitymanager.v1.Pose, com.anduril.entitymanager.v1.Pose.Builder, com.anduril.entitymanager.v1.PoseOrBuilder> centerRayPoseBuilder_;
    /**
     * <pre>
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     * frame when transformed by the quaternion contained in this pose.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
     * @return Whether the centerRayPose field is set.
     */
    public boolean hasCenterRayPose() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     * frame when transformed by the quaternion contained in this pose.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
     * @return The centerRayPose.
     */
    public com.anduril.entitymanager.v1.Pose getCenterRayPose() {
      if (centerRayPoseBuilder_ == null) {
        return centerRayPose_ == null ? com.anduril.entitymanager.v1.Pose.getDefaultInstance() : centerRayPose_;
      } else {
        return centerRayPoseBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     * frame when transformed by the quaternion contained in this pose.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
     */
    public Builder setCenterRayPose(com.anduril.entitymanager.v1.Pose value) {
      if (centerRayPoseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        centerRayPose_ = value;
      } else {
        centerRayPoseBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     * frame when transformed by the quaternion contained in this pose.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
     */
    public Builder setCenterRayPose(
        com.anduril.entitymanager.v1.Pose.Builder builderForValue) {
      if (centerRayPoseBuilder_ == null) {
        centerRayPose_ = builderForValue.build();
      } else {
        centerRayPoseBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     * frame when transformed by the quaternion contained in this pose.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
     */
    public Builder mergeCenterRayPose(com.anduril.entitymanager.v1.Pose value) {
      if (centerRayPoseBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          centerRayPose_ != null &&
          centerRayPose_ != com.anduril.entitymanager.v1.Pose.getDefaultInstance()) {
          getCenterRayPoseBuilder().mergeFrom(value);
        } else {
          centerRayPose_ = value;
        }
      } else {
        centerRayPoseBuilder_.mergeFrom(value);
      }
      if (centerRayPose_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     * frame when transformed by the quaternion contained in this pose.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
     */
    public Builder clearCenterRayPose() {
      bitField0_ = (bitField0_ & ~0x00000010);
      centerRayPose_ = null;
      if (centerRayPoseBuilder_ != null) {
        centerRayPoseBuilder_.dispose();
        centerRayPoseBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     * frame when transformed by the quaternion contained in this pose.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
     */
    public com.anduril.entitymanager.v1.Pose.Builder getCenterRayPoseBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getCenterRayPoseFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     * frame when transformed by the quaternion contained in this pose.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
     */
    public com.anduril.entitymanager.v1.PoseOrBuilder getCenterRayPoseOrBuilder() {
      if (centerRayPoseBuilder_ != null) {
        return centerRayPoseBuilder_.getMessageOrBuilder();
      } else {
        return centerRayPose_ == null ?
            com.anduril.entitymanager.v1.Pose.getDefaultInstance() : centerRayPose_;
      }
    }
    /**
     * <pre>
     * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
     * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
     * frame when transformed by the quaternion contained in this pose.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.entitymanager.v1.Pose, com.anduril.entitymanager.v1.Pose.Builder, com.anduril.entitymanager.v1.PoseOrBuilder> 
        getCenterRayPoseFieldBuilder() {
      if (centerRayPoseBuilder_ == null) {
        centerRayPoseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.anduril.entitymanager.v1.Pose, com.anduril.entitymanager.v1.Pose.Builder, com.anduril.entitymanager.v1.PoseOrBuilder>(
                getCenterRayPose(),
                getParentForChildren(),
                isClean());
        centerRayPose_ = null;
      }
      return centerRayPoseBuilder_;
    }

    private float horizontalFov_ ;
    /**
     * <pre>
     * Horizontal field of view in radians.
     * </pre>
     *
     * <code>float horizontal_fov = 6 [json_name = "horizontalFov"];</code>
     * @return The horizontalFov.
     */
    @java.lang.Override
    public float getHorizontalFov() {
      return horizontalFov_;
    }
    /**
     * <pre>
     * Horizontal field of view in radians.
     * </pre>
     *
     * <code>float horizontal_fov = 6 [json_name = "horizontalFov"];</code>
     * @param value The horizontalFov to set.
     * @return This builder for chaining.
     */
    public Builder setHorizontalFov(float value) {

      horizontalFov_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Horizontal field of view in radians.
     * </pre>
     *
     * <code>float horizontal_fov = 6 [json_name = "horizontalFov"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHorizontalFov() {
      bitField0_ = (bitField0_ & ~0x00000020);
      horizontalFov_ = 0F;
      onChanged();
      return this;
    }

    private float verticalFov_ ;
    /**
     * <pre>
     * Vertical field of view in radians.
     * </pre>
     *
     * <code>float vertical_fov = 7 [json_name = "verticalFov"];</code>
     * @return The verticalFov.
     */
    @java.lang.Override
    public float getVerticalFov() {
      return verticalFov_;
    }
    /**
     * <pre>
     * Vertical field of view in radians.
     * </pre>
     *
     * <code>float vertical_fov = 7 [json_name = "verticalFov"];</code>
     * @param value The verticalFov to set.
     * @return This builder for chaining.
     */
    public Builder setVerticalFov(float value) {

      verticalFov_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Vertical field of view in radians.
     * </pre>
     *
     * <code>float vertical_fov = 7 [json_name = "verticalFov"];</code>
     * @return This builder for chaining.
     */
    public Builder clearVerticalFov() {
      bitField0_ = (bitField0_ & ~0x00000040);
      verticalFov_ = 0F;
      onChanged();
      return this;
    }

    private com.google.protobuf.FloatValue range_;
    private com.google.protobuf.SingleFieldBuilder<
        com.google.protobuf.FloatValue, com.google.protobuf.FloatValue.Builder, com.google.protobuf.FloatValueOrBuilder> rangeBuilder_;
    /**
     * <pre>
     * Sensor range in meters.
     * </pre>
     *
     * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
     * @return Whether the range field is set.
     */
    public boolean hasRange() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Sensor range in meters.
     * </pre>
     *
     * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
     * @return The range.
     */
    public com.google.protobuf.FloatValue getRange() {
      if (rangeBuilder_ == null) {
        return range_ == null ? com.google.protobuf.FloatValue.getDefaultInstance() : range_;
      } else {
        return rangeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Sensor range in meters.
     * </pre>
     *
     * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
     */
    public Builder setRange(com.google.protobuf.FloatValue value) {
      if (rangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        range_ = value;
      } else {
        rangeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sensor range in meters.
     * </pre>
     *
     * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
     */
    public Builder setRange(
        com.google.protobuf.FloatValue.Builder builderForValue) {
      if (rangeBuilder_ == null) {
        range_ = builderForValue.build();
      } else {
        rangeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sensor range in meters.
     * </pre>
     *
     * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
     */
    public Builder mergeRange(com.google.protobuf.FloatValue value) {
      if (rangeBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0) &&
          range_ != null &&
          range_ != com.google.protobuf.FloatValue.getDefaultInstance()) {
          getRangeBuilder().mergeFrom(value);
        } else {
          range_ = value;
        }
      } else {
        rangeBuilder_.mergeFrom(value);
      }
      if (range_ != null) {
        bitField0_ |= 0x00000080;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Sensor range in meters.
     * </pre>
     *
     * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
     */
    public Builder clearRange() {
      bitField0_ = (bitField0_ & ~0x00000080);
      range_ = null;
      if (rangeBuilder_ != null) {
        rangeBuilder_.dispose();
        rangeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sensor range in meters.
     * </pre>
     *
     * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
     */
    public com.google.protobuf.FloatValue.Builder getRangeBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getRangeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Sensor range in meters.
     * </pre>
     *
     * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
     */
    public com.google.protobuf.FloatValueOrBuilder getRangeOrBuilder() {
      if (rangeBuilder_ != null) {
        return rangeBuilder_.getMessageOrBuilder();
      } else {
        return range_ == null ?
            com.google.protobuf.FloatValue.getDefaultInstance() : range_;
      }
    }
    /**
     * <pre>
     * Sensor range in meters.
     * </pre>
     *
     * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.protobuf.FloatValue, com.google.protobuf.FloatValue.Builder, com.google.protobuf.FloatValueOrBuilder> 
        getRangeFieldBuilder() {
      if (rangeBuilder_ == null) {
        rangeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.protobuf.FloatValue, com.google.protobuf.FloatValue.Builder, com.google.protobuf.FloatValueOrBuilder>(
                getRange(),
                getParentForChildren(),
                isClean());
        range_ = null;
      }
      return rangeBuilder_;
    }

    private int mode_ = 0;
    /**
     * <pre>
     * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
     * sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
     * tighter bounded tracking.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.SensorMode mode = 9 [json_name = "mode"];</code>
     * @return The enum numeric value on the wire for mode.
     */
    @java.lang.Override public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
     * sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
     * tighter bounded tracking.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.SensorMode mode = 9 [json_name = "mode"];</code>
     * @param value The enum numeric value on the wire for mode to set.
     * @return This builder for chaining.
     */
    public Builder setModeValue(int value) {
      mode_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
     * sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
     * tighter bounded tracking.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.SensorMode mode = 9 [json_name = "mode"];</code>
     * @return The mode.
     */
    @java.lang.Override
    public com.anduril.entitymanager.v1.SensorMode getMode() {
      com.anduril.entitymanager.v1.SensorMode result = com.anduril.entitymanager.v1.SensorMode.forNumber(mode_);
      return result == null ? com.anduril.entitymanager.v1.SensorMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
     * sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
     * tighter bounded tracking.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.SensorMode mode = 9 [json_name = "mode"];</code>
     * @param value The mode to set.
     * @return This builder for chaining.
     */
    public Builder setMode(com.anduril.entitymanager.v1.SensorMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000100;
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
     * sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
     * tighter bounded tracking.
     * </pre>
     *
     * <code>.anduril.entitymanager.v1.SensorMode mode = 9 [json_name = "mode"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMode() {
      bitField0_ = (bitField0_ & ~0x00000100);
      mode_ = 0;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:anduril.entitymanager.v1.FieldOfView)
  }

  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.FieldOfView)
  private static final com.anduril.entitymanager.v1.FieldOfView DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.anduril.entitymanager.v1.FieldOfView();
  }

  public static com.anduril.entitymanager.v1.FieldOfView getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FieldOfView>
      PARSER = new com.google.protobuf.AbstractParser<FieldOfView>() {
    @java.lang.Override
    public FieldOfView parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<FieldOfView> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FieldOfView> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.anduril.entitymanager.v1.FieldOfView getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

