// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/sensors.pub.proto
// Protobuf Java Version: 4.27.3

package com.anduril.entitymanager.v1;

public interface FieldOfViewOrBuilder extends
    // @@protoc_insertion_point(interface_extends:anduril.entitymanager.v1.FieldOfView)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The Id for one instance of a FieldOfView, persisted across multiple updates to provide continuity during
   * smoothing. This is relevant for sensors like an ESM or Radar where the dwell schedule is on the order of
   * milliseconds, making multiple FOVs a requirement for proper display of search and weapon support beams.
   * </pre>
   *
   * <code>int32 fov_id = 1 [json_name = "fovId"];</code>
   * @return The fovId.
   */
  int getFovId();

  /**
   * <pre>
   * The Id of the mount the sensor is on.
   * </pre>
   *
   * <code>string mount_id = 2 [json_name = "mountId"];</code>
   * @return The mountId.
   */
  java.lang.String getMountId();
  /**
   * <pre>
   * The Id of the mount the sensor is on.
   * </pre>
   *
   * <code>string mount_id = 2 [json_name = "mountId"];</code>
   * @return The bytes for mountId.
   */
  com.google.protobuf.ByteString
      getMountIdBytes();

  /**
   * <pre>
   * The field of view the sensor projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
   * @return Whether the projectedFrustum field is set.
   */
  boolean hasProjectedFrustum();
  /**
   * <pre>
   * The field of view the sensor projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
   * @return The projectedFrustum.
   */
  com.anduril.entitymanager.v1.ProjectedFrustum getProjectedFrustum();
  /**
   * <pre>
   * The field of view the sensor projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.ProjectedFrustum projected_frustum = 3 [json_name = "projectedFrustum"];</code>
   */
  com.anduril.entitymanager.v1.ProjectedFrustumOrBuilder getProjectedFrustumOrBuilder();

  /**
   * <pre>
   * Center ray of the frustum projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
   * @return Whether the projectedCenterRay field is set.
   */
  boolean hasProjectedCenterRay();
  /**
   * <pre>
   * Center ray of the frustum projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
   * @return The projectedCenterRay.
   */
  com.anduril.entitymanager.v1.Position getProjectedCenterRay();
  /**
   * <pre>
   * Center ray of the frustum projected onto the ground.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Position projected_center_ray = 4 [json_name = "projectedCenterRay"];</code>
   */
  com.anduril.entitymanager.v1.PositionOrBuilder getProjectedCenterRayOrBuilder();

  /**
   * <pre>
   * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
   * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
   * frame when transformed by the quaternion contained in this pose.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
   * @return Whether the centerRayPose field is set.
   */
  boolean hasCenterRayPose();
  /**
   * <pre>
   * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
   * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
   * frame when transformed by the quaternion contained in this pose.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
   * @return The centerRayPose.
   */
  com.anduril.entitymanager.v1.Pose getCenterRayPose();
  /**
   * <pre>
   * The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
   * the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
   * frame when transformed by the quaternion contained in this pose.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Pose center_ray_pose = 5 [json_name = "centerRayPose"];</code>
   */
  com.anduril.entitymanager.v1.PoseOrBuilder getCenterRayPoseOrBuilder();

  /**
   * <pre>
   * Horizontal field of view in radians.
   * </pre>
   *
   * <code>float horizontal_fov = 6 [json_name = "horizontalFov"];</code>
   * @return The horizontalFov.
   */
  float getHorizontalFov();

  /**
   * <pre>
   * Vertical field of view in radians.
   * </pre>
   *
   * <code>float vertical_fov = 7 [json_name = "verticalFov"];</code>
   * @return The verticalFov.
   */
  float getVerticalFov();

  /**
   * <pre>
   * Sensor range in meters.
   * </pre>
   *
   * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
   * @return Whether the range field is set.
   */
  boolean hasRange();
  /**
   * <pre>
   * Sensor range in meters.
   * </pre>
   *
   * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
   * @return The range.
   */
  com.google.protobuf.FloatValue getRange();
  /**
   * <pre>
   * Sensor range in meters.
   * </pre>
   *
   * <code>.google.protobuf.FloatValue range = 8 [json_name = "range"];</code>
   */
  com.google.protobuf.FloatValueOrBuilder getRangeOrBuilder();

  /**
   * <pre>
   * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
   * sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
   * tighter bounded tracking.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.SensorMode mode = 9 [json_name = "mode"];</code>
   * @return The enum numeric value on the wire for mode.
   */
  int getModeValue();
  /**
   * <pre>
   * The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
   * sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
   * tighter bounded tracking.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.SensorMode mode = 9 [json_name = "mode"];</code>
   * @return The mode.
   */
  com.anduril.entitymanager.v1.SensorMode getMode();
}
