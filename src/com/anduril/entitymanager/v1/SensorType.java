// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/sensors.pub.proto
// Protobuf Java Version: 4.27.3

package com.anduril.entitymanager.v1;

/**
 * Protobuf enum {@code anduril.entitymanager.v1.SensorType}
 */
public enum SensorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SENSOR_TYPE_INVALID = 0;</code>
   */
  SENSOR_TYPE_INVALID(0),
  /**
   * <code>SENSOR_TYPE_RADAR = 1;</code>
   */
  SENSOR_TYPE_RADAR(1),
  /**
   * <code>SENSOR_TYPE_CAMERA = 2;</code>
   */
  SENSOR_TYPE_CAMERA(2),
  /**
   * <code>SENSOR_TYPE_TRANSPONDER = 3;</code>
   */
  SENSOR_TYPE_TRANSPONDER(3),
  /**
   * <code>SENSOR_TYPE_RF = 4;</code>
   */
  SENSOR_TYPE_RF(4),
  /**
   * <code>SENSOR_TYPE_GPS = 5;</code>
   */
  SENSOR_TYPE_GPS(5),
  /**
   * <code>SENSOR_TYPE_PTU_POS = 6;</code>
   */
  SENSOR_TYPE_PTU_POS(6),
  /**
   * <code>SENSOR_TYPE_WISP = 7;</code>
   */
  SENSOR_TYPE_WISP(7),
  /**
   * <code>SENSOR_TYPE_PERIMETER = 8;</code>
   */
  SENSOR_TYPE_PERIMETER(8),
  /**
   * <code>SENSOR_TYPE_SONAR = 9;</code>
   */
  SENSOR_TYPE_SONAR(9),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 3,
      /* suffix= */ "",
      SensorType.class.getName());
  }
  /**
   * <code>SENSOR_TYPE_INVALID = 0;</code>
   */
  public static final int SENSOR_TYPE_INVALID_VALUE = 0;
  /**
   * <code>SENSOR_TYPE_RADAR = 1;</code>
   */
  public static final int SENSOR_TYPE_RADAR_VALUE = 1;
  /**
   * <code>SENSOR_TYPE_CAMERA = 2;</code>
   */
  public static final int SENSOR_TYPE_CAMERA_VALUE = 2;
  /**
   * <code>SENSOR_TYPE_TRANSPONDER = 3;</code>
   */
  public static final int SENSOR_TYPE_TRANSPONDER_VALUE = 3;
  /**
   * <code>SENSOR_TYPE_RF = 4;</code>
   */
  public static final int SENSOR_TYPE_RF_VALUE = 4;
  /**
   * <code>SENSOR_TYPE_GPS = 5;</code>
   */
  public static final int SENSOR_TYPE_GPS_VALUE = 5;
  /**
   * <code>SENSOR_TYPE_PTU_POS = 6;</code>
   */
  public static final int SENSOR_TYPE_PTU_POS_VALUE = 6;
  /**
   * <code>SENSOR_TYPE_WISP = 7;</code>
   */
  public static final int SENSOR_TYPE_WISP_VALUE = 7;
  /**
   * <code>SENSOR_TYPE_PERIMETER = 8;</code>
   */
  public static final int SENSOR_TYPE_PERIMETER_VALUE = 8;
  /**
   * <code>SENSOR_TYPE_SONAR = 9;</code>
   */
  public static final int SENSOR_TYPE_SONAR_VALUE = 9;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SensorType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SensorType forNumber(int value) {
    switch (value) {
      case 0: return SENSOR_TYPE_INVALID;
      case 1: return SENSOR_TYPE_RADAR;
      case 2: return SENSOR_TYPE_CAMERA;
      case 3: return SENSOR_TYPE_TRANSPONDER;
      case 4: return SENSOR_TYPE_RF;
      case 5: return SENSOR_TYPE_GPS;
      case 6: return SENSOR_TYPE_PTU_POS;
      case 7: return SENSOR_TYPE_WISP;
      case 8: return SENSOR_TYPE_PERIMETER;
      case 9: return SENSOR_TYPE_SONAR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SensorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SensorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SensorType>() {
          public SensorType findValueByNumber(int number) {
            return SensorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.anduril.entitymanager.v1.SensorsPubProto.getDescriptor().getEnumTypes().get(2);
  }

  private static final SensorType[] VALUES = values();

  public static SensorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SensorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:anduril.entitymanager.v1.SensorType)
}

