// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/signal.pub.proto

package com.anduril.entitymanager.v1;

/**
 * <pre>
 * Enumerates the possible scan types
 * </pre>
 *
 * Protobuf enum {@code anduril.entitymanager.v1.ScanType}
 */
public enum ScanType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SCAN_TYPE_INVALID = 0;</code>
   */
  SCAN_TYPE_INVALID(0),
  /**
   * <code>SCAN_TYPE_CIRCULAR = 1;</code>
   */
  SCAN_TYPE_CIRCULAR(1),
  /**
   * <code>SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR = 2;</code>
   */
  SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR(2),
  /**
   * <code>SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR = 3;</code>
   */
  SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR(3),
  /**
   * <code>SCAN_TYPE_NON_SCANNING = 4;</code>
   */
  SCAN_TYPE_NON_SCANNING(4),
  /**
   * <code>SCAN_TYPE_IRREGULAR = 5;</code>
   */
  SCAN_TYPE_IRREGULAR(5),
  /**
   * <code>SCAN_TYPE_CONICAL = 6;</code>
   */
  SCAN_TYPE_CONICAL(6),
  /**
   * <code>SCAN_TYPE_LOBE_SWITCHING = 7;</code>
   */
  SCAN_TYPE_LOBE_SWITCHING(7),
  /**
   * <code>SCAN_TYPE_RASTER = 8;</code>
   */
  SCAN_TYPE_RASTER(8),
  /**
   * <code>SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR = 9;</code>
   */
  SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR(9),
  /**
   * <code>SCAN_TYPE_CIRCULAR_CONICAL = 10;</code>
   */
  SCAN_TYPE_CIRCULAR_CONICAL(10),
  /**
   * <code>SCAN_TYPE_SECTOR_CONICAL = 11;</code>
   */
  SCAN_TYPE_SECTOR_CONICAL(11),
  /**
   * <code>SCAN_TYPE_AGILE_BEAM = 12;</code>
   */
  SCAN_TYPE_AGILE_BEAM(12),
  /**
   * <code>SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR = 13;</code>
   */
  SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR(13),
  /**
   * <code>SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR = 14;</code>
   */
  SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR(14),
  /**
   * <code>SCAN_TYPE_UNIDIRECTIONAL_SECTOR = 15;</code>
   */
  SCAN_TYPE_UNIDIRECTIONAL_SECTOR(15),
  /**
   * <code>SCAN_TYPE_BIDIRECTIONAL_SECTOR = 16;</code>
   */
  SCAN_TYPE_BIDIRECTIONAL_SECTOR(16),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SCAN_TYPE_INVALID = 0;</code>
   */
  public static final int SCAN_TYPE_INVALID_VALUE = 0;
  /**
   * <code>SCAN_TYPE_CIRCULAR = 1;</code>
   */
  public static final int SCAN_TYPE_CIRCULAR_VALUE = 1;
  /**
   * <code>SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR = 2;</code>
   */
  public static final int SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR_VALUE = 2;
  /**
   * <code>SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR = 3;</code>
   */
  public static final int SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR_VALUE = 3;
  /**
   * <code>SCAN_TYPE_NON_SCANNING = 4;</code>
   */
  public static final int SCAN_TYPE_NON_SCANNING_VALUE = 4;
  /**
   * <code>SCAN_TYPE_IRREGULAR = 5;</code>
   */
  public static final int SCAN_TYPE_IRREGULAR_VALUE = 5;
  /**
   * <code>SCAN_TYPE_CONICAL = 6;</code>
   */
  public static final int SCAN_TYPE_CONICAL_VALUE = 6;
  /**
   * <code>SCAN_TYPE_LOBE_SWITCHING = 7;</code>
   */
  public static final int SCAN_TYPE_LOBE_SWITCHING_VALUE = 7;
  /**
   * <code>SCAN_TYPE_RASTER = 8;</code>
   */
  public static final int SCAN_TYPE_RASTER_VALUE = 8;
  /**
   * <code>SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR = 9;</code>
   */
  public static final int SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR_VALUE = 9;
  /**
   * <code>SCAN_TYPE_CIRCULAR_CONICAL = 10;</code>
   */
  public static final int SCAN_TYPE_CIRCULAR_CONICAL_VALUE = 10;
  /**
   * <code>SCAN_TYPE_SECTOR_CONICAL = 11;</code>
   */
  public static final int SCAN_TYPE_SECTOR_CONICAL_VALUE = 11;
  /**
   * <code>SCAN_TYPE_AGILE_BEAM = 12;</code>
   */
  public static final int SCAN_TYPE_AGILE_BEAM_VALUE = 12;
  /**
   * <code>SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR = 13;</code>
   */
  public static final int SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR_VALUE = 13;
  /**
   * <code>SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR = 14;</code>
   */
  public static final int SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR_VALUE = 14;
  /**
   * <code>SCAN_TYPE_UNIDIRECTIONAL_SECTOR = 15;</code>
   */
  public static final int SCAN_TYPE_UNIDIRECTIONAL_SECTOR_VALUE = 15;
  /**
   * <code>SCAN_TYPE_BIDIRECTIONAL_SECTOR = 16;</code>
   */
  public static final int SCAN_TYPE_BIDIRECTIONAL_SECTOR_VALUE = 16;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ScanType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ScanType forNumber(int value) {
    switch (value) {
      case 0: return SCAN_TYPE_INVALID;
      case 1: return SCAN_TYPE_CIRCULAR;
      case 2: return SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR;
      case 3: return SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR;
      case 4: return SCAN_TYPE_NON_SCANNING;
      case 5: return SCAN_TYPE_IRREGULAR;
      case 6: return SCAN_TYPE_CONICAL;
      case 7: return SCAN_TYPE_LOBE_SWITCHING;
      case 8: return SCAN_TYPE_RASTER;
      case 9: return SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR;
      case 10: return SCAN_TYPE_CIRCULAR_CONICAL;
      case 11: return SCAN_TYPE_SECTOR_CONICAL;
      case 12: return SCAN_TYPE_AGILE_BEAM;
      case 13: return SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR;
      case 14: return SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR;
      case 15: return SCAN_TYPE_UNIDIRECTIONAL_SECTOR;
      case 16: return SCAN_TYPE_BIDIRECTIONAL_SECTOR;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ScanType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ScanType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ScanType>() {
          public ScanType findValueByNumber(int number) {
            return ScanType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.anduril.entitymanager.v1.SignalPubProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final ScanType[] VALUES = values();

  public static ScanType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ScanType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:anduril.entitymanager.v1.ScanType)
}

