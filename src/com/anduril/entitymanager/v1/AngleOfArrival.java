// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/entitymanager/v1/signal.pub.proto
// Protobuf Java Version: 4.27.3

package com.anduril.entitymanager.v1;

/**
 * <pre>
 * The direction from which the signal is received
 * </pre>
 *
 * Protobuf type {@code anduril.entitymanager.v1.AngleOfArrival}
 */
public final class AngleOfArrival extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:anduril.entitymanager.v1.AngleOfArrival)
    AngleOfArrivalOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 3,
      /* suffix= */ "",
      AngleOfArrival.class.getName());
  }
  // Use AngleOfArrival.newBuilder() to construct.
  private AngleOfArrival(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private AngleOfArrival() {
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.anduril.entitymanager.v1.SignalPubProto.internal_static_anduril_entitymanager_v1_AngleOfArrival_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.anduril.entitymanager.v1.SignalPubProto.internal_static_anduril_entitymanager_v1_AngleOfArrival_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.anduril.entitymanager.v1.AngleOfArrival.class, com.anduril.entitymanager.v1.AngleOfArrival.Builder.class);
  }

  private int bitField0_;
  public static final int RELATIVE_POSE_FIELD_NUMBER = 1;
  private com.anduril.type.Pose relativePose_;
  /**
   * <pre>
   * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
   * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
   * </pre>
   *
   * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
   * @return Whether the relativePose field is set.
   */
  @java.lang.Override
  public boolean hasRelativePose() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
   * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
   * </pre>
   *
   * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
   * @return The relativePose.
   */
  @java.lang.Override
  public com.anduril.type.Pose getRelativePose() {
    return relativePose_ == null ? com.anduril.type.Pose.getDefaultInstance() : relativePose_;
  }
  /**
   * <pre>
   * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
   * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
   * </pre>
   *
   * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
   */
  @java.lang.Override
  public com.anduril.type.PoseOrBuilder getRelativePoseOrBuilder() {
    return relativePose_ == null ? com.anduril.type.Pose.getDefaultInstance() : relativePose_;
  }

  public static final int BEARING_ELEVATION_COVARIANCE_RAD2_FIELD_NUMBER = 2;
  private com.anduril.type.TMat2 bearingElevationCovarianceRad2_;
  /**
   * <pre>
   * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
   * and elevation is positive down from the FL/XY plane.
   * mxx = bearing variance in rad^2
   * mxy = bearing/elevation covariance in rad^2
   * myy = elevation variance in rad^2
   * </pre>
   *
   * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
   * @return Whether the bearingElevationCovarianceRad2 field is set.
   */
  @java.lang.Override
  public boolean hasBearingElevationCovarianceRad2() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
   * and elevation is positive down from the FL/XY plane.
   * mxx = bearing variance in rad^2
   * mxy = bearing/elevation covariance in rad^2
   * myy = elevation variance in rad^2
   * </pre>
   *
   * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
   * @return The bearingElevationCovarianceRad2.
   */
  @java.lang.Override
  public com.anduril.type.TMat2 getBearingElevationCovarianceRad2() {
    return bearingElevationCovarianceRad2_ == null ? com.anduril.type.TMat2.getDefaultInstance() : bearingElevationCovarianceRad2_;
  }
  /**
   * <pre>
   * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
   * and elevation is positive down from the FL/XY plane.
   * mxx = bearing variance in rad^2
   * mxy = bearing/elevation covariance in rad^2
   * myy = elevation variance in rad^2
   * </pre>
   *
   * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
   */
  @java.lang.Override
  public com.anduril.type.TMat2OrBuilder getBearingElevationCovarianceRad2OrBuilder() {
    return bearingElevationCovarianceRad2_ == null ? com.anduril.type.TMat2.getDefaultInstance() : bearingElevationCovarianceRad2_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getRelativePose());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getBearingElevationCovarianceRad2());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getRelativePose());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getBearingElevationCovarianceRad2());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.anduril.entitymanager.v1.AngleOfArrival)) {
      return super.equals(obj);
    }
    com.anduril.entitymanager.v1.AngleOfArrival other = (com.anduril.entitymanager.v1.AngleOfArrival) obj;

    if (hasRelativePose() != other.hasRelativePose()) return false;
    if (hasRelativePose()) {
      if (!getRelativePose()
          .equals(other.getRelativePose())) return false;
    }
    if (hasBearingElevationCovarianceRad2() != other.hasBearingElevationCovarianceRad2()) return false;
    if (hasBearingElevationCovarianceRad2()) {
      if (!getBearingElevationCovarianceRad2()
          .equals(other.getBearingElevationCovarianceRad2())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRelativePose()) {
      hash = (37 * hash) + RELATIVE_POSE_FIELD_NUMBER;
      hash = (53 * hash) + getRelativePose().hashCode();
    }
    if (hasBearingElevationCovarianceRad2()) {
      hash = (37 * hash) + BEARING_ELEVATION_COVARIANCE_RAD2_FIELD_NUMBER;
      hash = (53 * hash) + getBearingElevationCovarianceRad2().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.anduril.entitymanager.v1.AngleOfArrival parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.anduril.entitymanager.v1.AngleOfArrival parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.anduril.entitymanager.v1.AngleOfArrival parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.anduril.entitymanager.v1.AngleOfArrival prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The direction from which the signal is received
   * </pre>
   *
   * Protobuf type {@code anduril.entitymanager.v1.AngleOfArrival}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:anduril.entitymanager.v1.AngleOfArrival)
      com.anduril.entitymanager.v1.AngleOfArrivalOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.anduril.entitymanager.v1.SignalPubProto.internal_static_anduril_entitymanager_v1_AngleOfArrival_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.anduril.entitymanager.v1.SignalPubProto.internal_static_anduril_entitymanager_v1_AngleOfArrival_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.anduril.entitymanager.v1.AngleOfArrival.class, com.anduril.entitymanager.v1.AngleOfArrival.Builder.class);
    }

    // Construct using com.anduril.entitymanager.v1.AngleOfArrival.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getRelativePoseFieldBuilder();
        getBearingElevationCovarianceRad2FieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      relativePose_ = null;
      if (relativePoseBuilder_ != null) {
        relativePoseBuilder_.dispose();
        relativePoseBuilder_ = null;
      }
      bearingElevationCovarianceRad2_ = null;
      if (bearingElevationCovarianceRad2Builder_ != null) {
        bearingElevationCovarianceRad2Builder_.dispose();
        bearingElevationCovarianceRad2Builder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.anduril.entitymanager.v1.SignalPubProto.internal_static_anduril_entitymanager_v1_AngleOfArrival_descriptor;
    }

    @java.lang.Override
    public com.anduril.entitymanager.v1.AngleOfArrival getDefaultInstanceForType() {
      return com.anduril.entitymanager.v1.AngleOfArrival.getDefaultInstance();
    }

    @java.lang.Override
    public com.anduril.entitymanager.v1.AngleOfArrival build() {
      com.anduril.entitymanager.v1.AngleOfArrival result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.anduril.entitymanager.v1.AngleOfArrival buildPartial() {
      com.anduril.entitymanager.v1.AngleOfArrival result = new com.anduril.entitymanager.v1.AngleOfArrival(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.anduril.entitymanager.v1.AngleOfArrival result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.relativePose_ = relativePoseBuilder_ == null
            ? relativePose_
            : relativePoseBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.bearingElevationCovarianceRad2_ = bearingElevationCovarianceRad2Builder_ == null
            ? bearingElevationCovarianceRad2_
            : bearingElevationCovarianceRad2Builder_.build();
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.anduril.entitymanager.v1.AngleOfArrival) {
        return mergeFrom((com.anduril.entitymanager.v1.AngleOfArrival)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.anduril.entitymanager.v1.AngleOfArrival other) {
      if (other == com.anduril.entitymanager.v1.AngleOfArrival.getDefaultInstance()) return this;
      if (other.hasRelativePose()) {
        mergeRelativePose(other.getRelativePose());
      }
      if (other.hasBearingElevationCovarianceRad2()) {
        mergeBearingElevationCovarianceRad2(other.getBearingElevationCovarianceRad2());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getRelativePoseFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getBearingElevationCovarianceRad2FieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.anduril.type.Pose relativePose_;
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.type.Pose, com.anduril.type.Pose.Builder, com.anduril.type.PoseOrBuilder> relativePoseBuilder_;
    /**
     * <pre>
     * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     * </pre>
     *
     * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
     * @return Whether the relativePose field is set.
     */
    public boolean hasRelativePose() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     * </pre>
     *
     * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
     * @return The relativePose.
     */
    public com.anduril.type.Pose getRelativePose() {
      if (relativePoseBuilder_ == null) {
        return relativePose_ == null ? com.anduril.type.Pose.getDefaultInstance() : relativePose_;
      } else {
        return relativePoseBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     * </pre>
     *
     * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
     */
    public Builder setRelativePose(com.anduril.type.Pose value) {
      if (relativePoseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        relativePose_ = value;
      } else {
        relativePoseBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     * </pre>
     *
     * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
     */
    public Builder setRelativePose(
        com.anduril.type.Pose.Builder builderForValue) {
      if (relativePoseBuilder_ == null) {
        relativePose_ = builderForValue.build();
      } else {
        relativePoseBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     * </pre>
     *
     * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
     */
    public Builder mergeRelativePose(com.anduril.type.Pose value) {
      if (relativePoseBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          relativePose_ != null &&
          relativePose_ != com.anduril.type.Pose.getDefaultInstance()) {
          getRelativePoseBuilder().mergeFrom(value);
        } else {
          relativePose_ = value;
        }
      } else {
        relativePoseBuilder_.mergeFrom(value);
      }
      if (relativePose_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     * </pre>
     *
     * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
     */
    public Builder clearRelativePose() {
      bitField0_ = (bitField0_ & ~0x00000001);
      relativePose_ = null;
      if (relativePoseBuilder_ != null) {
        relativePoseBuilder_.dispose();
        relativePoseBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     * </pre>
     *
     * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
     */
    public com.anduril.type.Pose.Builder getRelativePoseBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getRelativePoseFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     * </pre>
     *
     * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
     */
    public com.anduril.type.PoseOrBuilder getRelativePoseOrBuilder() {
      if (relativePoseBuilder_ != null) {
        return relativePoseBuilder_.getMessageOrBuilder();
      } else {
        return relativePose_ == null ?
            com.anduril.type.Pose.getDefaultInstance() : relativePose_;
      }
    }
    /**
     * <pre>
     * Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     * </pre>
     *
     * <code>.anduril.type.Pose relative_pose = 1 [json_name = "relativePose"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.type.Pose, com.anduril.type.Pose.Builder, com.anduril.type.PoseOrBuilder> 
        getRelativePoseFieldBuilder() {
      if (relativePoseBuilder_ == null) {
        relativePoseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.anduril.type.Pose, com.anduril.type.Pose.Builder, com.anduril.type.PoseOrBuilder>(
                getRelativePose(),
                getParentForChildren(),
                isClean());
        relativePose_ = null;
      }
      return relativePoseBuilder_;
    }

    private com.anduril.type.TMat2 bearingElevationCovarianceRad2_;
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.type.TMat2, com.anduril.type.TMat2.Builder, com.anduril.type.TMat2OrBuilder> bearingElevationCovarianceRad2Builder_;
    /**
     * <pre>
     * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     * </pre>
     *
     * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
     * @return Whether the bearingElevationCovarianceRad2 field is set.
     */
    public boolean hasBearingElevationCovarianceRad2() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     * </pre>
     *
     * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
     * @return The bearingElevationCovarianceRad2.
     */
    public com.anduril.type.TMat2 getBearingElevationCovarianceRad2() {
      if (bearingElevationCovarianceRad2Builder_ == null) {
        return bearingElevationCovarianceRad2_ == null ? com.anduril.type.TMat2.getDefaultInstance() : bearingElevationCovarianceRad2_;
      } else {
        return bearingElevationCovarianceRad2Builder_.getMessage();
      }
    }
    /**
     * <pre>
     * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     * </pre>
     *
     * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
     */
    public Builder setBearingElevationCovarianceRad2(com.anduril.type.TMat2 value) {
      if (bearingElevationCovarianceRad2Builder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        bearingElevationCovarianceRad2_ = value;
      } else {
        bearingElevationCovarianceRad2Builder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     * </pre>
     *
     * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
     */
    public Builder setBearingElevationCovarianceRad2(
        com.anduril.type.TMat2.Builder builderForValue) {
      if (bearingElevationCovarianceRad2Builder_ == null) {
        bearingElevationCovarianceRad2_ = builderForValue.build();
      } else {
        bearingElevationCovarianceRad2Builder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     * </pre>
     *
     * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
     */
    public Builder mergeBearingElevationCovarianceRad2(com.anduril.type.TMat2 value) {
      if (bearingElevationCovarianceRad2Builder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          bearingElevationCovarianceRad2_ != null &&
          bearingElevationCovarianceRad2_ != com.anduril.type.TMat2.getDefaultInstance()) {
          getBearingElevationCovarianceRad2Builder().mergeFrom(value);
        } else {
          bearingElevationCovarianceRad2_ = value;
        }
      } else {
        bearingElevationCovarianceRad2Builder_.mergeFrom(value);
      }
      if (bearingElevationCovarianceRad2_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     * </pre>
     *
     * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
     */
    public Builder clearBearingElevationCovarianceRad2() {
      bitField0_ = (bitField0_ & ~0x00000002);
      bearingElevationCovarianceRad2_ = null;
      if (bearingElevationCovarianceRad2Builder_ != null) {
        bearingElevationCovarianceRad2Builder_.dispose();
        bearingElevationCovarianceRad2Builder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     * </pre>
     *
     * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
     */
    public com.anduril.type.TMat2.Builder getBearingElevationCovarianceRad2Builder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getBearingElevationCovarianceRad2FieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     * </pre>
     *
     * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
     */
    public com.anduril.type.TMat2OrBuilder getBearingElevationCovarianceRad2OrBuilder() {
      if (bearingElevationCovarianceRad2Builder_ != null) {
        return bearingElevationCovarianceRad2Builder_.getMessageOrBuilder();
      } else {
        return bearingElevationCovarianceRad2_ == null ?
            com.anduril.type.TMat2.getDefaultInstance() : bearingElevationCovarianceRad2_;
      }
    }
    /**
     * <pre>
     * Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     * </pre>
     *
     * <code>.anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2 [json_name = "bearingElevationCovarianceRad2"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.anduril.type.TMat2, com.anduril.type.TMat2.Builder, com.anduril.type.TMat2OrBuilder> 
        getBearingElevationCovarianceRad2FieldBuilder() {
      if (bearingElevationCovarianceRad2Builder_ == null) {
        bearingElevationCovarianceRad2Builder_ = new com.google.protobuf.SingleFieldBuilder<
            com.anduril.type.TMat2, com.anduril.type.TMat2.Builder, com.anduril.type.TMat2OrBuilder>(
                getBearingElevationCovarianceRad2(),
                getParentForChildren(),
                isClean());
        bearingElevationCovarianceRad2_ = null;
      }
      return bearingElevationCovarianceRad2Builder_;
    }

    // @@protoc_insertion_point(builder_scope:anduril.entitymanager.v1.AngleOfArrival)
  }

  // @@protoc_insertion_point(class_scope:anduril.entitymanager.v1.AngleOfArrival)
  private static final com.anduril.entitymanager.v1.AngleOfArrival DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.anduril.entitymanager.v1.AngleOfArrival();
  }

  public static com.anduril.entitymanager.v1.AngleOfArrival getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AngleOfArrival>
      PARSER = new com.google.protobuf.AbstractParser<AngleOfArrival>() {
    @java.lang.Override
    public AngleOfArrival parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AngleOfArrival> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AngleOfArrival> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.anduril.entitymanager.v1.AngleOfArrival getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

