// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/entity.pub.proto

package com.anduril.entitymanager.v1;

public interface DecorrelationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:anduril.entitymanager.v1.Decorrelation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * This will be specified if this entity was decorrelated against all other entities.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.DecorrelatedAll all = 1 [json_name = "all"];</code>
   * @return Whether the all field is set.
   */
  boolean hasAll();
  /**
   * <pre>
   * This will be specified if this entity was decorrelated against all other entities.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.DecorrelatedAll all = 1 [json_name = "all"];</code>
   * @return The all.
   */
  com.anduril.entitymanager.v1.DecorrelatedAll getAll();
  /**
   * <pre>
   * This will be specified if this entity was decorrelated against all other entities.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.DecorrelatedAll all = 1 [json_name = "all"];</code>
   */
  com.anduril.entitymanager.v1.DecorrelatedAllOrBuilder getAllOrBuilder();

  /**
   * <pre>
   * A list of decorrelated entities that have been explicitly decorrelated against this entity
   * which prevents lower precedence correlations from overriding it in the future.
   * For example, if an operator in the UI decorrelated tracks A and B, any automated
   * correlators would be unable to correlate them since manual decorrelations have
   * higher precedence than automatic ones. Precedence is determined by both correlation
   * type and replication mode.
   * </pre>
   *
   * <code>repeated .anduril.entitymanager.v1.DecorrelatedSingle decorrelated_entities = 2 [json_name = "decorrelatedEntities"];</code>
   */
  java.util.List<com.anduril.entitymanager.v1.DecorrelatedSingle> 
      getDecorrelatedEntitiesList();
  /**
   * <pre>
   * A list of decorrelated entities that have been explicitly decorrelated against this entity
   * which prevents lower precedence correlations from overriding it in the future.
   * For example, if an operator in the UI decorrelated tracks A and B, any automated
   * correlators would be unable to correlate them since manual decorrelations have
   * higher precedence than automatic ones. Precedence is determined by both correlation
   * type and replication mode.
   * </pre>
   *
   * <code>repeated .anduril.entitymanager.v1.DecorrelatedSingle decorrelated_entities = 2 [json_name = "decorrelatedEntities"];</code>
   */
  com.anduril.entitymanager.v1.DecorrelatedSingle getDecorrelatedEntities(int index);
  /**
   * <pre>
   * A list of decorrelated entities that have been explicitly decorrelated against this entity
   * which prevents lower precedence correlations from overriding it in the future.
   * For example, if an operator in the UI decorrelated tracks A and B, any automated
   * correlators would be unable to correlate them since manual decorrelations have
   * higher precedence than automatic ones. Precedence is determined by both correlation
   * type and replication mode.
   * </pre>
   *
   * <code>repeated .anduril.entitymanager.v1.DecorrelatedSingle decorrelated_entities = 2 [json_name = "decorrelatedEntities"];</code>
   */
  int getDecorrelatedEntitiesCount();
  /**
   * <pre>
   * A list of decorrelated entities that have been explicitly decorrelated against this entity
   * which prevents lower precedence correlations from overriding it in the future.
   * For example, if an operator in the UI decorrelated tracks A and B, any automated
   * correlators would be unable to correlate them since manual decorrelations have
   * higher precedence than automatic ones. Precedence is determined by both correlation
   * type and replication mode.
   * </pre>
   *
   * <code>repeated .anduril.entitymanager.v1.DecorrelatedSingle decorrelated_entities = 2 [json_name = "decorrelatedEntities"];</code>
   */
  java.util.List<? extends com.anduril.entitymanager.v1.DecorrelatedSingleOrBuilder> 
      getDecorrelatedEntitiesOrBuilderList();
  /**
   * <pre>
   * A list of decorrelated entities that have been explicitly decorrelated against this entity
   * which prevents lower precedence correlations from overriding it in the future.
   * For example, if an operator in the UI decorrelated tracks A and B, any automated
   * correlators would be unable to correlate them since manual decorrelations have
   * higher precedence than automatic ones. Precedence is determined by both correlation
   * type and replication mode.
   * </pre>
   *
   * <code>repeated .anduril.entitymanager.v1.DecorrelatedSingle decorrelated_entities = 2 [json_name = "decorrelatedEntities"];</code>
   */
  com.anduril.entitymanager.v1.DecorrelatedSingleOrBuilder getDecorrelatedEntitiesOrBuilder(
      int index);
}
