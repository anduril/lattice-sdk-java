// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/entity.pub.proto

package com.anduril.entitymanager.v1;

public interface CorrelationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:anduril.entitymanager.v1.Correlation)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * This entity is the primary of a correlation meaning that it serves as the representative
   * entity of the correlation set.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.PrimaryCorrelation primary = 1 [json_name = "primary"];</code>
   * @return Whether the primary field is set.
   */
  boolean hasPrimary();
  /**
   * <pre>
   * This entity is the primary of a correlation meaning that it serves as the representative
   * entity of the correlation set.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.PrimaryCorrelation primary = 1 [json_name = "primary"];</code>
   * @return The primary.
   */
  com.anduril.entitymanager.v1.PrimaryCorrelation getPrimary();
  /**
   * <pre>
   * This entity is the primary of a correlation meaning that it serves as the representative
   * entity of the correlation set.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.PrimaryCorrelation primary = 1 [json_name = "primary"];</code>
   */
  com.anduril.entitymanager.v1.PrimaryCorrelationOrBuilder getPrimaryOrBuilder();

  /**
   * <pre>
   * This entity is a secondary of a correlation meaning that it will be represented by the
   * primary of the correlation set.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.SecondaryCorrelation secondary = 2 [json_name = "secondary"];</code>
   * @return Whether the secondary field is set.
   */
  boolean hasSecondary();
  /**
   * <pre>
   * This entity is a secondary of a correlation meaning that it will be represented by the
   * primary of the correlation set.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.SecondaryCorrelation secondary = 2 [json_name = "secondary"];</code>
   * @return The secondary.
   */
  com.anduril.entitymanager.v1.SecondaryCorrelation getSecondary();
  /**
   * <pre>
   * This entity is a secondary of a correlation meaning that it will be represented by the
   * primary of the correlation set.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.SecondaryCorrelation secondary = 2 [json_name = "secondary"];</code>
   */
  com.anduril.entitymanager.v1.SecondaryCorrelationOrBuilder getSecondaryOrBuilder();

  /**
   * <pre>
   * If present, this entity was explicitly decorrelated from one or more entities.
   * An entity can be both correlated and decorrelated as long as they are disjoint sets.
   * An example would be if a user in the UI decides that two tracks are not actually the
   * same despite an automatic correlator having correlated them. The user would then
   * decorrelate the two tracks and this decorrelation would be preserved preventing the
   * correlator from re-correlating them at a later time.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Decorrelation decorrelation = 3 [json_name = "decorrelation"];</code>
   * @return Whether the decorrelation field is set.
   */
  boolean hasDecorrelation();
  /**
   * <pre>
   * If present, this entity was explicitly decorrelated from one or more entities.
   * An entity can be both correlated and decorrelated as long as they are disjoint sets.
   * An example would be if a user in the UI decides that two tracks are not actually the
   * same despite an automatic correlator having correlated them. The user would then
   * decorrelate the two tracks and this decorrelation would be preserved preventing the
   * correlator from re-correlating them at a later time.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Decorrelation decorrelation = 3 [json_name = "decorrelation"];</code>
   * @return The decorrelation.
   */
  com.anduril.entitymanager.v1.Decorrelation getDecorrelation();
  /**
   * <pre>
   * If present, this entity was explicitly decorrelated from one or more entities.
   * An entity can be both correlated and decorrelated as long as they are disjoint sets.
   * An example would be if a user in the UI decides that two tracks are not actually the
   * same despite an automatic correlator having correlated them. The user would then
   * decorrelate the two tracks and this decorrelation would be preserved preventing the
   * correlator from re-correlating them at a later time.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Decorrelation decorrelation = 3 [json_name = "decorrelation"];</code>
   */
  com.anduril.entitymanager.v1.DecorrelationOrBuilder getDecorrelationOrBuilder();

  com.anduril.entitymanager.v1.Correlation.CorrelationCase getCorrelationCase();
}
