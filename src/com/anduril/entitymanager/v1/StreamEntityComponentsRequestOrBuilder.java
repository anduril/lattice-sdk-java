// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/entity_manager_grpcapi.pub.proto

package com.anduril.entitymanager.v1;

public interface StreamEntityComponentsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:anduril.entitymanager.v1.StreamEntityComponentsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * lower_snake_cased component names to include in response events, e.g. location. Only included components will
   * populate.
   * </pre>
   *
   * <code>repeated string components_to_include = 1 [json_name = "componentsToInclude"];</code>
   * @return A list containing the componentsToInclude.
   */
  java.util.List<java.lang.String>
      getComponentsToIncludeList();
  /**
   * <pre>
   * lower_snake_cased component names to include in response events, e.g. location. Only included components will
   * populate.
   * </pre>
   *
   * <code>repeated string components_to_include = 1 [json_name = "componentsToInclude"];</code>
   * @return The count of componentsToInclude.
   */
  int getComponentsToIncludeCount();
  /**
   * <pre>
   * lower_snake_cased component names to include in response events, e.g. location. Only included components will
   * populate.
   * </pre>
   *
   * <code>repeated string components_to_include = 1 [json_name = "componentsToInclude"];</code>
   * @param index The index of the element to return.
   * @return The componentsToInclude at the given index.
   */
  java.lang.String getComponentsToInclude(int index);
  /**
   * <pre>
   * lower_snake_cased component names to include in response events, e.g. location. Only included components will
   * populate.
   * </pre>
   *
   * <code>repeated string components_to_include = 1 [json_name = "componentsToInclude"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the componentsToInclude at the given index.
   */
  com.google.protobuf.ByteString
      getComponentsToIncludeBytes(int index);

  /**
   * <pre>
   * subscribe to all components. This should only be used in cases where you want all components.
   * Setting both components_to_include and include_all_components is invalid and will be rejected.
   * </pre>
   *
   * <code>bool include_all_components = 2 [json_name = "includeAllComponents"];</code>
   * @return The includeAllComponents.
   */
  boolean getIncludeAllComponents();

  /**
   * <pre>
   * The root node of a statement filter "tree".
   * If provided, only entities matching the filter criteria will be streamed. The filter is applied dynamically so if a
   * new entity matches, it will be included, and if an entity updates to no longer match, it will be excluded.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Statement filter = 3 [json_name = "filter"];</code>
   * @return Whether the filter field is set.
   */
  boolean hasFilter();
  /**
   * <pre>
   * The root node of a statement filter "tree".
   * If provided, only entities matching the filter criteria will be streamed. The filter is applied dynamically so if a
   * new entity matches, it will be included, and if an entity updates to no longer match, it will be excluded.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Statement filter = 3 [json_name = "filter"];</code>
   * @return The filter.
   */
  com.anduril.entitymanager.v1.Statement getFilter();
  /**
   * <pre>
   * The root node of a statement filter "tree".
   * If provided, only entities matching the filter criteria will be streamed. The filter is applied dynamically so if a
   * new entity matches, it will be included, and if an entity updates to no longer match, it will be excluded.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Statement filter = 3 [json_name = "filter"];</code>
   */
  com.anduril.entitymanager.v1.StatementOrBuilder getFilterOrBuilder();

  /**
   * <pre>
   * optional rate-limiting / down-sampling parameters, see RateLimit message for details.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.RateLimit rate_limit = 4 [json_name = "rateLimit"];</code>
   * @return Whether the rateLimit field is set.
   */
  boolean hasRateLimit();
  /**
   * <pre>
   * optional rate-limiting / down-sampling parameters, see RateLimit message for details.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.RateLimit rate_limit = 4 [json_name = "rateLimit"];</code>
   * @return The rateLimit.
   */
  com.anduril.entitymanager.v1.RateLimit getRateLimit();
  /**
   * <pre>
   * optional rate-limiting / down-sampling parameters, see RateLimit message for details.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.RateLimit rate_limit = 4 [json_name = "rateLimit"];</code>
   */
  com.anduril.entitymanager.v1.RateLimitOrBuilder getRateLimitOrBuilder();

  /**
   * <pre>
   * The period (in milliseconds) at which a Heartbeat message will be sent on the
   * message stream. If this field is set to 0 then no Heartbeat messages are sent.
   * </pre>
   *
   * <code>uint32 heartbeat_period_millis = 5 [json_name = "heartbeatPeriodMillis"];</code>
   * @return The heartbeatPeriodMillis.
   */
  int getHeartbeatPeriodMillis();

  /**
   * <pre>
   * subscribe to a finite stream of preexisting events which closes when there are no additional pre-existing events to
   * process. Respects the filter specified on the StreamEntityComponentsRequest.
   * </pre>
   *
   * <code>bool preexisting_only = 6 [json_name = "preexistingOnly"];</code>
   * @return The preexistingOnly.
   */
  boolean getPreexistingOnly();
}
