// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/location.pub.proto

// Protobuf Java Version: 3.25.3
package com.anduril.entitymanager.v1;

public interface PoseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:anduril.entitymanager.v1.Pose)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Geospatial location defined by this Pose.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Position pos = 1 [json_name = "pos"];</code>
   * @return Whether the pos field is set.
   */
  boolean hasPos();
  /**
   * <pre>
   * Geospatial location defined by this Pose.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Position pos = 1 [json_name = "pos"];</code>
   * @return The pos.
   */
  com.anduril.entitymanager.v1.Position getPos();
  /**
   * <pre>
   * Geospatial location defined by this Pose.
   * </pre>
   *
   * <code>.anduril.entitymanager.v1.Position pos = 1 [json_name = "pos"];</code>
   */
  com.anduril.entitymanager.v1.PositionOrBuilder getPosOrBuilder();

  /**
   * <pre>
   * The quaternion to transform a point in the Pose frame to the ENU frame. The Pose frame could be Body, Turret,
   * etc and is determined by the context in which this Pose is used.
   * The normal convention for defining orientation is to list the frames of transformation, for example
   * att_gimbal_to_enu is the quaternion which transforms a point in the gimbal frame to the body frame, but
   * in this case we truncate to att_enu because the Pose frame isn't defined. A potentially better name for this
   * field would have been att_pose_to_enu.
   *
   * Implementations of this quaternion should left multiply this quaternion to transform a point from the Pose frame
   * to the enu frame.
   * </pre>
   *
   * <code>.anduril.type.Quaternion orientation = 2 [json_name = "orientation"];</code>
   * @return Whether the orientation field is set.
   */
  boolean hasOrientation();
  /**
   * <pre>
   * The quaternion to transform a point in the Pose frame to the ENU frame. The Pose frame could be Body, Turret,
   * etc and is determined by the context in which this Pose is used.
   * The normal convention for defining orientation is to list the frames of transformation, for example
   * att_gimbal_to_enu is the quaternion which transforms a point in the gimbal frame to the body frame, but
   * in this case we truncate to att_enu because the Pose frame isn't defined. A potentially better name for this
   * field would have been att_pose_to_enu.
   *
   * Implementations of this quaternion should left multiply this quaternion to transform a point from the Pose frame
   * to the enu frame.
   * </pre>
   *
   * <code>.anduril.type.Quaternion orientation = 2 [json_name = "orientation"];</code>
   * @return The orientation.
   */
  com.anduril.type.Quaternion getOrientation();
  /**
   * <pre>
   * The quaternion to transform a point in the Pose frame to the ENU frame. The Pose frame could be Body, Turret,
   * etc and is determined by the context in which this Pose is used.
   * The normal convention for defining orientation is to list the frames of transformation, for example
   * att_gimbal_to_enu is the quaternion which transforms a point in the gimbal frame to the body frame, but
   * in this case we truncate to att_enu because the Pose frame isn't defined. A potentially better name for this
   * field would have been att_pose_to_enu.
   *
   * Implementations of this quaternion should left multiply this quaternion to transform a point from the Pose frame
   * to the enu frame.
   * </pre>
   *
   * <code>.anduril.type.Quaternion orientation = 2 [json_name = "orientation"];</code>
   */
  com.anduril.type.QuaternionOrBuilder getOrientationOrBuilder();
}
