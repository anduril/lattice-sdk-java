// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/signal.pub.proto

package com.anduril.entitymanager.v1;

public interface EncodingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:anduril.entitymanager.v1.Encoding)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * rate at which the spreading code is changing
   * a chip is a pulse of a spread spectrum code. Each data bit is spread across multiple chips (smaller time slots) using a spreading code
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue chip_hop_rate_num_sec = 1 [json_name = "chipHopRateNumSec"];</code>
   * @return Whether the chipHopRateNumSec field is set.
   */
  boolean hasChipHopRateNumSec();
  /**
   * <pre>
   * rate at which the spreading code is changing
   * a chip is a pulse of a spread spectrum code. Each data bit is spread across multiple chips (smaller time slots) using a spreading code
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue chip_hop_rate_num_sec = 1 [json_name = "chipHopRateNumSec"];</code>
   * @return The chipHopRateNumSec.
   */
  com.google.protobuf.DoubleValue getChipHopRateNumSec();
  /**
   * <pre>
   * rate at which the spreading code is changing
   * a chip is a pulse of a spread spectrum code. Each data bit is spread across multiple chips (smaller time slots) using a spreading code
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue chip_hop_rate_num_sec = 1 [json_name = "chipHopRateNumSec"];</code>
   */
  com.google.protobuf.DoubleValueOrBuilder getChipHopRateNumSecOrBuilder();

  /**
   * <pre>
   * time a transmitter remains at a particular frequency before hopping to the next on
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue hop_dwell_time_sec = 2 [json_name = "hopDwellTimeSec"];</code>
   * @return Whether the hopDwellTimeSec field is set.
   */
  boolean hasHopDwellTimeSec();
  /**
   * <pre>
   * time a transmitter remains at a particular frequency before hopping to the next on
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue hop_dwell_time_sec = 2 [json_name = "hopDwellTimeSec"];</code>
   * @return The hopDwellTimeSec.
   */
  com.google.protobuf.DoubleValue getHopDwellTimeSec();
  /**
   * <pre>
   * time a transmitter remains at a particular frequency before hopping to the next on
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue hop_dwell_time_sec = 2 [json_name = "hopDwellTimeSec"];</code>
   */
  com.google.protobuf.DoubleValueOrBuilder getHopDwellTimeSecOrBuilder();

  /**
   * <pre>
   * symbols per sec. A symbol is distinct from a bit where one symbol could be composed of multiple bits
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue baud_rate_num_sec = 3 [json_name = "baudRateNumSec"];</code>
   * @return Whether the baudRateNumSec field is set.
   */
  boolean hasBaudRateNumSec();
  /**
   * <pre>
   * symbols per sec. A symbol is distinct from a bit where one symbol could be composed of multiple bits
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue baud_rate_num_sec = 3 [json_name = "baudRateNumSec"];</code>
   * @return The baudRateNumSec.
   */
  com.google.protobuf.DoubleValue getBaudRateNumSec();
  /**
   * <pre>
   * symbols per sec. A symbol is distinct from a bit where one symbol could be composed of multiple bits
   * </pre>
   *
   * <code>.google.protobuf.DoubleValue baud_rate_num_sec = 3 [json_name = "baudRateNumSec"];</code>
   */
  com.google.protobuf.DoubleValueOrBuilder getBaudRateNumSecOrBuilder();
}
