// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/entitymanager/v1/types.pub.proto

package com.anduril.entitymanager.v1;

/**
 * <pre>
 * Set of possible templates used when creating an entity.
 * This impacts minimum required component sets and can be used by edge systems that need to distinguish.
 * </pre>
 *
 * Protobuf enum {@code anduril.entitymanager.v1.Template}
 */
public enum Template
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>TEMPLATE_INVALID = 0;</code>
   */
  TEMPLATE_INVALID(0),
  /**
   * <pre>
   * Refers to any detected object.
   * Requires setting the location, and mil_view components.
   * </pre>
   *
   * <code>TEMPLATE_TRACK = 1;</code>
   */
  TEMPLATE_TRACK(1),
  /**
   * <pre>
   * Refers to any sensors detected at a specific location.
   * Requires setting location, and mil_view.
   * </pre>
   *
   * <code>TEMPLATE_SENSOR_POINT_OF_INTEREST = 2;</code>
   */
  TEMPLATE_SENSOR_POINT_OF_INTEREST(2),
  /**
   * <pre>
   * Refers to a taskable entity under the control of friendly forces.
   * Requires setting location, and mil_view, and ontology.
   * </pre>
   *
   * <code>TEMPLATE_ASSET = 3;</code>
   */
  TEMPLATE_ASSET(3),
  /**
   * <pre>
   * Refers to shapes or points of interest drawn on the map.
   * Requires setting geo_shape and geo_details.
   * </pre>
   *
   * <code>TEMPLATE_GEO = 4;</code>
   */
  TEMPLATE_GEO(4),
  /**
   * <pre>
   * Refers to signal detection with characteristics such as emitter notation, frequency, or lines of bearing.
   * Requires setting signal, and mil_view, and ontology. Requies setting location, if the signal.fixed component is populated.
   * </pre>
   *
   * <code>TEMPLATE_SIGNAL_OF_INTEREST = 5;</code>
   */
  TEMPLATE_SIGNAL_OF_INTEREST(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>TEMPLATE_INVALID = 0;</code>
   */
  public static final int TEMPLATE_INVALID_VALUE = 0;
  /**
   * <pre>
   * Refers to any detected object.
   * Requires setting the location, and mil_view components.
   * </pre>
   *
   * <code>TEMPLATE_TRACK = 1;</code>
   */
  public static final int TEMPLATE_TRACK_VALUE = 1;
  /**
   * <pre>
   * Refers to any sensors detected at a specific location.
   * Requires setting location, and mil_view.
   * </pre>
   *
   * <code>TEMPLATE_SENSOR_POINT_OF_INTEREST = 2;</code>
   */
  public static final int TEMPLATE_SENSOR_POINT_OF_INTEREST_VALUE = 2;
  /**
   * <pre>
   * Refers to a taskable entity under the control of friendly forces.
   * Requires setting location, and mil_view, and ontology.
   * </pre>
   *
   * <code>TEMPLATE_ASSET = 3;</code>
   */
  public static final int TEMPLATE_ASSET_VALUE = 3;
  /**
   * <pre>
   * Refers to shapes or points of interest drawn on the map.
   * Requires setting geo_shape and geo_details.
   * </pre>
   *
   * <code>TEMPLATE_GEO = 4;</code>
   */
  public static final int TEMPLATE_GEO_VALUE = 4;
  /**
   * <pre>
   * Refers to signal detection with characteristics such as emitter notation, frequency, or lines of bearing.
   * Requires setting signal, and mil_view, and ontology. Requies setting location, if the signal.fixed component is populated.
   * </pre>
   *
   * <code>TEMPLATE_SIGNAL_OF_INTEREST = 5;</code>
   */
  public static final int TEMPLATE_SIGNAL_OF_INTEREST_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Template valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Template forNumber(int value) {
    switch (value) {
      case 0: return TEMPLATE_INVALID;
      case 1: return TEMPLATE_TRACK;
      case 2: return TEMPLATE_SENSOR_POINT_OF_INTEREST;
      case 3: return TEMPLATE_ASSET;
      case 4: return TEMPLATE_GEO;
      case 5: return TEMPLATE_SIGNAL_OF_INTEREST;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Template>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Template> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Template>() {
          public Template findValueByNumber(int number) {
            return Template.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.anduril.entitymanager.v1.TypesPubProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final Template[] VALUES = values();

  public static Template valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Template(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:anduril.entitymanager.v1.Template)
}

