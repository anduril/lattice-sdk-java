// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anduril/taskmanager/v1/task_manager_api.pub.proto

package com.anduril.taskmanager.v1;

public interface StreamTasksRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:anduril.taskmanager.v1.StreamTasksRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Optional rate limiting on StreamTasksResponses.
   * </pre>
   *
   * <code>.anduril.taskmanager.v1.RateLimit rate_limit = 1 [json_name = "rateLimit"];</code>
   * @return Whether the rateLimit field is set.
   */
  boolean hasRateLimit();
  /**
   * <pre>
   * Optional rate limiting on StreamTasksResponses.
   * </pre>
   *
   * <code>.anduril.taskmanager.v1.RateLimit rate_limit = 1 [json_name = "rateLimit"];</code>
   * @return The rateLimit.
   */
  com.anduril.taskmanager.v1.RateLimit getRateLimit();
  /**
   * <pre>
   * Optional rate limiting on StreamTasksResponses.
   * </pre>
   *
   * <code>.anduril.taskmanager.v1.RateLimit rate_limit = 1 [json_name = "rateLimit"];</code>
   */
  com.anduril.taskmanager.v1.RateLimitOrBuilder getRateLimitOrBuilder();

  /**
   * <pre>
   * Optional additional views of a Task.
   * If not set, defaults to TASK_VIEW_MANAGER.
   * </pre>
   *
   * <code>repeated .anduril.taskmanager.v1.TaskView views = 2 [json_name = "views"];</code>
   * @return A list containing the views.
   */
  java.util.List<com.anduril.taskmanager.v1.TaskView> getViewsList();
  /**
   * <pre>
   * Optional additional views of a Task.
   * If not set, defaults to TASK_VIEW_MANAGER.
   * </pre>
   *
   * <code>repeated .anduril.taskmanager.v1.TaskView views = 2 [json_name = "views"];</code>
   * @return The count of views.
   */
  int getViewsCount();
  /**
   * <pre>
   * Optional additional views of a Task.
   * If not set, defaults to TASK_VIEW_MANAGER.
   * </pre>
   *
   * <code>repeated .anduril.taskmanager.v1.TaskView views = 2 [json_name = "views"];</code>
   * @param index The index of the element to return.
   * @return The views at the given index.
   */
  com.anduril.taskmanager.v1.TaskView getViews(int index);
  /**
   * <pre>
   * Optional additional views of a Task.
   * If not set, defaults to TASK_VIEW_MANAGER.
   * </pre>
   *
   * <code>repeated .anduril.taskmanager.v1.TaskView views = 2 [json_name = "views"];</code>
   * @return A list containing the enum numeric values on the wire for views.
   */
  java.util.List<java.lang.Integer>
  getViewsValueList();
  /**
   * <pre>
   * Optional additional views of a Task.
   * If not set, defaults to TASK_VIEW_MANAGER.
   * </pre>
   *
   * <code>repeated .anduril.taskmanager.v1.TaskView views = 2 [json_name = "views"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of views at the given index.
   */
  int getViewsValue(int index);

  /**
   * <pre>
   * Optional period (in milliseconds) at which a Heartbeat message will be sent on the
   * message stream. If this field is unset then no Heartbeat messages are sent.
   * </pre>
   *
   * <code>uint32 heartbeat_period_millis = 3 [json_name = "heartbeatPeriodMillis"];</code>
   * @return The heartbeatPeriodMillis.
   */
  int getHeartbeatPeriodMillis();

  /**
   * <pre>
   * Optional flag to only include tasks created or updated after the stream is initiated, and not any previous preexisting tasks.
   * If unset, the stream will include any new tasks and task updates, as well as all preexisting tasks.
   * </pre>
   *
   * <code>bool exclude_preexisting_tasks = 4 [json_name = "excludePreexistingTasks"];</code>
   * @return The excludePreexistingTasks.
   */
  boolean getExcludePreexistingTasks();
}
