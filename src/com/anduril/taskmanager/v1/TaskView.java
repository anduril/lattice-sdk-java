// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: anduril/taskmanager/v1/task.pub.proto
// Protobuf Java Version: 4.27.3

package com.anduril.taskmanager.v1;

/**
 * <pre>
 * View of a Task through its lifecycle.
 * For example, a definition v1 of a task may be running on an agent, indicated by TASK_VIEW_AGENT,
 * while the definition v2 may not have been received yet, indicated by TASK_VIEW_MANAGER.
 * </pre>
 *
 * Protobuf enum {@code anduril.taskmanager.v1.TaskView}
 */
public enum TaskView
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>TASK_VIEW_INVALID = 0;</code>
   */
  TASK_VIEW_INVALID(0),
  /**
   * <pre>
   * Represents the most recent version of the Task known to Task Manager
   * </pre>
   *
   * <code>TASK_VIEW_MANAGER = 1;</code>
   */
  TASK_VIEW_MANAGER(1),
  /**
   * <pre>
   * Represents the most recent version of the Task acknowledged or updated by an Agent
   * </pre>
   *
   * <code>TASK_VIEW_AGENT = 2;</code>
   */
  TASK_VIEW_AGENT(2),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 3,
      /* suffix= */ "",
      TaskView.class.getName());
  }
  /**
   * <code>TASK_VIEW_INVALID = 0;</code>
   */
  public static final int TASK_VIEW_INVALID_VALUE = 0;
  /**
   * <pre>
   * Represents the most recent version of the Task known to Task Manager
   * </pre>
   *
   * <code>TASK_VIEW_MANAGER = 1;</code>
   */
  public static final int TASK_VIEW_MANAGER_VALUE = 1;
  /**
   * <pre>
   * Represents the most recent version of the Task acknowledged or updated by an Agent
   * </pre>
   *
   * <code>TASK_VIEW_AGENT = 2;</code>
   */
  public static final int TASK_VIEW_AGENT_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TaskView valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TaskView forNumber(int value) {
    switch (value) {
      case 0: return TASK_VIEW_INVALID;
      case 1: return TASK_VIEW_MANAGER;
      case 2: return TASK_VIEW_AGENT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TaskView>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TaskView> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TaskView>() {
          public TaskView findValueByNumber(int number) {
            return TaskView.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.anduril.taskmanager.v1.TaskPubProto.getDescriptor().getEnumTypes().get(3);
  }

  private static final TaskView[] VALUES = values();

  public static TaskView valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TaskView(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:anduril.taskmanager.v1.TaskView)
}

