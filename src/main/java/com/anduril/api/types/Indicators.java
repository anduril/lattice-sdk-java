/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Indicators.Builder.class)
public final class Indicators {
    private final Optional<Boolean> simulated;

    private final Optional<Boolean> exercise;

    private final Optional<Boolean> emergency;

    private final Optional<Boolean> c2;

    private final Optional<Boolean> egressable;

    private final Optional<Boolean> starred;

    private final Map<String, Object> additionalProperties;

    private Indicators(
            Optional<Boolean> simulated,
            Optional<Boolean> exercise,
            Optional<Boolean> emergency,
            Optional<Boolean> c2,
            Optional<Boolean> egressable,
            Optional<Boolean> starred,
            Map<String, Object> additionalProperties) {
        this.simulated = simulated;
        this.exercise = exercise;
        this.emergency = emergency;
        this.c2 = c2;
        this.egressable = egressable;
        this.starred = starred;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("simulated")
    public Optional<Boolean> getSimulated() {
        return simulated;
    }

    @JsonProperty("exercise")
    public Optional<Boolean> getExercise() {
        return exercise;
    }

    @JsonProperty("emergency")
    public Optional<Boolean> getEmergency() {
        return emergency;
    }

    @JsonProperty("c2")
    public Optional<Boolean> getC2() {
        return c2;
    }

    /**
     * @return Indicates the Entity should be egressed to external sources.
     * Integrations choose how the egressing happens (e.g. if an Entity needs fuzzing).
     */
    @JsonProperty("egressable")
    public Optional<Boolean> getEgressable() {
        return egressable;
    }

    /**
     * @return A signal of arbitrary importance such that the entity should be globally marked for all users
     */
    @JsonProperty("starred")
    public Optional<Boolean> getStarred() {
        return starred;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Indicators && equalTo((Indicators) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Indicators other) {
        return simulated.equals(other.simulated)
                && exercise.equals(other.exercise)
                && emergency.equals(other.emergency)
                && c2.equals(other.c2)
                && egressable.equals(other.egressable)
                && starred.equals(other.starred);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.simulated, this.exercise, this.emergency, this.c2, this.egressable, this.starred);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> simulated = Optional.empty();

        private Optional<Boolean> exercise = Optional.empty();

        private Optional<Boolean> emergency = Optional.empty();

        private Optional<Boolean> c2 = Optional.empty();

        private Optional<Boolean> egressable = Optional.empty();

        private Optional<Boolean> starred = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Indicators other) {
            simulated(other.getSimulated());
            exercise(other.getExercise());
            emergency(other.getEmergency());
            c2(other.getC2());
            egressable(other.getEgressable());
            starred(other.getStarred());
            return this;
        }

        @JsonSetter(value = "simulated", nulls = Nulls.SKIP)
        public Builder simulated(Optional<Boolean> simulated) {
            this.simulated = simulated;
            return this;
        }

        public Builder simulated(Boolean simulated) {
            this.simulated = Optional.ofNullable(simulated);
            return this;
        }

        @JsonSetter(value = "exercise", nulls = Nulls.SKIP)
        public Builder exercise(Optional<Boolean> exercise) {
            this.exercise = exercise;
            return this;
        }

        public Builder exercise(Boolean exercise) {
            this.exercise = Optional.ofNullable(exercise);
            return this;
        }

        @JsonSetter(value = "emergency", nulls = Nulls.SKIP)
        public Builder emergency(Optional<Boolean> emergency) {
            this.emergency = emergency;
            return this;
        }

        public Builder emergency(Boolean emergency) {
            this.emergency = Optional.ofNullable(emergency);
            return this;
        }

        @JsonSetter(value = "c2", nulls = Nulls.SKIP)
        public Builder c2(Optional<Boolean> c2) {
            this.c2 = c2;
            return this;
        }

        public Builder c2(Boolean c2) {
            this.c2 = Optional.ofNullable(c2);
            return this;
        }

        /**
         * <p>Indicates the Entity should be egressed to external sources.
         * Integrations choose how the egressing happens (e.g. if an Entity needs fuzzing).</p>
         */
        @JsonSetter(value = "egressable", nulls = Nulls.SKIP)
        public Builder egressable(Optional<Boolean> egressable) {
            this.egressable = egressable;
            return this;
        }

        public Builder egressable(Boolean egressable) {
            this.egressable = Optional.ofNullable(egressable);
            return this;
        }

        /**
         * <p>A signal of arbitrary importance such that the entity should be globally marked for all users</p>
         */
        @JsonSetter(value = "starred", nulls = Nulls.SKIP)
        public Builder starred(Optional<Boolean> starred) {
            this.starred = starred;
            return this;
        }

        public Builder starred(Boolean starred) {
            this.starred = Optional.ofNullable(starred);
            return this;
        }

        public Indicators build() {
            return new Indicators(simulated, exercise, emergency, c2, egressable, starred, additionalProperties);
        }
    }
}
