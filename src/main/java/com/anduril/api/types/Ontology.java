/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Ontology.Builder.class)
public final class Ontology {
    private final Optional<String> platformType;

    private final Optional<String> specificType;

    private final Optional<OntologyTemplate> template;

    private final Map<String, Object> additionalProperties;

    private Ontology(
            Optional<String> platformType,
            Optional<String> specificType,
            Optional<OntologyTemplate> template,
            Map<String, Object> additionalProperties) {
        this.platformType = platformType;
        this.specificType = specificType;
        this.template = template;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A string that describes the entity's high-level type with natural language.
     */
    @JsonProperty("platformType")
    public Optional<String> getPlatformType() {
        return platformType;
    }

    /**
     * @return A string that describes the entity's exact model or type.
     */
    @JsonProperty("specificType")
    public Optional<String> getSpecificType() {
        return specificType;
    }

    /**
     * @return The template used when creating this entity. Specifies minimum required components.
     */
    @JsonProperty("template")
    public Optional<OntologyTemplate> getTemplate() {
        return template;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Ontology && equalTo((Ontology) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Ontology other) {
        return platformType.equals(other.platformType)
                && specificType.equals(other.specificType)
                && template.equals(other.template);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.platformType, this.specificType, this.template);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> platformType = Optional.empty();

        private Optional<String> specificType = Optional.empty();

        private Optional<OntologyTemplate> template = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Ontology other) {
            platformType(other.getPlatformType());
            specificType(other.getSpecificType());
            template(other.getTemplate());
            return this;
        }

        /**
         * <p>A string that describes the entity's high-level type with natural language.</p>
         */
        @JsonSetter(value = "platformType", nulls = Nulls.SKIP)
        public Builder platformType(Optional<String> platformType) {
            this.platformType = platformType;
            return this;
        }

        public Builder platformType(String platformType) {
            this.platformType = Optional.ofNullable(platformType);
            return this;
        }

        /**
         * <p>A string that describes the entity's exact model or type.</p>
         */
        @JsonSetter(value = "specificType", nulls = Nulls.SKIP)
        public Builder specificType(Optional<String> specificType) {
            this.specificType = specificType;
            return this;
        }

        public Builder specificType(String specificType) {
            this.specificType = Optional.ofNullable(specificType);
            return this;
        }

        /**
         * <p>The template used when creating this entity. Specifies minimum required components.</p>
         */
        @JsonSetter(value = "template", nulls = Nulls.SKIP)
        public Builder template(Optional<OntologyTemplate> template) {
            this.template = template;
            return this;
        }

        public Builder template(OntologyTemplate template) {
            this.template = Optional.ofNullable(template);
            return this;
        }

        public Ontology build() {
            return new Ontology(platformType, specificType, template, additionalProperties);
        }
    }
}
