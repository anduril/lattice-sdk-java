/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MilView.Builder.class)
public final class MilView {
    private final Optional<MilViewDisposition> disposition;

    private final Optional<MilViewEnvironment> environment;

    private final Optional<MilViewNationality> nationality;

    private final Map<String, Object> additionalProperties;

    private MilView(
            Optional<MilViewDisposition> disposition,
            Optional<MilViewEnvironment> environment,
            Optional<MilViewNationality> nationality,
            Map<String, Object> additionalProperties) {
        this.disposition = disposition;
        this.environment = environment;
        this.nationality = nationality;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("disposition")
    public Optional<MilViewDisposition> getDisposition() {
        return disposition;
    }

    @JsonProperty("environment")
    public Optional<MilViewEnvironment> getEnvironment() {
        return environment;
    }

    @JsonProperty("nationality")
    public Optional<MilViewNationality> getNationality() {
        return nationality;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MilView && equalTo((MilView) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MilView other) {
        return disposition.equals(other.disposition)
                && environment.equals(other.environment)
                && nationality.equals(other.nationality);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.disposition, this.environment, this.nationality);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<MilViewDisposition> disposition = Optional.empty();

        private Optional<MilViewEnvironment> environment = Optional.empty();

        private Optional<MilViewNationality> nationality = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MilView other) {
            disposition(other.getDisposition());
            environment(other.getEnvironment());
            nationality(other.getNationality());
            return this;
        }

        @JsonSetter(value = "disposition", nulls = Nulls.SKIP)
        public Builder disposition(Optional<MilViewDisposition> disposition) {
            this.disposition = disposition;
            return this;
        }

        public Builder disposition(MilViewDisposition disposition) {
            this.disposition = Optional.ofNullable(disposition);
            return this;
        }

        @JsonSetter(value = "environment", nulls = Nulls.SKIP)
        public Builder environment(Optional<MilViewEnvironment> environment) {
            this.environment = environment;
            return this;
        }

        public Builder environment(MilViewEnvironment environment) {
            this.environment = Optional.ofNullable(environment);
            return this;
        }

        @JsonSetter(value = "nationality", nulls = Nulls.SKIP)
        public Builder nationality(Optional<MilViewNationality> nationality) {
            this.nationality = nationality;
            return this;
        }

        public Builder nationality(MilViewNationality nationality) {
            this.nationality = Optional.ofNullable(nationality);
            return this;
        }

        public MilView build() {
            return new MilView(disposition, environment, nationality, additionalProperties);
        }
    }
}
