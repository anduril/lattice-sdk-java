/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Decorrelation.Builder.class)
public final class Decorrelation {
    private final Optional<DecorrelatedAll> all;

    private final Optional<List<DecorrelatedSingle>> decorrelatedEntities;

    private final Map<String, Object> additionalProperties;

    private Decorrelation(
            Optional<DecorrelatedAll> all,
            Optional<List<DecorrelatedSingle>> decorrelatedEntities,
            Map<String, Object> additionalProperties) {
        this.all = all;
        this.decorrelatedEntities = decorrelatedEntities;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This will be specified if this entity was decorrelated against all other entities.
     */
    @JsonProperty("all")
    public Optional<DecorrelatedAll> getAll() {
        return all;
    }

    /**
     * @return A list of decorrelated entities that have been explicitly decorrelated against this entity
     * which prevents lower precedence correlations from overriding it in the future.
     * For example, if an operator in the UI decorrelated tracks A and B, any automated
     * correlators would be unable to correlate them since manual decorrelations have
     * higher precedence than automatic ones. Precedence is determined by both correlation
     * type and replication mode.
     */
    @JsonProperty("decorrelatedEntities")
    public Optional<List<DecorrelatedSingle>> getDecorrelatedEntities() {
        return decorrelatedEntities;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Decorrelation && equalTo((Decorrelation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Decorrelation other) {
        return all.equals(other.all) && decorrelatedEntities.equals(other.decorrelatedEntities);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.all, this.decorrelatedEntities);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<DecorrelatedAll> all = Optional.empty();

        private Optional<List<DecorrelatedSingle>> decorrelatedEntities = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Decorrelation other) {
            all(other.getAll());
            decorrelatedEntities(other.getDecorrelatedEntities());
            return this;
        }

        /**
         * <p>This will be specified if this entity was decorrelated against all other entities.</p>
         */
        @JsonSetter(value = "all", nulls = Nulls.SKIP)
        public Builder all(Optional<DecorrelatedAll> all) {
            this.all = all;
            return this;
        }

        public Builder all(DecorrelatedAll all) {
            this.all = Optional.ofNullable(all);
            return this;
        }

        /**
         * <p>A list of decorrelated entities that have been explicitly decorrelated against this entity
         * which prevents lower precedence correlations from overriding it in the future.
         * For example, if an operator in the UI decorrelated tracks A and B, any automated
         * correlators would be unable to correlate them since manual decorrelations have
         * higher precedence than automatic ones. Precedence is determined by both correlation
         * type and replication mode.</p>
         */
        @JsonSetter(value = "decorrelatedEntities", nulls = Nulls.SKIP)
        public Builder decorrelatedEntities(Optional<List<DecorrelatedSingle>> decorrelatedEntities) {
            this.decorrelatedEntities = decorrelatedEntities;
            return this;
        }

        public Builder decorrelatedEntities(List<DecorrelatedSingle> decorrelatedEntities) {
            this.decorrelatedEntities = Optional.ofNullable(decorrelatedEntities);
            return this;
        }

        public Decorrelation build() {
            return new Decorrelation(all, decorrelatedEntities, additionalProperties);
        }
    }
}
