/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityEventResponse.Builder.class)
public final class EntityEventResponse {
    private final Optional<String> sessionToken;

    private final Optional<List<EntityEvent>> entityEvents;

    private final Map<String, Object> additionalProperties;

    private EntityEventResponse(
            Optional<String> sessionToken,
            Optional<List<EntityEvent>> entityEvents,
            Map<String, Object> additionalProperties) {
        this.sessionToken = sessionToken;
        this.entityEvents = entityEvents;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Long-poll session identifier. Use this token to resume polling on subsequent requests.
     */
    @JsonProperty("sessionToken")
    public Optional<String> getSessionToken() {
        return sessionToken;
    }

    @JsonProperty("entityEvents")
    public Optional<List<EntityEvent>> getEntityEvents() {
        return entityEvents;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityEventResponse && equalTo((EntityEventResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityEventResponse other) {
        return sessionToken.equals(other.sessionToken) && entityEvents.equals(other.entityEvents);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sessionToken, this.entityEvents);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> sessionToken = Optional.empty();

        private Optional<List<EntityEvent>> entityEvents = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EntityEventResponse other) {
            sessionToken(other.getSessionToken());
            entityEvents(other.getEntityEvents());
            return this;
        }

        /**
         * <p>Long-poll session identifier. Use this token to resume polling on subsequent requests.</p>
         */
        @JsonSetter(value = "sessionToken", nulls = Nulls.SKIP)
        public Builder sessionToken(Optional<String> sessionToken) {
            this.sessionToken = sessionToken;
            return this;
        }

        public Builder sessionToken(String sessionToken) {
            this.sessionToken = Optional.ofNullable(sessionToken);
            return this;
        }

        @JsonSetter(value = "entityEvents", nulls = Nulls.SKIP)
        public Builder entityEvents(Optional<List<EntityEvent>> entityEvents) {
            this.entityEvents = entityEvents;
            return this;
        }

        public Builder entityEvents(List<EntityEvent> entityEvents) {
            this.entityEvents = Optional.ofNullable(entityEvents);
            return this;
        }

        public EntityEventResponse build() {
            return new EntityEventResponse(sessionToken, entityEvents, additionalProperties);
        }
    }
}
