/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Correlation.Builder.class)
public final class Correlation {
    private final Optional<PrimaryCorrelation> primary;

    private final Optional<SecondaryCorrelation> secondary;

    private final Optional<CorrelationMembership> membership;

    private final Optional<Decorrelation> decorrelation;

    private final Map<String, Object> additionalProperties;

    private Correlation(
            Optional<PrimaryCorrelation> primary,
            Optional<SecondaryCorrelation> secondary,
            Optional<CorrelationMembership> membership,
            Optional<Decorrelation> decorrelation,
            Map<String, Object> additionalProperties) {
        this.primary = primary;
        this.secondary = secondary;
        this.membership = membership;
        this.decorrelation = decorrelation;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This entity is the primary of a correlation meaning that it serves as the representative
     * entity of the correlation set.
     */
    @JsonProperty("primary")
    public Optional<PrimaryCorrelation> getPrimary() {
        return primary;
    }

    /**
     * @return This entity is a secondary of a correlation meaning that it will be represented by the
     * primary of the correlation set.
     */
    @JsonProperty("secondary")
    public Optional<SecondaryCorrelation> getSecondary() {
        return secondary;
    }

    /**
     * @return If present, this entity is a part of a correlation set.
     */
    @JsonProperty("membership")
    public Optional<CorrelationMembership> getMembership() {
        return membership;
    }

    /**
     * @return If present, this entity was explicitly decorrelated from one or more entities.
     * An entity can be both correlated and decorrelated as long as they are disjoint sets.
     * An example would be if a user in the UI decides that two tracks are not actually the
     * same despite an automatic correlator having correlated them. The user would then
     * decorrelate the two tracks and this decorrelation would be preserved preventing the
     * correlator from re-correlating them at a later time.
     */
    @JsonProperty("decorrelation")
    public Optional<Decorrelation> getDecorrelation() {
        return decorrelation;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Correlation && equalTo((Correlation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Correlation other) {
        return primary.equals(other.primary)
                && secondary.equals(other.secondary)
                && membership.equals(other.membership)
                && decorrelation.equals(other.decorrelation);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.primary, this.secondary, this.membership, this.decorrelation);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PrimaryCorrelation> primary = Optional.empty();

        private Optional<SecondaryCorrelation> secondary = Optional.empty();

        private Optional<CorrelationMembership> membership = Optional.empty();

        private Optional<Decorrelation> decorrelation = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Correlation other) {
            primary(other.getPrimary());
            secondary(other.getSecondary());
            membership(other.getMembership());
            decorrelation(other.getDecorrelation());
            return this;
        }

        /**
         * <p>This entity is the primary of a correlation meaning that it serves as the representative
         * entity of the correlation set.</p>
         */
        @JsonSetter(value = "primary", nulls = Nulls.SKIP)
        public Builder primary(Optional<PrimaryCorrelation> primary) {
            this.primary = primary;
            return this;
        }

        public Builder primary(PrimaryCorrelation primary) {
            this.primary = Optional.ofNullable(primary);
            return this;
        }

        /**
         * <p>This entity is a secondary of a correlation meaning that it will be represented by the
         * primary of the correlation set.</p>
         */
        @JsonSetter(value = "secondary", nulls = Nulls.SKIP)
        public Builder secondary(Optional<SecondaryCorrelation> secondary) {
            this.secondary = secondary;
            return this;
        }

        public Builder secondary(SecondaryCorrelation secondary) {
            this.secondary = Optional.ofNullable(secondary);
            return this;
        }

        /**
         * <p>If present, this entity is a part of a correlation set.</p>
         */
        @JsonSetter(value = "membership", nulls = Nulls.SKIP)
        public Builder membership(Optional<CorrelationMembership> membership) {
            this.membership = membership;
            return this;
        }

        public Builder membership(CorrelationMembership membership) {
            this.membership = Optional.ofNullable(membership);
            return this;
        }

        /**
         * <p>If present, this entity was explicitly decorrelated from one or more entities.
         * An entity can be both correlated and decorrelated as long as they are disjoint sets.
         * An example would be if a user in the UI decides that two tracks are not actually the
         * same despite an automatic correlator having correlated them. The user would then
         * decorrelate the two tracks and this decorrelation would be preserved preventing the
         * correlator from re-correlating them at a later time.</p>
         */
        @JsonSetter(value = "decorrelation", nulls = Nulls.SKIP)
        public Builder decorrelation(Optional<Decorrelation> decorrelation) {
            this.decorrelation = decorrelation;
            return this;
        }

        public Builder decorrelation(Decorrelation decorrelation) {
            this.decorrelation = Optional.ofNullable(decorrelation);
            return this;
        }

        public Correlation build() {
            return new Correlation(primary, secondary, membership, decorrelation, additionalProperties);
        }
    }
}
