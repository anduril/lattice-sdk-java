/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Position.Builder.class)
public final class Position {
    private final Optional<Double> latitudeDegrees;

    private final Optional<Double> longitudeDegrees;

    private final Optional<Double> altitudeHaeMeters;

    private final Optional<Double> altitudeAglMeters;

    private final Optional<Double> altitudeAsfMeters;

    private final Optional<Double> pressureDepthMeters;

    private final Map<String, Object> additionalProperties;

    private Position(
            Optional<Double> latitudeDegrees,
            Optional<Double> longitudeDegrees,
            Optional<Double> altitudeHaeMeters,
            Optional<Double> altitudeAglMeters,
            Optional<Double> altitudeAsfMeters,
            Optional<Double> pressureDepthMeters,
            Map<String, Object> additionalProperties) {
        this.latitudeDegrees = latitudeDegrees;
        this.longitudeDegrees = longitudeDegrees;
        this.altitudeHaeMeters = altitudeHaeMeters;
        this.altitudeAglMeters = altitudeAglMeters;
        this.altitudeAsfMeters = altitudeAsfMeters;
        this.pressureDepthMeters = pressureDepthMeters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return WGS84 geodetic latitude in decimal degrees.
     */
    @JsonProperty("latitudeDegrees")
    public Optional<Double> getLatitudeDegrees() {
        return latitudeDegrees;
    }

    /**
     * @return WGS84 longitude in decimal degrees.
     */
    @JsonProperty("longitudeDegrees")
    public Optional<Double> getLongitudeDegrees() {
        return longitudeDegrees;
    }

    /**
     * @return altitude as height above ellipsoid (WGS84) in meters. DoubleValue wrapper is used to distinguish optional from
     * default 0.
     */
    @JsonProperty("altitudeHaeMeters")
    public Optional<Double> getAltitudeHaeMeters() {
        return altitudeHaeMeters;
    }

    /**
     * @return Altitude as AGL (Above Ground Level) if the upstream data source has this value set. This value represents the
     * entity's height above the terrain. This is typically measured with a radar altimeter or by using a terrain tile
     * set lookup. If the value is not set from the upstream, this value is not set.
     */
    @JsonProperty("altitudeAglMeters")
    public Optional<Double> getAltitudeAglMeters() {
        return altitudeAglMeters;
    }

    /**
     * @return Altitude as ASF (Above Sea Floor) if the upstream data source has this value set. If the value is not set from the upstream, this value is
     * not set.
     */
    @JsonProperty("altitudeAsfMeters")
    public Optional<Double> getAltitudeAsfMeters() {
        return altitudeAsfMeters;
    }

    /**
     * @return The depth of the entity from the surface of the water through sensor measurements based on differential pressure
     * between the interior and exterior of the vessel. If the value is not set from the upstream, this value is not set.
     */
    @JsonProperty("pressureDepthMeters")
    public Optional<Double> getPressureDepthMeters() {
        return pressureDepthMeters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Position && equalTo((Position) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Position other) {
        return latitudeDegrees.equals(other.latitudeDegrees)
                && longitudeDegrees.equals(other.longitudeDegrees)
                && altitudeHaeMeters.equals(other.altitudeHaeMeters)
                && altitudeAglMeters.equals(other.altitudeAglMeters)
                && altitudeAsfMeters.equals(other.altitudeAsfMeters)
                && pressureDepthMeters.equals(other.pressureDepthMeters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.latitudeDegrees,
                this.longitudeDegrees,
                this.altitudeHaeMeters,
                this.altitudeAglMeters,
                this.altitudeAsfMeters,
                this.pressureDepthMeters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> latitudeDegrees = Optional.empty();

        private Optional<Double> longitudeDegrees = Optional.empty();

        private Optional<Double> altitudeHaeMeters = Optional.empty();

        private Optional<Double> altitudeAglMeters = Optional.empty();

        private Optional<Double> altitudeAsfMeters = Optional.empty();

        private Optional<Double> pressureDepthMeters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Position other) {
            latitudeDegrees(other.getLatitudeDegrees());
            longitudeDegrees(other.getLongitudeDegrees());
            altitudeHaeMeters(other.getAltitudeHaeMeters());
            altitudeAglMeters(other.getAltitudeAglMeters());
            altitudeAsfMeters(other.getAltitudeAsfMeters());
            pressureDepthMeters(other.getPressureDepthMeters());
            return this;
        }

        /**
         * <p>WGS84 geodetic latitude in decimal degrees.</p>
         */
        @JsonSetter(value = "latitudeDegrees", nulls = Nulls.SKIP)
        public Builder latitudeDegrees(Optional<Double> latitudeDegrees) {
            this.latitudeDegrees = latitudeDegrees;
            return this;
        }

        public Builder latitudeDegrees(Double latitudeDegrees) {
            this.latitudeDegrees = Optional.ofNullable(latitudeDegrees);
            return this;
        }

        /**
         * <p>WGS84 longitude in decimal degrees.</p>
         */
        @JsonSetter(value = "longitudeDegrees", nulls = Nulls.SKIP)
        public Builder longitudeDegrees(Optional<Double> longitudeDegrees) {
            this.longitudeDegrees = longitudeDegrees;
            return this;
        }

        public Builder longitudeDegrees(Double longitudeDegrees) {
            this.longitudeDegrees = Optional.ofNullable(longitudeDegrees);
            return this;
        }

        /**
         * <p>altitude as height above ellipsoid (WGS84) in meters. DoubleValue wrapper is used to distinguish optional from
         * default 0.</p>
         */
        @JsonSetter(value = "altitudeHaeMeters", nulls = Nulls.SKIP)
        public Builder altitudeHaeMeters(Optional<Double> altitudeHaeMeters) {
            this.altitudeHaeMeters = altitudeHaeMeters;
            return this;
        }

        public Builder altitudeHaeMeters(Double altitudeHaeMeters) {
            this.altitudeHaeMeters = Optional.ofNullable(altitudeHaeMeters);
            return this;
        }

        /**
         * <p>Altitude as AGL (Above Ground Level) if the upstream data source has this value set. This value represents the
         * entity's height above the terrain. This is typically measured with a radar altimeter or by using a terrain tile
         * set lookup. If the value is not set from the upstream, this value is not set.</p>
         */
        @JsonSetter(value = "altitudeAglMeters", nulls = Nulls.SKIP)
        public Builder altitudeAglMeters(Optional<Double> altitudeAglMeters) {
            this.altitudeAglMeters = altitudeAglMeters;
            return this;
        }

        public Builder altitudeAglMeters(Double altitudeAglMeters) {
            this.altitudeAglMeters = Optional.ofNullable(altitudeAglMeters);
            return this;
        }

        /**
         * <p>Altitude as ASF (Above Sea Floor) if the upstream data source has this value set. If the value is not set from the upstream, this value is
         * not set.</p>
         */
        @JsonSetter(value = "altitudeAsfMeters", nulls = Nulls.SKIP)
        public Builder altitudeAsfMeters(Optional<Double> altitudeAsfMeters) {
            this.altitudeAsfMeters = altitudeAsfMeters;
            return this;
        }

        public Builder altitudeAsfMeters(Double altitudeAsfMeters) {
            this.altitudeAsfMeters = Optional.ofNullable(altitudeAsfMeters);
            return this;
        }

        /**
         * <p>The depth of the entity from the surface of the water through sensor measurements based on differential pressure
         * between the interior and exterior of the vessel. If the value is not set from the upstream, this value is not set.</p>
         */
        @JsonSetter(value = "pressureDepthMeters", nulls = Nulls.SKIP)
        public Builder pressureDepthMeters(Optional<Double> pressureDepthMeters) {
            this.pressureDepthMeters = pressureDepthMeters;
            return this;
        }

        public Builder pressureDepthMeters(Double pressureDepthMeters) {
            this.pressureDepthMeters = Optional.ofNullable(pressureDepthMeters);
            return this;
        }

        public Position build() {
            return new Position(
                    latitudeDegrees,
                    longitudeDegrees,
                    altitudeHaeMeters,
                    altitudeAglMeters,
                    altitudeAsfMeters,
                    pressureDepthMeters,
                    additionalProperties);
        }
    }
}
