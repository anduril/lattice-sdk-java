/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaskQueryResults.Builder.class)
public final class TaskQueryResults {
    private final Optional<List<Task>> tasks;

    private final Optional<String> nextPageToken;

    private final Map<String, Object> additionalProperties;

    private TaskQueryResults(
            Optional<List<Task>> tasks, Optional<String> nextPageToken, Map<String, Object> additionalProperties) {
        this.tasks = tasks;
        this.nextPageToken = nextPageToken;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("tasks")
    public Optional<List<Task>> getTasks() {
        return tasks;
    }

    /**
     * @return Incomplete results can be detected by a non-empty nextPageToken field in the query results. In order to retrieve
     * the next page, perform the exact same request as previously and append a pageToken field with the value of
     * nextPageToken from the previous page. A new nextPageToken is provided on the following pages until all the
     * results are retrieved.
     */
    @JsonProperty("nextPageToken")
    public Optional<String> getNextPageToken() {
        return nextPageToken;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaskQueryResults && equalTo((TaskQueryResults) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaskQueryResults other) {
        return tasks.equals(other.tasks) && nextPageToken.equals(other.nextPageToken);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tasks, this.nextPageToken);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Task>> tasks = Optional.empty();

        private Optional<String> nextPageToken = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaskQueryResults other) {
            tasks(other.getTasks());
            nextPageToken(other.getNextPageToken());
            return this;
        }

        @JsonSetter(value = "tasks", nulls = Nulls.SKIP)
        public Builder tasks(Optional<List<Task>> tasks) {
            this.tasks = tasks;
            return this;
        }

        public Builder tasks(List<Task> tasks) {
            this.tasks = Optional.ofNullable(tasks);
            return this;
        }

        /**
         * <p>Incomplete results can be detected by a non-empty nextPageToken field in the query results. In order to retrieve
         * the next page, perform the exact same request as previously and append a pageToken field with the value of
         * nextPageToken from the previous page. A new nextPageToken is provided on the following pages until all the
         * results are retrieved.</p>
         */
        @JsonSetter(value = "nextPageToken", nulls = Nulls.SKIP)
        public Builder nextPageToken(Optional<String> nextPageToken) {
            this.nextPageToken = nextPageToken;
            return this;
        }

        public Builder nextPageToken(String nextPageToken) {
            this.nextPageToken = Optional.ofNullable(nextPageToken);
            return this;
        }

        public TaskQueryResults build() {
            return new TaskQueryResults(tasks, nextPageToken, additionalProperties);
        }
    }
}
