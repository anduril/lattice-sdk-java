/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AgentRequest.Builder.class)
public final class AgentRequest {
    private final Optional<ExecuteRequest> executeRequest;

    private final Optional<CancelRequest> cancelRequest;

    private final Optional<CompleteRequest> completeRequest;

    private final Map<String, Object> additionalProperties;

    private AgentRequest(
            Optional<ExecuteRequest> executeRequest,
            Optional<CancelRequest> cancelRequest,
            Optional<CompleteRequest> completeRequest,
            Map<String, Object> additionalProperties) {
        this.executeRequest = executeRequest;
        this.cancelRequest = cancelRequest;
        this.completeRequest = completeRequest;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("executeRequest")
    public Optional<ExecuteRequest> getExecuteRequest() {
        return executeRequest;
    }

    @JsonProperty("cancelRequest")
    public Optional<CancelRequest> getCancelRequest() {
        return cancelRequest;
    }

    @JsonProperty("completeRequest")
    public Optional<CompleteRequest> getCompleteRequest() {
        return completeRequest;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentRequest && equalTo((AgentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentRequest other) {
        return executeRequest.equals(other.executeRequest)
                && cancelRequest.equals(other.cancelRequest)
                && completeRequest.equals(other.completeRequest);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.executeRequest, this.cancelRequest, this.completeRequest);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ExecuteRequest> executeRequest = Optional.empty();

        private Optional<CancelRequest> cancelRequest = Optional.empty();

        private Optional<CompleteRequest> completeRequest = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AgentRequest other) {
            executeRequest(other.getExecuteRequest());
            cancelRequest(other.getCancelRequest());
            completeRequest(other.getCompleteRequest());
            return this;
        }

        @JsonSetter(value = "executeRequest", nulls = Nulls.SKIP)
        public Builder executeRequest(Optional<ExecuteRequest> executeRequest) {
            this.executeRequest = executeRequest;
            return this;
        }

        public Builder executeRequest(ExecuteRequest executeRequest) {
            this.executeRequest = Optional.ofNullable(executeRequest);
            return this;
        }

        @JsonSetter(value = "cancelRequest", nulls = Nulls.SKIP)
        public Builder cancelRequest(Optional<CancelRequest> cancelRequest) {
            this.cancelRequest = cancelRequest;
            return this;
        }

        public Builder cancelRequest(CancelRequest cancelRequest) {
            this.cancelRequest = Optional.ofNullable(cancelRequest);
            return this;
        }

        @JsonSetter(value = "completeRequest", nulls = Nulls.SKIP)
        public Builder completeRequest(Optional<CompleteRequest> completeRequest) {
            this.completeRequest = completeRequest;
            return this;
        }

        public Builder completeRequest(CompleteRequest completeRequest) {
            this.completeRequest = Optional.ofNullable(completeRequest);
            return this;
        }

        public AgentRequest build() {
            return new AgentRequest(executeRequest, cancelRequest, completeRequest, additionalProperties);
        }
    }
}
