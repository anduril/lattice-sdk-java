/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Relationship.Builder.class)
public final class Relationship {
    private final Optional<String> relatedEntityId;

    private final Optional<String> relationshipId;

    private final Optional<RelationshipType> relationshipType;

    private final Map<String, Object> additionalProperties;

    private Relationship(
            Optional<String> relatedEntityId,
            Optional<String> relationshipId,
            Optional<RelationshipType> relationshipType,
            Map<String, Object> additionalProperties) {
        this.relatedEntityId = relatedEntityId;
        this.relationshipId = relationshipId;
        this.relationshipType = relationshipType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The entity ID to which this entity is related.
     */
    @JsonProperty("relatedEntityId")
    public Optional<String> getRelatedEntityId() {
        return relatedEntityId;
    }

    /**
     * @return A unique identifier for this relationship. Allows removing or updating relationships.
     */
    @JsonProperty("relationshipId")
    public Optional<String> getRelationshipId() {
        return relationshipId;
    }

    /**
     * @return The relationship type
     */
    @JsonProperty("relationshipType")
    public Optional<RelationshipType> getRelationshipType() {
        return relationshipType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Relationship && equalTo((Relationship) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Relationship other) {
        return relatedEntityId.equals(other.relatedEntityId)
                && relationshipId.equals(other.relationshipId)
                && relationshipType.equals(other.relationshipType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.relatedEntityId, this.relationshipId, this.relationshipType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> relatedEntityId = Optional.empty();

        private Optional<String> relationshipId = Optional.empty();

        private Optional<RelationshipType> relationshipType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Relationship other) {
            relatedEntityId(other.getRelatedEntityId());
            relationshipId(other.getRelationshipId());
            relationshipType(other.getRelationshipType());
            return this;
        }

        /**
         * <p>The entity ID to which this entity is related.</p>
         */
        @JsonSetter(value = "relatedEntityId", nulls = Nulls.SKIP)
        public Builder relatedEntityId(Optional<String> relatedEntityId) {
            this.relatedEntityId = relatedEntityId;
            return this;
        }

        public Builder relatedEntityId(String relatedEntityId) {
            this.relatedEntityId = Optional.ofNullable(relatedEntityId);
            return this;
        }

        /**
         * <p>A unique identifier for this relationship. Allows removing or updating relationships.</p>
         */
        @JsonSetter(value = "relationshipId", nulls = Nulls.SKIP)
        public Builder relationshipId(Optional<String> relationshipId) {
            this.relationshipId = relationshipId;
            return this;
        }

        public Builder relationshipId(String relationshipId) {
            this.relationshipId = Optional.ofNullable(relationshipId);
            return this;
        }

        /**
         * <p>The relationship type</p>
         */
        @JsonSetter(value = "relationshipType", nulls = Nulls.SKIP)
        public Builder relationshipType(Optional<RelationshipType> relationshipType) {
            this.relationshipType = relationshipType;
            return this;
        }

        public Builder relationshipType(RelationshipType relationshipType) {
            this.relationshipType = Optional.ofNullable(relationshipType);
            return this;
        }

        public Relationship build() {
            return new Relationship(relatedEntityId, relationshipId, relationshipType, additionalProperties);
        }
    }
}
