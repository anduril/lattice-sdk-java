/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LineOfBearing.Builder.class)
public final class LineOfBearing {
    private final Optional<AngleOfArrival> angleOfArrival;

    private final Optional<Measurement> rangeEstimateM;

    private final Optional<Measurement> maxRangeM;

    private final Map<String, Object> additionalProperties;

    private LineOfBearing(
            Optional<AngleOfArrival> angleOfArrival,
            Optional<Measurement> rangeEstimateM,
            Optional<Measurement> maxRangeM,
            Map<String, Object> additionalProperties) {
        this.angleOfArrival = angleOfArrival;
        this.rangeEstimateM = rangeEstimateM;
        this.maxRangeM = maxRangeM;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The direction pointing from this entity to the detection
     */
    @JsonProperty("angleOfArrival")
    public Optional<AngleOfArrival> getAngleOfArrival() {
        return angleOfArrival;
    }

    /**
     * @return The estimated distance of the detection
     */
    @JsonProperty("rangeEstimateM")
    public Optional<Measurement> getRangeEstimateM() {
        return rangeEstimateM;
    }

    /**
     * @return The maximum distance of the detection
     */
    @JsonProperty("maxRangeM")
    public Optional<Measurement> getMaxRangeM() {
        return maxRangeM;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LineOfBearing && equalTo((LineOfBearing) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LineOfBearing other) {
        return angleOfArrival.equals(other.angleOfArrival)
                && rangeEstimateM.equals(other.rangeEstimateM)
                && maxRangeM.equals(other.maxRangeM);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.angleOfArrival, this.rangeEstimateM, this.maxRangeM);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AngleOfArrival> angleOfArrival = Optional.empty();

        private Optional<Measurement> rangeEstimateM = Optional.empty();

        private Optional<Measurement> maxRangeM = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LineOfBearing other) {
            angleOfArrival(other.getAngleOfArrival());
            rangeEstimateM(other.getRangeEstimateM());
            maxRangeM(other.getMaxRangeM());
            return this;
        }

        /**
         * <p>The direction pointing from this entity to the detection</p>
         */
        @JsonSetter(value = "angleOfArrival", nulls = Nulls.SKIP)
        public Builder angleOfArrival(Optional<AngleOfArrival> angleOfArrival) {
            this.angleOfArrival = angleOfArrival;
            return this;
        }

        public Builder angleOfArrival(AngleOfArrival angleOfArrival) {
            this.angleOfArrival = Optional.ofNullable(angleOfArrival);
            return this;
        }

        /**
         * <p>The estimated distance of the detection</p>
         */
        @JsonSetter(value = "rangeEstimateM", nulls = Nulls.SKIP)
        public Builder rangeEstimateM(Optional<Measurement> rangeEstimateM) {
            this.rangeEstimateM = rangeEstimateM;
            return this;
        }

        public Builder rangeEstimateM(Measurement rangeEstimateM) {
            this.rangeEstimateM = Optional.ofNullable(rangeEstimateM);
            return this;
        }

        /**
         * <p>The maximum distance of the detection</p>
         */
        @JsonSetter(value = "maxRangeM", nulls = Nulls.SKIP)
        public Builder maxRangeM(Optional<Measurement> maxRangeM) {
            this.maxRangeM = maxRangeM;
            return this;
        }

        public Builder maxRangeM(Measurement maxRangeM) {
            this.maxRangeM = Optional.ofNullable(maxRangeM);
            return this;
        }

        public LineOfBearing build() {
            return new LineOfBearing(angleOfArrival, rangeEstimateM, maxRangeM, additionalProperties);
        }
    }
}
