/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BandwidthRange.Builder.class)
public final class BandwidthRange {
    private final Optional<Bandwidth> minimumBandwidth;

    private final Optional<Bandwidth> maximumBandwidth;

    private final Map<String, Object> additionalProperties;

    private BandwidthRange(
            Optional<Bandwidth> minimumBandwidth,
            Optional<Bandwidth> maximumBandwidth,
            Map<String, Object> additionalProperties) {
        this.minimumBandwidth = minimumBandwidth;
        this.maximumBandwidth = maximumBandwidth;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("minimumBandwidth")
    public Optional<Bandwidth> getMinimumBandwidth() {
        return minimumBandwidth;
    }

    @JsonProperty("maximumBandwidth")
    public Optional<Bandwidth> getMaximumBandwidth() {
        return maximumBandwidth;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BandwidthRange && equalTo((BandwidthRange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BandwidthRange other) {
        return minimumBandwidth.equals(other.minimumBandwidth) && maximumBandwidth.equals(other.maximumBandwidth);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.minimumBandwidth, this.maximumBandwidth);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Bandwidth> minimumBandwidth = Optional.empty();

        private Optional<Bandwidth> maximumBandwidth = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BandwidthRange other) {
            minimumBandwidth(other.getMinimumBandwidth());
            maximumBandwidth(other.getMaximumBandwidth());
            return this;
        }

        @JsonSetter(value = "minimumBandwidth", nulls = Nulls.SKIP)
        public Builder minimumBandwidth(Optional<Bandwidth> minimumBandwidth) {
            this.minimumBandwidth = minimumBandwidth;
            return this;
        }

        public Builder minimumBandwidth(Bandwidth minimumBandwidth) {
            this.minimumBandwidth = Optional.ofNullable(minimumBandwidth);
            return this;
        }

        @JsonSetter(value = "maximumBandwidth", nulls = Nulls.SKIP)
        public Builder maximumBandwidth(Optional<Bandwidth> maximumBandwidth) {
            this.maximumBandwidth = maximumBandwidth;
            return this;
        }

        public Builder maximumBandwidth(Bandwidth maximumBandwidth) {
            this.maximumBandwidth = Optional.ofNullable(maximumBandwidth);
            return this;
        }

        public BandwidthRange build() {
            return new BandwidthRange(minimumBandwidth, maximumBandwidth, additionalProperties);
        }
    }
}
