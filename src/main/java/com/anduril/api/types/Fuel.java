/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Fuel.Builder.class)
public final class Fuel {
    private final Optional<String> fuelId;

    private final Optional<String> name;

    private final Optional<OffsetDateTime> reportedDate;

    private final Optional<Integer> amountGallons;

    private final Optional<Integer> maxAuthorizedCapacityGallons;

    private final Optional<Integer> operationalRequirementGallons;

    private final Optional<Classification> dataClassification;

    private final Optional<String> dataSource;

    private final Map<String, Object> additionalProperties;

    private Fuel(
            Optional<String> fuelId,
            Optional<String> name,
            Optional<OffsetDateTime> reportedDate,
            Optional<Integer> amountGallons,
            Optional<Integer> maxAuthorizedCapacityGallons,
            Optional<Integer> operationalRequirementGallons,
            Optional<Classification> dataClassification,
            Optional<String> dataSource,
            Map<String, Object> additionalProperties) {
        this.fuelId = fuelId;
        this.name = name;
        this.reportedDate = reportedDate;
        this.amountGallons = amountGallons;
        this.maxAuthorizedCapacityGallons = maxAuthorizedCapacityGallons;
        this.operationalRequirementGallons = operationalRequirementGallons;
        this.dataClassification = dataClassification;
        this.dataSource = dataSource;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return unique fuel identifier
     */
    @JsonProperty("fuelId")
    public Optional<String> getFuelId() {
        return fuelId;
    }

    /**
     * @return long form name of the fuel source.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return timestamp the information was reported
     */
    @JsonProperty("reportedDate")
    public Optional<OffsetDateTime> getReportedDate() {
        return reportedDate;
    }

    /**
     * @return amount of gallons on hand
     */
    @JsonProperty("amountGallons")
    public Optional<Integer> getAmountGallons() {
        return amountGallons;
    }

    /**
     * @return how much the asset is allowed to have available (in gallons)
     */
    @JsonProperty("maxAuthorizedCapacityGallons")
    public Optional<Integer> getMaxAuthorizedCapacityGallons() {
        return maxAuthorizedCapacityGallons;
    }

    /**
     * @return minimum required for operations (in gallons)
     */
    @JsonProperty("operationalRequirementGallons")
    public Optional<Integer> getOperationalRequirementGallons() {
        return operationalRequirementGallons;
    }

    /**
     * @return fuel in a single asset may have different levels of classification
     * use case: fuel for a SECRET asset while diesel fuel may be UNCLASSIFIED
     */
    @JsonProperty("dataClassification")
    public Optional<Classification> getDataClassification() {
        return dataClassification;
    }

    /**
     * @return source of information
     */
    @JsonProperty("dataSource")
    public Optional<String> getDataSource() {
        return dataSource;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Fuel && equalTo((Fuel) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Fuel other) {
        return fuelId.equals(other.fuelId)
                && name.equals(other.name)
                && reportedDate.equals(other.reportedDate)
                && amountGallons.equals(other.amountGallons)
                && maxAuthorizedCapacityGallons.equals(other.maxAuthorizedCapacityGallons)
                && operationalRequirementGallons.equals(other.operationalRequirementGallons)
                && dataClassification.equals(other.dataClassification)
                && dataSource.equals(other.dataSource);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.fuelId,
                this.name,
                this.reportedDate,
                this.amountGallons,
                this.maxAuthorizedCapacityGallons,
                this.operationalRequirementGallons,
                this.dataClassification,
                this.dataSource);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> fuelId = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<OffsetDateTime> reportedDate = Optional.empty();

        private Optional<Integer> amountGallons = Optional.empty();

        private Optional<Integer> maxAuthorizedCapacityGallons = Optional.empty();

        private Optional<Integer> operationalRequirementGallons = Optional.empty();

        private Optional<Classification> dataClassification = Optional.empty();

        private Optional<String> dataSource = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Fuel other) {
            fuelId(other.getFuelId());
            name(other.getName());
            reportedDate(other.getReportedDate());
            amountGallons(other.getAmountGallons());
            maxAuthorizedCapacityGallons(other.getMaxAuthorizedCapacityGallons());
            operationalRequirementGallons(other.getOperationalRequirementGallons());
            dataClassification(other.getDataClassification());
            dataSource(other.getDataSource());
            return this;
        }

        /**
         * <p>unique fuel identifier</p>
         */
        @JsonSetter(value = "fuelId", nulls = Nulls.SKIP)
        public Builder fuelId(Optional<String> fuelId) {
            this.fuelId = fuelId;
            return this;
        }

        public Builder fuelId(String fuelId) {
            this.fuelId = Optional.ofNullable(fuelId);
            return this;
        }

        /**
         * <p>long form name of the fuel source.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>timestamp the information was reported</p>
         */
        @JsonSetter(value = "reportedDate", nulls = Nulls.SKIP)
        public Builder reportedDate(Optional<OffsetDateTime> reportedDate) {
            this.reportedDate = reportedDate;
            return this;
        }

        public Builder reportedDate(OffsetDateTime reportedDate) {
            this.reportedDate = Optional.ofNullable(reportedDate);
            return this;
        }

        /**
         * <p>amount of gallons on hand</p>
         */
        @JsonSetter(value = "amountGallons", nulls = Nulls.SKIP)
        public Builder amountGallons(Optional<Integer> amountGallons) {
            this.amountGallons = amountGallons;
            return this;
        }

        public Builder amountGallons(Integer amountGallons) {
            this.amountGallons = Optional.ofNullable(amountGallons);
            return this;
        }

        /**
         * <p>how much the asset is allowed to have available (in gallons)</p>
         */
        @JsonSetter(value = "maxAuthorizedCapacityGallons", nulls = Nulls.SKIP)
        public Builder maxAuthorizedCapacityGallons(Optional<Integer> maxAuthorizedCapacityGallons) {
            this.maxAuthorizedCapacityGallons = maxAuthorizedCapacityGallons;
            return this;
        }

        public Builder maxAuthorizedCapacityGallons(Integer maxAuthorizedCapacityGallons) {
            this.maxAuthorizedCapacityGallons = Optional.ofNullable(maxAuthorizedCapacityGallons);
            return this;
        }

        /**
         * <p>minimum required for operations (in gallons)</p>
         */
        @JsonSetter(value = "operationalRequirementGallons", nulls = Nulls.SKIP)
        public Builder operationalRequirementGallons(Optional<Integer> operationalRequirementGallons) {
            this.operationalRequirementGallons = operationalRequirementGallons;
            return this;
        }

        public Builder operationalRequirementGallons(Integer operationalRequirementGallons) {
            this.operationalRequirementGallons = Optional.ofNullable(operationalRequirementGallons);
            return this;
        }

        /**
         * <p>fuel in a single asset may have different levels of classification
         * use case: fuel for a SECRET asset while diesel fuel may be UNCLASSIFIED</p>
         */
        @JsonSetter(value = "dataClassification", nulls = Nulls.SKIP)
        public Builder dataClassification(Optional<Classification> dataClassification) {
            this.dataClassification = dataClassification;
            return this;
        }

        public Builder dataClassification(Classification dataClassification) {
            this.dataClassification = Optional.ofNullable(dataClassification);
            return this;
        }

        /**
         * <p>source of information</p>
         */
        @JsonSetter(value = "dataSource", nulls = Nulls.SKIP)
        public Builder dataSource(Optional<String> dataSource) {
            this.dataSource = dataSource;
            return this;
        }

        public Builder dataSource(String dataSource) {
            this.dataSource = Optional.ofNullable(dataSource);
            return this;
        }

        public Fuel build() {
            return new Fuel(
                    fuelId,
                    name,
                    reportedDate,
                    amountGallons,
                    maxAuthorizedCapacityGallons,
                    operationalRequirementGallons,
                    dataClassification,
                    dataSource,
                    additionalProperties);
        }
    }
}
