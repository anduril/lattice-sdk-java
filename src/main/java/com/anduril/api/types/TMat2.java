/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TMat2.Builder.class)
public final class TMat2 {
    private final Optional<Double> mxx;

    private final Optional<Double> mxy;

    private final Optional<Double> myy;

    private final Map<String, Object> additionalProperties;

    private TMat2(
            Optional<Double> mxx,
            Optional<Double> mxy,
            Optional<Double> myy,
            Map<String, Object> additionalProperties) {
        this.mxx = mxx;
        this.mxy = mxy;
        this.myy = myy;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("mxx")
    public Optional<Double> getMxx() {
        return mxx;
    }

    @JsonProperty("mxy")
    public Optional<Double> getMxy() {
        return mxy;
    }

    @JsonProperty("myy")
    public Optional<Double> getMyy() {
        return myy;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TMat2 && equalTo((TMat2) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TMat2 other) {
        return mxx.equals(other.mxx) && mxy.equals(other.mxy) && myy.equals(other.myy);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.mxx, this.mxy, this.myy);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> mxx = Optional.empty();

        private Optional<Double> mxy = Optional.empty();

        private Optional<Double> myy = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TMat2 other) {
            mxx(other.getMxx());
            mxy(other.getMxy());
            myy(other.getMyy());
            return this;
        }

        @JsonSetter(value = "mxx", nulls = Nulls.SKIP)
        public Builder mxx(Optional<Double> mxx) {
            this.mxx = mxx;
            return this;
        }

        public Builder mxx(Double mxx) {
            this.mxx = Optional.ofNullable(mxx);
            return this;
        }

        @JsonSetter(value = "mxy", nulls = Nulls.SKIP)
        public Builder mxy(Optional<Double> mxy) {
            this.mxy = mxy;
            return this;
        }

        public Builder mxy(Double mxy) {
            this.mxy = Optional.ofNullable(mxy);
            return this;
        }

        @JsonSetter(value = "myy", nulls = Nulls.SKIP)
        public Builder myy(Optional<Double> myy) {
            this.myy = myy;
            return this;
        }

        public Builder myy(Double myy) {
            this.myy = Optional.ofNullable(myy);
            return this;
        }

        public TMat2 build() {
            return new TMat2(mxx, mxy, myy, additionalProperties);
        }
    }
}
