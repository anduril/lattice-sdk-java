/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MeanKeplerianElements.Builder.class)
public final class MeanKeplerianElements {
    private final Optional<OffsetDateTime> epoch;

    private final Optional<Double> semiMajorAxisKm;

    private final Optional<Double> meanMotion;

    private final Optional<Double> eccentricity;

    private final Optional<Double> inclinationDeg;

    private final Optional<Double> raOfAscNodeDeg;

    private final Optional<Double> argOfPericenterDeg;

    private final Optional<Double> meanAnomalyDeg;

    private final Optional<Double> gm;

    private final Map<String, Object> additionalProperties;

    private MeanKeplerianElements(
            Optional<OffsetDateTime> epoch,
            Optional<Double> semiMajorAxisKm,
            Optional<Double> meanMotion,
            Optional<Double> eccentricity,
            Optional<Double> inclinationDeg,
            Optional<Double> raOfAscNodeDeg,
            Optional<Double> argOfPericenterDeg,
            Optional<Double> meanAnomalyDeg,
            Optional<Double> gm,
            Map<String, Object> additionalProperties) {
        this.epoch = epoch;
        this.semiMajorAxisKm = semiMajorAxisKm;
        this.meanMotion = meanMotion;
        this.eccentricity = eccentricity;
        this.inclinationDeg = inclinationDeg;
        this.raOfAscNodeDeg = raOfAscNodeDeg;
        this.argOfPericenterDeg = argOfPericenterDeg;
        this.meanAnomalyDeg = meanAnomalyDeg;
        this.gm = gm;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return UTC time of validity
     */
    @JsonProperty("epoch")
    public Optional<OffsetDateTime> getEpoch() {
        return epoch;
    }

    /**
     * @return Preferred: semi major axis in kilometers
     */
    @JsonProperty("semiMajorAxisKm")
    public Optional<Double> getSemiMajorAxisKm() {
        return semiMajorAxisKm;
    }

    /**
     * @return If using SGP/SGP4, provide the Keplerian Mean Motion in revolutions per day
     */
    @JsonProperty("meanMotion")
    public Optional<Double> getMeanMotion() {
        return meanMotion;
    }

    @JsonProperty("eccentricity")
    public Optional<Double> getEccentricity() {
        return eccentricity;
    }

    /**
     * @return Angle of inclination in deg
     */
    @JsonProperty("inclinationDeg")
    public Optional<Double> getInclinationDeg() {
        return inclinationDeg;
    }

    /**
     * @return Right ascension of the ascending node in deg
     */
    @JsonProperty("raOfAscNodeDeg")
    public Optional<Double> getRaOfAscNodeDeg() {
        return raOfAscNodeDeg;
    }

    /**
     * @return Argument of pericenter in deg
     */
    @JsonProperty("argOfPericenterDeg")
    public Optional<Double> getArgOfPericenterDeg() {
        return argOfPericenterDeg;
    }

    /**
     * @return Mean anomaly in deg
     */
    @JsonProperty("meanAnomalyDeg")
    public Optional<Double> getMeanAnomalyDeg() {
        return meanAnomalyDeg;
    }

    /**
     * @return Optional: gravitational coefficient (Gravitational Constant x central mass) in kg^3 / s^2
     */
    @JsonProperty("gm")
    public Optional<Double> getGm() {
        return gm;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MeanKeplerianElements && equalTo((MeanKeplerianElements) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MeanKeplerianElements other) {
        return epoch.equals(other.epoch)
                && semiMajorAxisKm.equals(other.semiMajorAxisKm)
                && meanMotion.equals(other.meanMotion)
                && eccentricity.equals(other.eccentricity)
                && inclinationDeg.equals(other.inclinationDeg)
                && raOfAscNodeDeg.equals(other.raOfAscNodeDeg)
                && argOfPericenterDeg.equals(other.argOfPericenterDeg)
                && meanAnomalyDeg.equals(other.meanAnomalyDeg)
                && gm.equals(other.gm);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.epoch,
                this.semiMajorAxisKm,
                this.meanMotion,
                this.eccentricity,
                this.inclinationDeg,
                this.raOfAscNodeDeg,
                this.argOfPericenterDeg,
                this.meanAnomalyDeg,
                this.gm);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OffsetDateTime> epoch = Optional.empty();

        private Optional<Double> semiMajorAxisKm = Optional.empty();

        private Optional<Double> meanMotion = Optional.empty();

        private Optional<Double> eccentricity = Optional.empty();

        private Optional<Double> inclinationDeg = Optional.empty();

        private Optional<Double> raOfAscNodeDeg = Optional.empty();

        private Optional<Double> argOfPericenterDeg = Optional.empty();

        private Optional<Double> meanAnomalyDeg = Optional.empty();

        private Optional<Double> gm = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MeanKeplerianElements other) {
            epoch(other.getEpoch());
            semiMajorAxisKm(other.getSemiMajorAxisKm());
            meanMotion(other.getMeanMotion());
            eccentricity(other.getEccentricity());
            inclinationDeg(other.getInclinationDeg());
            raOfAscNodeDeg(other.getRaOfAscNodeDeg());
            argOfPericenterDeg(other.getArgOfPericenterDeg());
            meanAnomalyDeg(other.getMeanAnomalyDeg());
            gm(other.getGm());
            return this;
        }

        /**
         * <p>UTC time of validity</p>
         */
        @JsonSetter(value = "epoch", nulls = Nulls.SKIP)
        public Builder epoch(Optional<OffsetDateTime> epoch) {
            this.epoch = epoch;
            return this;
        }

        public Builder epoch(OffsetDateTime epoch) {
            this.epoch = Optional.ofNullable(epoch);
            return this;
        }

        /**
         * <p>Preferred: semi major axis in kilometers</p>
         */
        @JsonSetter(value = "semiMajorAxisKm", nulls = Nulls.SKIP)
        public Builder semiMajorAxisKm(Optional<Double> semiMajorAxisKm) {
            this.semiMajorAxisKm = semiMajorAxisKm;
            return this;
        }

        public Builder semiMajorAxisKm(Double semiMajorAxisKm) {
            this.semiMajorAxisKm = Optional.ofNullable(semiMajorAxisKm);
            return this;
        }

        /**
         * <p>If using SGP/SGP4, provide the Keplerian Mean Motion in revolutions per day</p>
         */
        @JsonSetter(value = "meanMotion", nulls = Nulls.SKIP)
        public Builder meanMotion(Optional<Double> meanMotion) {
            this.meanMotion = meanMotion;
            return this;
        }

        public Builder meanMotion(Double meanMotion) {
            this.meanMotion = Optional.ofNullable(meanMotion);
            return this;
        }

        @JsonSetter(value = "eccentricity", nulls = Nulls.SKIP)
        public Builder eccentricity(Optional<Double> eccentricity) {
            this.eccentricity = eccentricity;
            return this;
        }

        public Builder eccentricity(Double eccentricity) {
            this.eccentricity = Optional.ofNullable(eccentricity);
            return this;
        }

        /**
         * <p>Angle of inclination in deg</p>
         */
        @JsonSetter(value = "inclinationDeg", nulls = Nulls.SKIP)
        public Builder inclinationDeg(Optional<Double> inclinationDeg) {
            this.inclinationDeg = inclinationDeg;
            return this;
        }

        public Builder inclinationDeg(Double inclinationDeg) {
            this.inclinationDeg = Optional.ofNullable(inclinationDeg);
            return this;
        }

        /**
         * <p>Right ascension of the ascending node in deg</p>
         */
        @JsonSetter(value = "raOfAscNodeDeg", nulls = Nulls.SKIP)
        public Builder raOfAscNodeDeg(Optional<Double> raOfAscNodeDeg) {
            this.raOfAscNodeDeg = raOfAscNodeDeg;
            return this;
        }

        public Builder raOfAscNodeDeg(Double raOfAscNodeDeg) {
            this.raOfAscNodeDeg = Optional.ofNullable(raOfAscNodeDeg);
            return this;
        }

        /**
         * <p>Argument of pericenter in deg</p>
         */
        @JsonSetter(value = "argOfPericenterDeg", nulls = Nulls.SKIP)
        public Builder argOfPericenterDeg(Optional<Double> argOfPericenterDeg) {
            this.argOfPericenterDeg = argOfPericenterDeg;
            return this;
        }

        public Builder argOfPericenterDeg(Double argOfPericenterDeg) {
            this.argOfPericenterDeg = Optional.ofNullable(argOfPericenterDeg);
            return this;
        }

        /**
         * <p>Mean anomaly in deg</p>
         */
        @JsonSetter(value = "meanAnomalyDeg", nulls = Nulls.SKIP)
        public Builder meanAnomalyDeg(Optional<Double> meanAnomalyDeg) {
            this.meanAnomalyDeg = meanAnomalyDeg;
            return this;
        }

        public Builder meanAnomalyDeg(Double meanAnomalyDeg) {
            this.meanAnomalyDeg = Optional.ofNullable(meanAnomalyDeg);
            return this;
        }

        /**
         * <p>Optional: gravitational coefficient (Gravitational Constant x central mass) in kg^3 / s^2</p>
         */
        @JsonSetter(value = "gm", nulls = Nulls.SKIP)
        public Builder gm(Optional<Double> gm) {
            this.gm = gm;
            return this;
        }

        public Builder gm(Double gm) {
            this.gm = Optional.ofNullable(gm);
            return this;
        }

        public MeanKeplerianElements build() {
            return new MeanKeplerianElements(
                    epoch,
                    semiMajorAxisKm,
                    meanMotion,
                    eccentricity,
                    inclinationDeg,
                    raOfAscNodeDeg,
                    argOfPericenterDeg,
                    meanAnomalyDeg,
                    gm,
                    additionalProperties);
        }
    }
}
