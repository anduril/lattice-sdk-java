/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Quaternion.Builder.class)
public final class Quaternion {
    private final Optional<Double> x;

    private final Optional<Double> y;

    private final Optional<Double> z;

    private final Optional<Double> w;

    private final Map<String, Object> additionalProperties;

    private Quaternion(
            Optional<Double> x,
            Optional<Double> y,
            Optional<Double> z,
            Optional<Double> w,
            Map<String, Object> additionalProperties) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return x, y, z are vector portion, w is scalar
     */
    @JsonProperty("x")
    public Optional<Double> getX() {
        return x;
    }

    @JsonProperty("y")
    public Optional<Double> getY() {
        return y;
    }

    @JsonProperty("z")
    public Optional<Double> getZ() {
        return z;
    }

    @JsonProperty("w")
    public Optional<Double> getW() {
        return w;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Quaternion && equalTo((Quaternion) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Quaternion other) {
        return x.equals(other.x) && y.equals(other.y) && z.equals(other.z) && w.equals(other.w);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.x, this.y, this.z, this.w);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> x = Optional.empty();

        private Optional<Double> y = Optional.empty();

        private Optional<Double> z = Optional.empty();

        private Optional<Double> w = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Quaternion other) {
            x(other.getX());
            y(other.getY());
            z(other.getZ());
            w(other.getW());
            return this;
        }

        /**
         * <p>x, y, z are vector portion, w is scalar</p>
         */
        @JsonSetter(value = "x", nulls = Nulls.SKIP)
        public Builder x(Optional<Double> x) {
            this.x = x;
            return this;
        }

        public Builder x(Double x) {
            this.x = Optional.ofNullable(x);
            return this;
        }

        @JsonSetter(value = "y", nulls = Nulls.SKIP)
        public Builder y(Optional<Double> y) {
            this.y = y;
            return this;
        }

        public Builder y(Double y) {
            this.y = Optional.ofNullable(y);
            return this;
        }

        @JsonSetter(value = "z", nulls = Nulls.SKIP)
        public Builder z(Optional<Double> z) {
            this.z = z;
            return this;
        }

        public Builder z(Double z) {
            this.z = Optional.ofNullable(z);
            return this;
        }

        @JsonSetter(value = "w", nulls = Nulls.SKIP)
        public Builder w(Optional<Double> w) {
            this.w = w;
            return this;
        }

        public Builder w(Double w) {
            this.w = Optional.ofNullable(w);
            return this;
        }

        public Quaternion build() {
            return new Quaternion(x, y, z, w, additionalProperties);
        }
    }
}
