/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Payload.Builder.class)
public final class Payload {
    private final Optional<PayloadConfiguration> config;

    private final Map<String, Object> additionalProperties;

    private Payload(Optional<PayloadConfiguration> config, Map<String, Object> additionalProperties) {
        this.config = config;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("config")
    public Optional<PayloadConfiguration> getConfig() {
        return config;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Payload && equalTo((Payload) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Payload other) {
        return config.equals(other.config);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.config);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PayloadConfiguration> config = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Payload other) {
            config(other.getConfig());
            return this;
        }

        @JsonSetter(value = "config", nulls = Nulls.SKIP)
        public Builder config(Optional<PayloadConfiguration> config) {
            this.config = config;
            return this;
        }

        public Builder config(PayloadConfiguration config) {
            this.config = Optional.ofNullable(config);
            return this;
        }

        public Payload build() {
            return new Payload(config, additionalProperties);
        }
    }
}
