/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GroupDetails.Builder.class)
public final class GroupDetails {
    private final Optional<Team> team;

    private final Optional<Echelon> echelon;

    private final Map<String, Object> additionalProperties;

    private GroupDetails(Optional<Team> team, Optional<Echelon> echelon, Map<String, Object> additionalProperties) {
        this.team = team;
        this.echelon = echelon;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("team")
    public Optional<Team> getTeam() {
        return team;
    }

    @JsonProperty("echelon")
    public Optional<Echelon> getEchelon() {
        return echelon;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GroupDetails && equalTo((GroupDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GroupDetails other) {
        return team.equals(other.team) && echelon.equals(other.echelon);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.team, this.echelon);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Team> team = Optional.empty();

        private Optional<Echelon> echelon = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GroupDetails other) {
            team(other.getTeam());
            echelon(other.getEchelon());
            return this;
        }

        @JsonSetter(value = "team", nulls = Nulls.SKIP)
        public Builder team(Optional<Team> team) {
            this.team = team;
            return this;
        }

        public Builder team(Team team) {
            this.team = Optional.ofNullable(team);
            return this;
        }

        @JsonSetter(value = "echelon", nulls = Nulls.SKIP)
        public Builder echelon(Optional<Echelon> echelon) {
            this.echelon = echelon;
            return this;
        }

        public Builder echelon(Echelon echelon) {
            this.echelon = Optional.ofNullable(echelon);
            return this;
        }

        public GroupDetails build() {
            return new GroupDetails(team, echelon, additionalProperties);
        }
    }
}
