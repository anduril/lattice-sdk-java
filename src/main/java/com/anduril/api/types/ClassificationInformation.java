/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ClassificationInformation.Builder.class)
public final class ClassificationInformation {
    private final Optional<ClassificationInformationLevel> level;

    private final Optional<List<String>> caveats;

    private final Map<String, Object> additionalProperties;

    private ClassificationInformation(
            Optional<ClassificationInformationLevel> level,
            Optional<List<String>> caveats,
            Map<String, Object> additionalProperties) {
        this.level = level;
        this.caveats = caveats;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Classification level to be applied to the information in question.
     */
    @JsonProperty("level")
    public Optional<ClassificationInformationLevel> getLevel() {
        return level;
    }

    /**
     * @return Caveats that may further restrict how the information can be disseminated.
     */
    @JsonProperty("caveats")
    public Optional<List<String>> getCaveats() {
        return caveats;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ClassificationInformation && equalTo((ClassificationInformation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ClassificationInformation other) {
        return level.equals(other.level) && caveats.equals(other.caveats);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.level, this.caveats);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ClassificationInformationLevel> level = Optional.empty();

        private Optional<List<String>> caveats = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ClassificationInformation other) {
            level(other.getLevel());
            caveats(other.getCaveats());
            return this;
        }

        /**
         * <p>Classification level to be applied to the information in question.</p>
         */
        @JsonSetter(value = "level", nulls = Nulls.SKIP)
        public Builder level(Optional<ClassificationInformationLevel> level) {
            this.level = level;
            return this;
        }

        public Builder level(ClassificationInformationLevel level) {
            this.level = Optional.ofNullable(level);
            return this;
        }

        /**
         * <p>Caveats that may further restrict how the information can be disseminated.</p>
         */
        @JsonSetter(value = "caveats", nulls = Nulls.SKIP)
        public Builder caveats(Optional<List<String>> caveats) {
            this.caveats = caveats;
            return this;
        }

        public Builder caveats(List<String> caveats) {
            this.caveats = Optional.ofNullable(caveats);
            return this;
        }

        public ClassificationInformation build() {
            return new ClassificationInformation(level, caveats, additionalProperties);
        }
    }
}
