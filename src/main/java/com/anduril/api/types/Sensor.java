/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Sensor.Builder.class)
public final class Sensor {
    private final Optional<String> sensorId;

    private final Optional<SensorOperationalState> operationalState;

    private final Optional<SensorSensorType> sensorType;

    private final Optional<String> sensorDescription;

    private final Optional<RfConfiguration> rfConfiguraton;

    private final Optional<OffsetDateTime> lastDetectionTimestamp;

    private final Optional<List<FieldOfView>> fieldsOfView;

    private final Map<String, Object> additionalProperties;

    private Sensor(
            Optional<String> sensorId,
            Optional<SensorOperationalState> operationalState,
            Optional<SensorSensorType> sensorType,
            Optional<String> sensorDescription,
            Optional<RfConfiguration> rfConfiguraton,
            Optional<OffsetDateTime> lastDetectionTimestamp,
            Optional<List<FieldOfView>> fieldsOfView,
            Map<String, Object> additionalProperties) {
        this.sensorId = sensorId;
        this.operationalState = operationalState;
        this.sensorType = sensorType;
        this.sensorDescription = sensorDescription;
        this.rfConfiguraton = rfConfiguraton;
        this.lastDetectionTimestamp = lastDetectionTimestamp;
        this.fieldsOfView = fieldsOfView;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This generally is used to indicate a specific type at a more detailed granularity. E.g. COMInt or LWIR
     */
    @JsonProperty("sensorId")
    public Optional<String> getSensorId() {
        return sensorId;
    }

    @JsonProperty("operationalState")
    public Optional<SensorOperationalState> getOperationalState() {
        return operationalState;
    }

    /**
     * @return The type of sensor
     */
    @JsonProperty("sensorType")
    public Optional<SensorSensorType> getSensorType() {
        return sensorType;
    }

    /**
     * @return A human readable description of the sensor
     */
    @JsonProperty("sensorDescription")
    public Optional<String> getSensorDescription() {
        return sensorDescription;
    }

    /**
     * @return RF configuration details of the sensor
     */
    @JsonProperty("rfConfiguraton")
    public Optional<RfConfiguration> getRfConfiguraton() {
        return rfConfiguraton;
    }

    /**
     * @return Time of the latest detection from the sensor
     */
    @JsonProperty("lastDetectionTimestamp")
    public Optional<OffsetDateTime> getLastDetectionTimestamp() {
        return lastDetectionTimestamp;
    }

    /**
     * @return Multiple fields of view for a single sensor component
     */
    @JsonProperty("fieldsOfView")
    public Optional<List<FieldOfView>> getFieldsOfView() {
        return fieldsOfView;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Sensor && equalTo((Sensor) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Sensor other) {
        return sensorId.equals(other.sensorId)
                && operationalState.equals(other.operationalState)
                && sensorType.equals(other.sensorType)
                && sensorDescription.equals(other.sensorDescription)
                && rfConfiguraton.equals(other.rfConfiguraton)
                && lastDetectionTimestamp.equals(other.lastDetectionTimestamp)
                && fieldsOfView.equals(other.fieldsOfView);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.sensorId,
                this.operationalState,
                this.sensorType,
                this.sensorDescription,
                this.rfConfiguraton,
                this.lastDetectionTimestamp,
                this.fieldsOfView);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> sensorId = Optional.empty();

        private Optional<SensorOperationalState> operationalState = Optional.empty();

        private Optional<SensorSensorType> sensorType = Optional.empty();

        private Optional<String> sensorDescription = Optional.empty();

        private Optional<RfConfiguration> rfConfiguraton = Optional.empty();

        private Optional<OffsetDateTime> lastDetectionTimestamp = Optional.empty();

        private Optional<List<FieldOfView>> fieldsOfView = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Sensor other) {
            sensorId(other.getSensorId());
            operationalState(other.getOperationalState());
            sensorType(other.getSensorType());
            sensorDescription(other.getSensorDescription());
            rfConfiguraton(other.getRfConfiguraton());
            lastDetectionTimestamp(other.getLastDetectionTimestamp());
            fieldsOfView(other.getFieldsOfView());
            return this;
        }

        /**
         * <p>This generally is used to indicate a specific type at a more detailed granularity. E.g. COMInt or LWIR</p>
         */
        @JsonSetter(value = "sensorId", nulls = Nulls.SKIP)
        public Builder sensorId(Optional<String> sensorId) {
            this.sensorId = sensorId;
            return this;
        }

        public Builder sensorId(String sensorId) {
            this.sensorId = Optional.ofNullable(sensorId);
            return this;
        }

        @JsonSetter(value = "operationalState", nulls = Nulls.SKIP)
        public Builder operationalState(Optional<SensorOperationalState> operationalState) {
            this.operationalState = operationalState;
            return this;
        }

        public Builder operationalState(SensorOperationalState operationalState) {
            this.operationalState = Optional.ofNullable(operationalState);
            return this;
        }

        /**
         * <p>The type of sensor</p>
         */
        @JsonSetter(value = "sensorType", nulls = Nulls.SKIP)
        public Builder sensorType(Optional<SensorSensorType> sensorType) {
            this.sensorType = sensorType;
            return this;
        }

        public Builder sensorType(SensorSensorType sensorType) {
            this.sensorType = Optional.ofNullable(sensorType);
            return this;
        }

        /**
         * <p>A human readable description of the sensor</p>
         */
        @JsonSetter(value = "sensorDescription", nulls = Nulls.SKIP)
        public Builder sensorDescription(Optional<String> sensorDescription) {
            this.sensorDescription = sensorDescription;
            return this;
        }

        public Builder sensorDescription(String sensorDescription) {
            this.sensorDescription = Optional.ofNullable(sensorDescription);
            return this;
        }

        /**
         * <p>RF configuration details of the sensor</p>
         */
        @JsonSetter(value = "rfConfiguraton", nulls = Nulls.SKIP)
        public Builder rfConfiguraton(Optional<RfConfiguration> rfConfiguraton) {
            this.rfConfiguraton = rfConfiguraton;
            return this;
        }

        public Builder rfConfiguraton(RfConfiguration rfConfiguraton) {
            this.rfConfiguraton = Optional.ofNullable(rfConfiguraton);
            return this;
        }

        /**
         * <p>Time of the latest detection from the sensor</p>
         */
        @JsonSetter(value = "lastDetectionTimestamp", nulls = Nulls.SKIP)
        public Builder lastDetectionTimestamp(Optional<OffsetDateTime> lastDetectionTimestamp) {
            this.lastDetectionTimestamp = lastDetectionTimestamp;
            return this;
        }

        public Builder lastDetectionTimestamp(OffsetDateTime lastDetectionTimestamp) {
            this.lastDetectionTimestamp = Optional.ofNullable(lastDetectionTimestamp);
            return this;
        }

        /**
         * <p>Multiple fields of view for a single sensor component</p>
         */
        @JsonSetter(value = "fieldsOfView", nulls = Nulls.SKIP)
        public Builder fieldsOfView(Optional<List<FieldOfView>> fieldsOfView) {
            this.fieldsOfView = fieldsOfView;
            return this;
        }

        public Builder fieldsOfView(List<FieldOfView> fieldsOfView) {
            this.fieldsOfView = Optional.ofNullable(fieldsOfView);
            return this;
        }

        public Sensor build() {
            return new Sensor(
                    sensorId,
                    operationalState,
                    sensorType,
                    sensorDescription,
                    rfConfiguraton,
                    lastDetectionTimestamp,
                    fieldsOfView,
                    additionalProperties);
        }
    }
}
