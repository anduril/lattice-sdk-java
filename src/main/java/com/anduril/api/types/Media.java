/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Media.Builder.class)
public final class Media {
    private final Optional<List<MediaItem>> media;

    private final Map<String, Object> additionalProperties;

    private Media(Optional<List<MediaItem>> media, Map<String, Object> additionalProperties) {
        this.media = media;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("media")
    public Optional<List<MediaItem>> getMedia() {
        return media;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Media && equalTo((Media) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Media other) {
        return media.equals(other.media);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.media);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<MediaItem>> media = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Media other) {
            media(other.getMedia());
            return this;
        }

        @JsonSetter(value = "media", nulls = Nulls.SKIP)
        public Builder media(Optional<List<MediaItem>> media) {
            this.media = media;
            return this;
        }

        public Builder media(List<MediaItem> media) {
            this.media = Optional.ofNullable(media);
            return this;
        }

        public Media build() {
            return new Media(media, additionalProperties);
        }
    }
}
