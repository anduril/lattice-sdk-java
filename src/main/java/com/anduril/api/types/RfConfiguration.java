/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RfConfiguration.Builder.class)
public final class RfConfiguration {
    private final Optional<List<FrequencyRange>> frequencyRangeHz;

    private final Optional<List<BandwidthRange>> bandwidthRangeHz;

    private final Map<String, Object> additionalProperties;

    private RfConfiguration(
            Optional<List<FrequencyRange>> frequencyRangeHz,
            Optional<List<BandwidthRange>> bandwidthRangeHz,
            Map<String, Object> additionalProperties) {
        this.frequencyRangeHz = frequencyRangeHz;
        this.bandwidthRangeHz = bandwidthRangeHz;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Frequency ranges that are available for this sensor.
     */
    @JsonProperty("frequencyRangeHz")
    public Optional<List<FrequencyRange>> getFrequencyRangeHz() {
        return frequencyRangeHz;
    }

    /**
     * @return Bandwidth ranges that are available for this sensor.
     */
    @JsonProperty("bandwidthRangeHz")
    public Optional<List<BandwidthRange>> getBandwidthRangeHz() {
        return bandwidthRangeHz;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RfConfiguration && equalTo((RfConfiguration) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RfConfiguration other) {
        return frequencyRangeHz.equals(other.frequencyRangeHz) && bandwidthRangeHz.equals(other.bandwidthRangeHz);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.frequencyRangeHz, this.bandwidthRangeHz);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<FrequencyRange>> frequencyRangeHz = Optional.empty();

        private Optional<List<BandwidthRange>> bandwidthRangeHz = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RfConfiguration other) {
            frequencyRangeHz(other.getFrequencyRangeHz());
            bandwidthRangeHz(other.getBandwidthRangeHz());
            return this;
        }

        /**
         * <p>Frequency ranges that are available for this sensor.</p>
         */
        @JsonSetter(value = "frequencyRangeHz", nulls = Nulls.SKIP)
        public Builder frequencyRangeHz(Optional<List<FrequencyRange>> frequencyRangeHz) {
            this.frequencyRangeHz = frequencyRangeHz;
            return this;
        }

        public Builder frequencyRangeHz(List<FrequencyRange> frequencyRangeHz) {
            this.frequencyRangeHz = Optional.ofNullable(frequencyRangeHz);
            return this;
        }

        /**
         * <p>Bandwidth ranges that are available for this sensor.</p>
         */
        @JsonSetter(value = "bandwidthRangeHz", nulls = Nulls.SKIP)
        public Builder bandwidthRangeHz(Optional<List<BandwidthRange>> bandwidthRangeHz) {
            this.bandwidthRangeHz = bandwidthRangeHz;
            return this;
        }

        public Builder bandwidthRangeHz(List<BandwidthRange> bandwidthRangeHz) {
            this.bandwidthRangeHz = Optional.ofNullable(bandwidthRangeHz);
            return this;
        }

        public RfConfiguration build() {
            return new RfConfiguration(frequencyRangeHz, bandwidthRangeHz, additionalProperties);
        }
    }
}
