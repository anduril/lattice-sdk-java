/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GeoDetails.Builder.class)
public final class GeoDetails {
    private final Optional<GeoDetailsType> type;

    private final Optional<ControlAreaDetails> controlArea;

    private final Optional<AcmDetails> acm;

    private final Map<String, Object> additionalProperties;

    private GeoDetails(
            Optional<GeoDetailsType> type,
            Optional<ControlAreaDetails> controlArea,
            Optional<AcmDetails> acm,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.controlArea = controlArea;
        this.acm = acm;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public Optional<GeoDetailsType> getType() {
        return type;
    }

    @JsonProperty("controlArea")
    public Optional<ControlAreaDetails> getControlArea() {
        return controlArea;
    }

    @JsonProperty("acm")
    public Optional<AcmDetails> getAcm() {
        return acm;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GeoDetails && equalTo((GeoDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GeoDetails other) {
        return type.equals(other.type) && controlArea.equals(other.controlArea) && acm.equals(other.acm);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.controlArea, this.acm);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<GeoDetailsType> type = Optional.empty();

        private Optional<ControlAreaDetails> controlArea = Optional.empty();

        private Optional<AcmDetails> acm = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GeoDetails other) {
            type(other.getType());
            controlArea(other.getControlArea());
            acm(other.getAcm());
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<GeoDetailsType> type) {
            this.type = type;
            return this;
        }

        public Builder type(GeoDetailsType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "controlArea", nulls = Nulls.SKIP)
        public Builder controlArea(Optional<ControlAreaDetails> controlArea) {
            this.controlArea = controlArea;
            return this;
        }

        public Builder controlArea(ControlAreaDetails controlArea) {
            this.controlArea = Optional.ofNullable(controlArea);
            return this;
        }

        @JsonSetter(value = "acm", nulls = Nulls.SKIP)
        public Builder acm(Optional<AcmDetails> acm) {
            this.acm = acm;
            return this;
        }

        public Builder acm(AcmDetails acm) {
            this.acm = Optional.ofNullable(acm);
            return this;
        }

        public GeoDetails build() {
            return new GeoDetails(type, controlArea, acm, additionalProperties);
        }
    }
}
