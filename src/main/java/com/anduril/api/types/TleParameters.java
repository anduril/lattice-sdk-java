/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TleParameters.Builder.class)
public final class TleParameters {
    private final Optional<Integer> ephemerisType;

    private final Optional<String> classificationType;

    private final Optional<Integer> noradCatId;

    private final Optional<Integer> elementSetNo;

    private final Optional<Integer> revAtEpoch;

    private final Optional<Double> bstar;

    private final Optional<Double> bterm;

    private final Optional<Double> meanMotionDot;

    private final Optional<Double> meanMotionDdot;

    private final Optional<Double> agom;

    private final Map<String, Object> additionalProperties;

    private TleParameters(
            Optional<Integer> ephemerisType,
            Optional<String> classificationType,
            Optional<Integer> noradCatId,
            Optional<Integer> elementSetNo,
            Optional<Integer> revAtEpoch,
            Optional<Double> bstar,
            Optional<Double> bterm,
            Optional<Double> meanMotionDot,
            Optional<Double> meanMotionDdot,
            Optional<Double> agom,
            Map<String, Object> additionalProperties) {
        this.ephemerisType = ephemerisType;
        this.classificationType = classificationType;
        this.noradCatId = noradCatId;
        this.elementSetNo = elementSetNo;
        this.revAtEpoch = revAtEpoch;
        this.bstar = bstar;
        this.bterm = bterm;
        this.meanMotionDot = meanMotionDot;
        this.meanMotionDdot = meanMotionDdot;
        this.agom = agom;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Integer specifying TLE ephemeris type
     */
    @JsonProperty("ephemerisType")
    public Optional<Integer> getEphemerisType() {
        return ephemerisType;
    }

    /**
     * @return User-defined free-text message classification/caveats of this TLE
     */
    @JsonProperty("classificationType")
    public Optional<String> getClassificationType() {
        return classificationType;
    }

    /**
     * @return Norad catalog number: integer up to nine digits.
     */
    @JsonProperty("noradCatId")
    public Optional<Integer> getNoradCatId() {
        return noradCatId;
    }

    @JsonProperty("elementSetNo")
    public Optional<Integer> getElementSetNo() {
        return elementSetNo;
    }

    /**
     * @return Optional: revolution number
     */
    @JsonProperty("revAtEpoch")
    public Optional<Integer> getRevAtEpoch() {
        return revAtEpoch;
    }

    /**
     * @return Drag parameter for SGP-4 in units 1 / Earth radii
     */
    @JsonProperty("bstar")
    public Optional<Double> getBstar() {
        return bstar;
    }

    /**
     * @return Drag parameter for SGP4-XP in units m^2 / kg
     */
    @JsonProperty("bterm")
    public Optional<Double> getBterm() {
        return bterm;
    }

    /**
     * @return First time derivative of mean motion in rev / day^2
     */
    @JsonProperty("meanMotionDot")
    public Optional<Double> getMeanMotionDot() {
        return meanMotionDot;
    }

    /**
     * @return Second time derivative of mean motion in rev / day^3. For use with SGP or PPT3.
     */
    @JsonProperty("meanMotionDdot")
    public Optional<Double> getMeanMotionDdot() {
        return meanMotionDdot;
    }

    /**
     * @return Solar radiation pressure coefficient A_gamma / m in m^2 / kg. For use with SGP4-XP.
     */
    @JsonProperty("agom")
    public Optional<Double> getAgom() {
        return agom;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TleParameters && equalTo((TleParameters) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TleParameters other) {
        return ephemerisType.equals(other.ephemerisType)
                && classificationType.equals(other.classificationType)
                && noradCatId.equals(other.noradCatId)
                && elementSetNo.equals(other.elementSetNo)
                && revAtEpoch.equals(other.revAtEpoch)
                && bstar.equals(other.bstar)
                && bterm.equals(other.bterm)
                && meanMotionDot.equals(other.meanMotionDot)
                && meanMotionDdot.equals(other.meanMotionDdot)
                && agom.equals(other.agom);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.ephemerisType,
                this.classificationType,
                this.noradCatId,
                this.elementSetNo,
                this.revAtEpoch,
                this.bstar,
                this.bterm,
                this.meanMotionDot,
                this.meanMotionDdot,
                this.agom);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> ephemerisType = Optional.empty();

        private Optional<String> classificationType = Optional.empty();

        private Optional<Integer> noradCatId = Optional.empty();

        private Optional<Integer> elementSetNo = Optional.empty();

        private Optional<Integer> revAtEpoch = Optional.empty();

        private Optional<Double> bstar = Optional.empty();

        private Optional<Double> bterm = Optional.empty();

        private Optional<Double> meanMotionDot = Optional.empty();

        private Optional<Double> meanMotionDdot = Optional.empty();

        private Optional<Double> agom = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TleParameters other) {
            ephemerisType(other.getEphemerisType());
            classificationType(other.getClassificationType());
            noradCatId(other.getNoradCatId());
            elementSetNo(other.getElementSetNo());
            revAtEpoch(other.getRevAtEpoch());
            bstar(other.getBstar());
            bterm(other.getBterm());
            meanMotionDot(other.getMeanMotionDot());
            meanMotionDdot(other.getMeanMotionDdot());
            agom(other.getAgom());
            return this;
        }

        /**
         * <p>Integer specifying TLE ephemeris type</p>
         */
        @JsonSetter(value = "ephemerisType", nulls = Nulls.SKIP)
        public Builder ephemerisType(Optional<Integer> ephemerisType) {
            this.ephemerisType = ephemerisType;
            return this;
        }

        public Builder ephemerisType(Integer ephemerisType) {
            this.ephemerisType = Optional.ofNullable(ephemerisType);
            return this;
        }

        /**
         * <p>User-defined free-text message classification/caveats of this TLE</p>
         */
        @JsonSetter(value = "classificationType", nulls = Nulls.SKIP)
        public Builder classificationType(Optional<String> classificationType) {
            this.classificationType = classificationType;
            return this;
        }

        public Builder classificationType(String classificationType) {
            this.classificationType = Optional.ofNullable(classificationType);
            return this;
        }

        /**
         * <p>Norad catalog number: integer up to nine digits.</p>
         */
        @JsonSetter(value = "noradCatId", nulls = Nulls.SKIP)
        public Builder noradCatId(Optional<Integer> noradCatId) {
            this.noradCatId = noradCatId;
            return this;
        }

        public Builder noradCatId(Integer noradCatId) {
            this.noradCatId = Optional.ofNullable(noradCatId);
            return this;
        }

        @JsonSetter(value = "elementSetNo", nulls = Nulls.SKIP)
        public Builder elementSetNo(Optional<Integer> elementSetNo) {
            this.elementSetNo = elementSetNo;
            return this;
        }

        public Builder elementSetNo(Integer elementSetNo) {
            this.elementSetNo = Optional.ofNullable(elementSetNo);
            return this;
        }

        /**
         * <p>Optional: revolution number</p>
         */
        @JsonSetter(value = "revAtEpoch", nulls = Nulls.SKIP)
        public Builder revAtEpoch(Optional<Integer> revAtEpoch) {
            this.revAtEpoch = revAtEpoch;
            return this;
        }

        public Builder revAtEpoch(Integer revAtEpoch) {
            this.revAtEpoch = Optional.ofNullable(revAtEpoch);
            return this;
        }

        /**
         * <p>Drag parameter for SGP-4 in units 1 / Earth radii</p>
         */
        @JsonSetter(value = "bstar", nulls = Nulls.SKIP)
        public Builder bstar(Optional<Double> bstar) {
            this.bstar = bstar;
            return this;
        }

        public Builder bstar(Double bstar) {
            this.bstar = Optional.ofNullable(bstar);
            return this;
        }

        /**
         * <p>Drag parameter for SGP4-XP in units m^2 / kg</p>
         */
        @JsonSetter(value = "bterm", nulls = Nulls.SKIP)
        public Builder bterm(Optional<Double> bterm) {
            this.bterm = bterm;
            return this;
        }

        public Builder bterm(Double bterm) {
            this.bterm = Optional.ofNullable(bterm);
            return this;
        }

        /**
         * <p>First time derivative of mean motion in rev / day^2</p>
         */
        @JsonSetter(value = "meanMotionDot", nulls = Nulls.SKIP)
        public Builder meanMotionDot(Optional<Double> meanMotionDot) {
            this.meanMotionDot = meanMotionDot;
            return this;
        }

        public Builder meanMotionDot(Double meanMotionDot) {
            this.meanMotionDot = Optional.ofNullable(meanMotionDot);
            return this;
        }

        /**
         * <p>Second time derivative of mean motion in rev / day^3. For use with SGP or PPT3.</p>
         */
        @JsonSetter(value = "meanMotionDdot", nulls = Nulls.SKIP)
        public Builder meanMotionDdot(Optional<Double> meanMotionDdot) {
            this.meanMotionDdot = meanMotionDdot;
            return this;
        }

        public Builder meanMotionDdot(Double meanMotionDdot) {
            this.meanMotionDdot = Optional.ofNullable(meanMotionDdot);
            return this;
        }

        /**
         * <p>Solar radiation pressure coefficient A_gamma / m in m^2 / kg. For use with SGP4-XP.</p>
         */
        @JsonSetter(value = "agom", nulls = Nulls.SKIP)
        public Builder agom(Optional<Double> agom) {
            this.agom = agom;
            return this;
        }

        public Builder agom(Double agom) {
            this.agom = Optional.ofNullable(agom);
            return this;
        }

        public TleParameters build() {
            return new TleParameters(
                    ephemerisType,
                    classificationType,
                    noradCatId,
                    elementSetNo,
                    revAtEpoch,
                    bstar,
                    bterm,
                    meanMotionDot,
                    meanMotionDdot,
                    agom,
                    additionalProperties);
        }
    }
}
