/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaskEntity.Builder.class)
public final class TaskEntity {
    private final Optional<Entity> entity;

    private final Optional<Boolean> snapshot;

    private final Map<String, Object> additionalProperties;

    private TaskEntity(Optional<Entity> entity, Optional<Boolean> snapshot, Map<String, Object> additionalProperties) {
        this.entity = entity;
        this.snapshot = snapshot;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The wrapped entity-manager entity.
     */
    @JsonProperty("entity")
    public Optional<Entity> getEntity() {
        return entity;
    }

    /**
     * @return Indicates that this entity was generated from a snapshot of a live entity.
     */
    @JsonProperty("snapshot")
    public Optional<Boolean> getSnapshot() {
        return snapshot;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaskEntity && equalTo((TaskEntity) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaskEntity other) {
        return entity.equals(other.entity) && snapshot.equals(other.snapshot);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.entity, this.snapshot);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Entity> entity = Optional.empty();

        private Optional<Boolean> snapshot = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaskEntity other) {
            entity(other.getEntity());
            snapshot(other.getSnapshot());
            return this;
        }

        /**
         * <p>The wrapped entity-manager entity.</p>
         */
        @JsonSetter(value = "entity", nulls = Nulls.SKIP)
        public Builder entity(Optional<Entity> entity) {
            this.entity = entity;
            return this;
        }

        public Builder entity(Entity entity) {
            this.entity = Optional.ofNullable(entity);
            return this;
        }

        /**
         * <p>Indicates that this entity was generated from a snapshot of a live entity.</p>
         */
        @JsonSetter(value = "snapshot", nulls = Nulls.SKIP)
        public Builder snapshot(Optional<Boolean> snapshot) {
            this.snapshot = snapshot;
            return this;
        }

        public Builder snapshot(Boolean snapshot) {
            this.snapshot = Optional.ofNullable(snapshot);
            return this;
        }

        public TaskEntity build() {
            return new TaskEntity(entity, snapshot, additionalProperties);
        }
    }
}
