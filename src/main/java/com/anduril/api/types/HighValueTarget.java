/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = HighValueTarget.Builder.class)
public final class HighValueTarget {
    private final Optional<Boolean> isHighValueTarget;

    private final Optional<Integer> targetPriority;

    private final Optional<List<HighValueTargetMatch>> targetMatches;

    private final Optional<Boolean> isHighPayoffTarget;

    private final Map<String, Object> additionalProperties;

    private HighValueTarget(
            Optional<Boolean> isHighValueTarget,
            Optional<Integer> targetPriority,
            Optional<List<HighValueTargetMatch>> targetMatches,
            Optional<Boolean> isHighPayoffTarget,
            Map<String, Object> additionalProperties) {
        this.isHighValueTarget = isHighValueTarget;
        this.targetPriority = targetPriority;
        this.targetMatches = targetMatches;
        this.isHighPayoffTarget = isHighPayoffTarget;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether the target matches any description from a high value target list.
     */
    @JsonProperty("isHighValueTarget")
    public Optional<Boolean> getIsHighValueTarget() {
        return isHighValueTarget;
    }

    /**
     * @return The priority associated with the target. If the target's description appears on multiple high value target lists,
     * the priority will be a reflection of the highest priority of all of those list's target description.
     * <p>A lower value indicates the target is of a higher priority, with 1 being the highest possible priority. A value of
     * 0 indicates there is no priority associated with this target.</p>
     */
    @JsonProperty("targetPriority")
    public Optional<Integer> getTargetPriority() {
        return targetPriority;
    }

    /**
     * @return All of the high value target descriptions that the target matches against.
     */
    @JsonProperty("targetMatches")
    public Optional<List<HighValueTargetMatch>> getTargetMatches() {
        return targetMatches;
    }

    /**
     * @return Indicates whether the target is a 'High Payoff Target'. Targets can be one or both of high value and high payoff.
     */
    @JsonProperty("isHighPayoffTarget")
    public Optional<Boolean> getIsHighPayoffTarget() {
        return isHighPayoffTarget;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof HighValueTarget && equalTo((HighValueTarget) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(HighValueTarget other) {
        return isHighValueTarget.equals(other.isHighValueTarget)
                && targetPriority.equals(other.targetPriority)
                && targetMatches.equals(other.targetMatches)
                && isHighPayoffTarget.equals(other.isHighPayoffTarget);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.isHighValueTarget, this.targetPriority, this.targetMatches, this.isHighPayoffTarget);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> isHighValueTarget = Optional.empty();

        private Optional<Integer> targetPriority = Optional.empty();

        private Optional<List<HighValueTargetMatch>> targetMatches = Optional.empty();

        private Optional<Boolean> isHighPayoffTarget = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(HighValueTarget other) {
            isHighValueTarget(other.getIsHighValueTarget());
            targetPriority(other.getTargetPriority());
            targetMatches(other.getTargetMatches());
            isHighPayoffTarget(other.getIsHighPayoffTarget());
            return this;
        }

        /**
         * <p>Indicates whether the target matches any description from a high value target list.</p>
         */
        @JsonSetter(value = "isHighValueTarget", nulls = Nulls.SKIP)
        public Builder isHighValueTarget(Optional<Boolean> isHighValueTarget) {
            this.isHighValueTarget = isHighValueTarget;
            return this;
        }

        public Builder isHighValueTarget(Boolean isHighValueTarget) {
            this.isHighValueTarget = Optional.ofNullable(isHighValueTarget);
            return this;
        }

        /**
         * <p>The priority associated with the target. If the target's description appears on multiple high value target lists,
         * the priority will be a reflection of the highest priority of all of those list's target description.</p>
         * <p>A lower value indicates the target is of a higher priority, with 1 being the highest possible priority. A value of
         * 0 indicates there is no priority associated with this target.</p>
         */
        @JsonSetter(value = "targetPriority", nulls = Nulls.SKIP)
        public Builder targetPriority(Optional<Integer> targetPriority) {
            this.targetPriority = targetPriority;
            return this;
        }

        public Builder targetPriority(Integer targetPriority) {
            this.targetPriority = Optional.ofNullable(targetPriority);
            return this;
        }

        /**
         * <p>All of the high value target descriptions that the target matches against.</p>
         */
        @JsonSetter(value = "targetMatches", nulls = Nulls.SKIP)
        public Builder targetMatches(Optional<List<HighValueTargetMatch>> targetMatches) {
            this.targetMatches = targetMatches;
            return this;
        }

        public Builder targetMatches(List<HighValueTargetMatch> targetMatches) {
            this.targetMatches = Optional.ofNullable(targetMatches);
            return this;
        }

        /**
         * <p>Indicates whether the target is a 'High Payoff Target'. Targets can be one or both of high value and high payoff.</p>
         */
        @JsonSetter(value = "isHighPayoffTarget", nulls = Nulls.SKIP)
        public Builder isHighPayoffTarget(Optional<Boolean> isHighPayoffTarget) {
            this.isHighPayoffTarget = isHighPayoffTarget;
            return this;
        }

        public Builder isHighPayoffTarget(Boolean isHighPayoffTarget) {
            this.isHighPayoffTarget = Optional.ofNullable(isHighPayoffTarget);
            return this;
        }

        public HighValueTarget build() {
            return new HighValueTarget(
                    isHighValueTarget, targetPriority, targetMatches, isHighPayoffTarget, additionalProperties);
        }
    }
}
