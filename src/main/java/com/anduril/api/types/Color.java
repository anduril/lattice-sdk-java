/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Color.Builder.class)
public final class Color {
    private final Optional<Float> red;

    private final Optional<Float> green;

    private final Optional<Float> blue;

    private final Optional<Float> alpha;

    private final Map<String, Object> additionalProperties;

    private Color(
            Optional<Float> red,
            Optional<Float> green,
            Optional<Float> blue,
            Optional<Float> alpha,
            Map<String, Object> additionalProperties) {
        this.red = red;
        this.green = green;
        this.blue = blue;
        this.alpha = alpha;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The amount of red in the color as a value in the interval [0, 1].
     */
    @JsonProperty("red")
    public Optional<Float> getRed() {
        return red;
    }

    /**
     * @return The amount of green in the color as a value in the interval [0, 1].
     */
    @JsonProperty("green")
    public Optional<Float> getGreen() {
        return green;
    }

    /**
     * @return The amount of blue in the color as a value in the interval [0, 1].
     */
    @JsonProperty("blue")
    public Optional<Float> getBlue() {
        return blue;
    }

    /**
     * @return The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     * <p><code>pixel color = alpha * (this color) + (1.0 - alpha) * (background color)</code></p>
     * <p>This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color. This
     * uses a wrapper message rather than a simple float scalar so that it is
     * possible to distinguish between a default value and the value being unset.
     * If omitted, this color object is rendered as a solid color
     * (as if the alpha value had been explicitly given a value of 1.0).</p>
     */
    @JsonProperty("alpha")
    public Optional<Float> getAlpha() {
        return alpha;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Color && equalTo((Color) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Color other) {
        return red.equals(other.red)
                && green.equals(other.green)
                && blue.equals(other.blue)
                && alpha.equals(other.alpha);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.red, this.green, this.blue, this.alpha);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Float> red = Optional.empty();

        private Optional<Float> green = Optional.empty();

        private Optional<Float> blue = Optional.empty();

        private Optional<Float> alpha = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Color other) {
            red(other.getRed());
            green(other.getGreen());
            blue(other.getBlue());
            alpha(other.getAlpha());
            return this;
        }

        /**
         * <p>The amount of red in the color as a value in the interval [0, 1].</p>
         */
        @JsonSetter(value = "red", nulls = Nulls.SKIP)
        public Builder red(Optional<Float> red) {
            this.red = red;
            return this;
        }

        public Builder red(Float red) {
            this.red = Optional.ofNullable(red);
            return this;
        }

        /**
         * <p>The amount of green in the color as a value in the interval [0, 1].</p>
         */
        @JsonSetter(value = "green", nulls = Nulls.SKIP)
        public Builder green(Optional<Float> green) {
            this.green = green;
            return this;
        }

        public Builder green(Float green) {
            this.green = Optional.ofNullable(green);
            return this;
        }

        /**
         * <p>The amount of blue in the color as a value in the interval [0, 1].</p>
         */
        @JsonSetter(value = "blue", nulls = Nulls.SKIP)
        public Builder blue(Optional<Float> blue) {
            this.blue = blue;
            return this;
        }

        public Builder blue(Float blue) {
            this.blue = Optional.ofNullable(blue);
            return this;
        }

        /**
         * <p>The fraction of this color that should be applied to the pixel. That is,
         * the final pixel color is defined by the equation:</p>
         * <p><code>pixel color = alpha * (this color) + (1.0 - alpha) * (background color)</code></p>
         * <p>This means that a value of 1.0 corresponds to a solid color, whereas
         * a value of 0.0 corresponds to a completely transparent color. This
         * uses a wrapper message rather than a simple float scalar so that it is
         * possible to distinguish between a default value and the value being unset.
         * If omitted, this color object is rendered as a solid color
         * (as if the alpha value had been explicitly given a value of 1.0).</p>
         */
        @JsonSetter(value = "alpha", nulls = Nulls.SKIP)
        public Builder alpha(Optional<Float> alpha) {
            this.alpha = alpha;
            return this;
        }

        public Builder alpha(Float alpha) {
            this.alpha = Optional.ofNullable(alpha);
            return this;
        }

        public Color build() {
            return new Color(red, green, blue, alpha, additionalProperties);
        }
    }
}
