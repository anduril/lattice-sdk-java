/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Provenance.Builder.class)
public final class Provenance {
    private final Optional<String> integrationName;

    private final Optional<String> dataType;

    private final Optional<String> sourceId;

    private final Optional<OffsetDateTime> sourceUpdateTime;

    private final Optional<String> sourceDescription;

    private final Map<String, Object> additionalProperties;

    private Provenance(
            Optional<String> integrationName,
            Optional<String> dataType,
            Optional<String> sourceId,
            Optional<OffsetDateTime> sourceUpdateTime,
            Optional<String> sourceDescription,
            Map<String, Object> additionalProperties) {
        this.integrationName = integrationName;
        this.dataType = dataType;
        this.sourceId = sourceId;
        this.sourceUpdateTime = sourceUpdateTime;
        this.sourceDescription = sourceDescription;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Name of the integration that produced this entity
     */
    @JsonProperty("integrationName")
    public Optional<String> getIntegrationName() {
        return integrationName;
    }

    /**
     * @return Source data type of this entity. Examples: ADSB, Link16, etc.
     */
    @JsonProperty("dataType")
    public Optional<String> getDataType() {
        return dataType;
    }

    /**
     * @return An ID that allows an element from a source to be uniquely identified
     */
    @JsonProperty("sourceId")
    public Optional<String> getSourceId() {
        return sourceId;
    }

    /**
     * @return The time, according to the source system, that the data in the entity was last modified. Generally, this should
     * be the time that the source-reported time of validity of the data in the entity. This field must be
     * updated with every change to the entity or else Entity Manager will discard the update.
     */
    @JsonProperty("sourceUpdateTime")
    public Optional<OffsetDateTime> getSourceUpdateTime() {
        return sourceUpdateTime;
    }

    /**
     * @return Description of the modification source. In the case of a user this is the email address.
     */
    @JsonProperty("sourceDescription")
    public Optional<String> getSourceDescription() {
        return sourceDescription;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Provenance && equalTo((Provenance) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Provenance other) {
        return integrationName.equals(other.integrationName)
                && dataType.equals(other.dataType)
                && sourceId.equals(other.sourceId)
                && sourceUpdateTime.equals(other.sourceUpdateTime)
                && sourceDescription.equals(other.sourceDescription);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.integrationName, this.dataType, this.sourceId, this.sourceUpdateTime, this.sourceDescription);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> integrationName = Optional.empty();

        private Optional<String> dataType = Optional.empty();

        private Optional<String> sourceId = Optional.empty();

        private Optional<OffsetDateTime> sourceUpdateTime = Optional.empty();

        private Optional<String> sourceDescription = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Provenance other) {
            integrationName(other.getIntegrationName());
            dataType(other.getDataType());
            sourceId(other.getSourceId());
            sourceUpdateTime(other.getSourceUpdateTime());
            sourceDescription(other.getSourceDescription());
            return this;
        }

        /**
         * <p>Name of the integration that produced this entity</p>
         */
        @JsonSetter(value = "integrationName", nulls = Nulls.SKIP)
        public Builder integrationName(Optional<String> integrationName) {
            this.integrationName = integrationName;
            return this;
        }

        public Builder integrationName(String integrationName) {
            this.integrationName = Optional.ofNullable(integrationName);
            return this;
        }

        /**
         * <p>Source data type of this entity. Examples: ADSB, Link16, etc.</p>
         */
        @JsonSetter(value = "dataType", nulls = Nulls.SKIP)
        public Builder dataType(Optional<String> dataType) {
            this.dataType = dataType;
            return this;
        }

        public Builder dataType(String dataType) {
            this.dataType = Optional.ofNullable(dataType);
            return this;
        }

        /**
         * <p>An ID that allows an element from a source to be uniquely identified</p>
         */
        @JsonSetter(value = "sourceId", nulls = Nulls.SKIP)
        public Builder sourceId(Optional<String> sourceId) {
            this.sourceId = sourceId;
            return this;
        }

        public Builder sourceId(String sourceId) {
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        /**
         * <p>The time, according to the source system, that the data in the entity was last modified. Generally, this should
         * be the time that the source-reported time of validity of the data in the entity. This field must be
         * updated with every change to the entity or else Entity Manager will discard the update.</p>
         */
        @JsonSetter(value = "sourceUpdateTime", nulls = Nulls.SKIP)
        public Builder sourceUpdateTime(Optional<OffsetDateTime> sourceUpdateTime) {
            this.sourceUpdateTime = sourceUpdateTime;
            return this;
        }

        public Builder sourceUpdateTime(OffsetDateTime sourceUpdateTime) {
            this.sourceUpdateTime = Optional.ofNullable(sourceUpdateTime);
            return this;
        }

        /**
         * <p>Description of the modification source. In the case of a user this is the email address.</p>
         */
        @JsonSetter(value = "sourceDescription", nulls = Nulls.SKIP)
        public Builder sourceDescription(Optional<String> sourceDescription) {
            this.sourceDescription = sourceDescription;
            return this;
        }

        public Builder sourceDescription(String sourceDescription) {
            this.sourceDescription = Optional.ofNullable(sourceDescription);
            return this;
        }

        public Provenance build() {
            return new Provenance(
                    integrationName, dataType, sourceId, sourceUpdateTime, sourceDescription, additionalProperties);
        }
    }
}
