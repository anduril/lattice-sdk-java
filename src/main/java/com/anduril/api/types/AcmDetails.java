/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AcmDetails.Builder.class)
public final class AcmDetails {
    private final Optional<AcmDetailsAcmType> acmType;

    private final Optional<String> acmDescription;

    private final Map<String, Object> additionalProperties;

    private AcmDetails(
            Optional<AcmDetailsAcmType> acmType,
            Optional<String> acmDescription,
            Map<String, Object> additionalProperties) {
        this.acmType = acmType;
        this.acmDescription = acmDescription;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("acmType")
    public Optional<AcmDetailsAcmType> getAcmType() {
        return acmType;
    }

    /**
     * @return Used for loosely typed associations, such as assignment to a specific fires unit.
     * Limit to 150 characters.
     */
    @JsonProperty("acmDescription")
    public Optional<String> getAcmDescription() {
        return acmDescription;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AcmDetails && equalTo((AcmDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AcmDetails other) {
        return acmType.equals(other.acmType) && acmDescription.equals(other.acmDescription);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.acmType, this.acmDescription);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AcmDetailsAcmType> acmType = Optional.empty();

        private Optional<String> acmDescription = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AcmDetails other) {
            acmType(other.getAcmType());
            acmDescription(other.getAcmDescription());
            return this;
        }

        @JsonSetter(value = "acmType", nulls = Nulls.SKIP)
        public Builder acmType(Optional<AcmDetailsAcmType> acmType) {
            this.acmType = acmType;
            return this;
        }

        public Builder acmType(AcmDetailsAcmType acmType) {
            this.acmType = Optional.ofNullable(acmType);
            return this;
        }

        /**
         * <p>Used for loosely typed associations, such as assignment to a specific fires unit.
         * Limit to 150 characters.</p>
         */
        @JsonSetter(value = "acmDescription", nulls = Nulls.SKIP)
        public Builder acmDescription(Optional<String> acmDescription) {
            this.acmDescription = acmDescription;
            return this;
        }

        public Builder acmDescription(String acmDescription) {
            this.acmDescription = Optional.ofNullable(acmDescription);
            return this;
        }

        public AcmDetails build() {
            return new AcmDetails(acmType, acmDescription, additionalProperties);
        }
    }
}
