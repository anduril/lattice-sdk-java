/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GeoPolygon.Builder.class)
public final class GeoPolygon {
    private final Optional<List<LinearRing>> rings;

    private final Optional<Boolean> isRectangle;

    private final Map<String, Object> additionalProperties;

    private GeoPolygon(
            Optional<List<LinearRing>> rings, Optional<Boolean> isRectangle, Map<String, Object> additionalProperties) {
        this.rings = rings;
        this.isRectangle = isRectangle;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return An array of LinearRings where the first item is the exterior ring and subsequent items are interior rings.
     */
    @JsonProperty("rings")
    public Optional<List<LinearRing>> getRings() {
        return rings;
    }

    /**
     * @return An extension hint that this polygon is a rectangle. When true this implies several things:
     * <ul>
     * <li>exactly 1 linear ring with 5 points (starting corner, 3 other corners and start again)</li>
     * <li>each point has the same altitude corresponding with the plane of the rectangle</li>
     * <li>each point has the same height (either all present and equal, or all not present)</li>
     * </ul>
     */
    @JsonProperty("isRectangle")
    public Optional<Boolean> getIsRectangle() {
        return isRectangle;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GeoPolygon && equalTo((GeoPolygon) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GeoPolygon other) {
        return rings.equals(other.rings) && isRectangle.equals(other.isRectangle);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.rings, this.isRectangle);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<LinearRing>> rings = Optional.empty();

        private Optional<Boolean> isRectangle = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GeoPolygon other) {
            rings(other.getRings());
            isRectangle(other.getIsRectangle());
            return this;
        }

        /**
         * <p>An array of LinearRings where the first item is the exterior ring and subsequent items are interior rings.</p>
         */
        @JsonSetter(value = "rings", nulls = Nulls.SKIP)
        public Builder rings(Optional<List<LinearRing>> rings) {
            this.rings = rings;
            return this;
        }

        public Builder rings(List<LinearRing> rings) {
            this.rings = Optional.ofNullable(rings);
            return this;
        }

        /**
         * <p>An extension hint that this polygon is a rectangle. When true this implies several things:</p>
         * <ul>
         * <li>exactly 1 linear ring with 5 points (starting corner, 3 other corners and start again)</li>
         * <li>each point has the same altitude corresponding with the plane of the rectangle</li>
         * <li>each point has the same height (either all present and equal, or all not present)</li>
         * </ul>
         */
        @JsonSetter(value = "isRectangle", nulls = Nulls.SKIP)
        public Builder isRectangle(Optional<Boolean> isRectangle) {
            this.isRectangle = isRectangle;
            return this;
        }

        public Builder isRectangle(Boolean isRectangle) {
            this.isRectangle = Optional.ofNullable(isRectangle);
            return this;
        }

        public GeoPolygon build() {
            return new GeoPolygon(rings, isRectangle, additionalProperties);
        }
    }
}
