/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CorrelationMetadata.Builder.class)
public final class CorrelationMetadata {
    private final Optional<Provenance> provenance;

    private final Optional<CorrelationMetadataReplicationMode> replicationMode;

    private final Optional<CorrelationMetadataType> type;

    private final Map<String, Object> additionalProperties;

    private CorrelationMetadata(
            Optional<Provenance> provenance,
            Optional<CorrelationMetadataReplicationMode> replicationMode,
            Optional<CorrelationMetadataType> type,
            Map<String, Object> additionalProperties) {
        this.provenance = provenance;
        this.replicationMode = replicationMode;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Who or what added this entity to the (de)correlation.
     */
    @JsonProperty("provenance")
    public Optional<Provenance> getProvenance() {
        return provenance;
    }

    /**
     * @return Indicates how the correlation will be distributed. Because a correlation is composed of
     * multiple secondaries, each of which may have been correlated with different replication
     * modes, the distribution of the correlation is composed of distributions of the individual
     * entities within the correlation set.
     * For example, if there are two secondary entities A and B correlated against a primary C,
     * with A having been correlated globally and B having been correlated locally, then the
     * correlation set that is distributed globally than what is known locally in the node.
     */
    @JsonProperty("replicationMode")
    public Optional<CorrelationMetadataReplicationMode> getReplicationMode() {
        return replicationMode;
    }

    /**
     * @return What type of (de)correlation was this entity added with.
     */
    @JsonProperty("type")
    public Optional<CorrelationMetadataType> getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CorrelationMetadata && equalTo((CorrelationMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CorrelationMetadata other) {
        return provenance.equals(other.provenance)
                && replicationMode.equals(other.replicationMode)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.provenance, this.replicationMode, this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Provenance> provenance = Optional.empty();

        private Optional<CorrelationMetadataReplicationMode> replicationMode = Optional.empty();

        private Optional<CorrelationMetadataType> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CorrelationMetadata other) {
            provenance(other.getProvenance());
            replicationMode(other.getReplicationMode());
            type(other.getType());
            return this;
        }

        /**
         * <p>Who or what added this entity to the (de)correlation.</p>
         */
        @JsonSetter(value = "provenance", nulls = Nulls.SKIP)
        public Builder provenance(Optional<Provenance> provenance) {
            this.provenance = provenance;
            return this;
        }

        public Builder provenance(Provenance provenance) {
            this.provenance = Optional.ofNullable(provenance);
            return this;
        }

        /**
         * <p>Indicates how the correlation will be distributed. Because a correlation is composed of
         * multiple secondaries, each of which may have been correlated with different replication
         * modes, the distribution of the correlation is composed of distributions of the individual
         * entities within the correlation set.
         * For example, if there are two secondary entities A and B correlated against a primary C,
         * with A having been correlated globally and B having been correlated locally, then the
         * correlation set that is distributed globally than what is known locally in the node.</p>
         */
        @JsonSetter(value = "replicationMode", nulls = Nulls.SKIP)
        public Builder replicationMode(Optional<CorrelationMetadataReplicationMode> replicationMode) {
            this.replicationMode = replicationMode;
            return this;
        }

        public Builder replicationMode(CorrelationMetadataReplicationMode replicationMode) {
            this.replicationMode = Optional.ofNullable(replicationMode);
            return this;
        }

        /**
         * <p>What type of (de)correlation was this entity added with.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<CorrelationMetadataType> type) {
            this.type = type;
            return this;
        }

        public Builder type(CorrelationMetadataType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public CorrelationMetadata build() {
            return new CorrelationMetadata(provenance, replicationMode, type, additionalProperties);
        }
    }
}
