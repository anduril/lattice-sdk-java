/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GeoEllipse.Builder.class)
public final class GeoEllipse {
    private final Optional<Double> semiMajorAxisM;

    private final Optional<Double> semiMinorAxisM;

    private final Optional<Double> orientationD;

    private final Optional<Double> heightM;

    private final Map<String, Object> additionalProperties;

    private GeoEllipse(
            Optional<Double> semiMajorAxisM,
            Optional<Double> semiMinorAxisM,
            Optional<Double> orientationD,
            Optional<Double> heightM,
            Map<String, Object> additionalProperties) {
        this.semiMajorAxisM = semiMajorAxisM;
        this.semiMinorAxisM = semiMinorAxisM;
        this.orientationD = orientationD;
        this.heightM = heightM;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Defines the distance from the center point of the ellipse to the furthest distance on the perimeter in meters.
     */
    @JsonProperty("semiMajorAxisM")
    public Optional<Double> getSemiMajorAxisM() {
        return semiMajorAxisM;
    }

    /**
     * @return Defines the distance from the center point of the ellipse to the shortest distance on the perimeter in meters.
     */
    @JsonProperty("semiMinorAxisM")
    public Optional<Double> getSemiMinorAxisM() {
        return semiMinorAxisM;
    }

    /**
     * @return The orientation of the semi-major relative to true north in degrees from clockwise: 0-180 due to symmetry across the semi-minor axis.
     */
    @JsonProperty("orientationD")
    public Optional<Double> getOrientationD() {
        return orientationD;
    }

    /**
     * @return Optional height above entity position to extrude in meters. A non-zero value creates an elliptic cylinder
     */
    @JsonProperty("heightM")
    public Optional<Double> getHeightM() {
        return heightM;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GeoEllipse && equalTo((GeoEllipse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GeoEllipse other) {
        return semiMajorAxisM.equals(other.semiMajorAxisM)
                && semiMinorAxisM.equals(other.semiMinorAxisM)
                && orientationD.equals(other.orientationD)
                && heightM.equals(other.heightM);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.semiMajorAxisM, this.semiMinorAxisM, this.orientationD, this.heightM);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> semiMajorAxisM = Optional.empty();

        private Optional<Double> semiMinorAxisM = Optional.empty();

        private Optional<Double> orientationD = Optional.empty();

        private Optional<Double> heightM = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GeoEllipse other) {
            semiMajorAxisM(other.getSemiMajorAxisM());
            semiMinorAxisM(other.getSemiMinorAxisM());
            orientationD(other.getOrientationD());
            heightM(other.getHeightM());
            return this;
        }

        /**
         * <p>Defines the distance from the center point of the ellipse to the furthest distance on the perimeter in meters.</p>
         */
        @JsonSetter(value = "semiMajorAxisM", nulls = Nulls.SKIP)
        public Builder semiMajorAxisM(Optional<Double> semiMajorAxisM) {
            this.semiMajorAxisM = semiMajorAxisM;
            return this;
        }

        public Builder semiMajorAxisM(Double semiMajorAxisM) {
            this.semiMajorAxisM = Optional.ofNullable(semiMajorAxisM);
            return this;
        }

        /**
         * <p>Defines the distance from the center point of the ellipse to the shortest distance on the perimeter in meters.</p>
         */
        @JsonSetter(value = "semiMinorAxisM", nulls = Nulls.SKIP)
        public Builder semiMinorAxisM(Optional<Double> semiMinorAxisM) {
            this.semiMinorAxisM = semiMinorAxisM;
            return this;
        }

        public Builder semiMinorAxisM(Double semiMinorAxisM) {
            this.semiMinorAxisM = Optional.ofNullable(semiMinorAxisM);
            return this;
        }

        /**
         * <p>The orientation of the semi-major relative to true north in degrees from clockwise: 0-180 due to symmetry across the semi-minor axis.</p>
         */
        @JsonSetter(value = "orientationD", nulls = Nulls.SKIP)
        public Builder orientationD(Optional<Double> orientationD) {
            this.orientationD = orientationD;
            return this;
        }

        public Builder orientationD(Double orientationD) {
            this.orientationD = Optional.ofNullable(orientationD);
            return this;
        }

        /**
         * <p>Optional height above entity position to extrude in meters. A non-zero value creates an elliptic cylinder</p>
         */
        @JsonSetter(value = "heightM", nulls = Nulls.SKIP)
        public Builder heightM(Optional<Double> heightM) {
            this.heightM = heightM;
            return this;
        }

        public Builder heightM(Double heightM) {
            this.heightM = Optional.ofNullable(heightM);
            return this;
        }

        public GeoEllipse build() {
            return new GeoEllipse(semiMajorAxisM, semiMinorAxisM, orientationD, heightM, additionalProperties);
        }
    }
}
