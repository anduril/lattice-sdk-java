/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = System.Builder.class)
public final class System {
    private final Optional<String> serviceName;

    private final Optional<String> entityId;

    private final Optional<Boolean> managesOwnScheduling;

    private final Map<String, Object> additionalProperties;

    private System(
            Optional<String> serviceName,
            Optional<String> entityId,
            Optional<Boolean> managesOwnScheduling,
            Map<String, Object> additionalProperties) {
        this.serviceName = serviceName;
        this.entityId = entityId;
        this.managesOwnScheduling = managesOwnScheduling;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Name of the service associated with this System.
     */
    @JsonProperty("serviceName")
    public Optional<String> getServiceName() {
        return serviceName;
    }

    /**
     * @return The Entity ID of the System.
     */
    @JsonProperty("entityId")
    public Optional<String> getEntityId() {
        return entityId;
    }

    /**
     * @return Whether the System Principal (for example, an Asset) can own scheduling.
     * This means we bypass manager-owned scheduling and defer to the system
     * Principal to handle scheduling and give us status updates for the Task.
     * Regardless of the value defined by the client, the Task Manager will
     * determine and set this value appropriately.
     */
    @JsonProperty("managesOwnScheduling")
    public Optional<Boolean> getManagesOwnScheduling() {
        return managesOwnScheduling;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof System && equalTo((System) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(System other) {
        return serviceName.equals(other.serviceName)
                && entityId.equals(other.entityId)
                && managesOwnScheduling.equals(other.managesOwnScheduling);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.serviceName, this.entityId, this.managesOwnScheduling);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> serviceName = Optional.empty();

        private Optional<String> entityId = Optional.empty();

        private Optional<Boolean> managesOwnScheduling = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(System other) {
            serviceName(other.getServiceName());
            entityId(other.getEntityId());
            managesOwnScheduling(other.getManagesOwnScheduling());
            return this;
        }

        /**
         * <p>Name of the service associated with this System.</p>
         */
        @JsonSetter(value = "serviceName", nulls = Nulls.SKIP)
        public Builder serviceName(Optional<String> serviceName) {
            this.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            this.serviceName = Optional.ofNullable(serviceName);
            return this;
        }

        /**
         * <p>The Entity ID of the System.</p>
         */
        @JsonSetter(value = "entityId", nulls = Nulls.SKIP)
        public Builder entityId(Optional<String> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(String entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        /**
         * <p>Whether the System Principal (for example, an Asset) can own scheduling.
         * This means we bypass manager-owned scheduling and defer to the system
         * Principal to handle scheduling and give us status updates for the Task.
         * Regardless of the value defined by the client, the Task Manager will
         * determine and set this value appropriately.</p>
         */
        @JsonSetter(value = "managesOwnScheduling", nulls = Nulls.SKIP)
        public Builder managesOwnScheduling(Optional<Boolean> managesOwnScheduling) {
            this.managesOwnScheduling = managesOwnScheduling;
            return this;
        }

        public Builder managesOwnScheduling(Boolean managesOwnScheduling) {
            this.managesOwnScheduling = Optional.ofNullable(managesOwnScheduling);
            return this;
        }

        public System build() {
            return new System(serviceName, entityId, managesOwnScheduling, additionalProperties);
        }
    }
}
