/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PowerLevel.Builder.class)
public final class PowerLevel {
    private final Optional<Float> capacity;

    private final Optional<Float> remaining;

    private final Optional<Float> percentRemaining;

    private final Optional<Double> voltage;

    private final Optional<Double> currentAmps;

    private final Optional<Double> runTimeToEmptyMins;

    private final Optional<Double> consumptionRateLPerS;

    private final Map<String, Object> additionalProperties;

    private PowerLevel(
            Optional<Float> capacity,
            Optional<Float> remaining,
            Optional<Float> percentRemaining,
            Optional<Double> voltage,
            Optional<Double> currentAmps,
            Optional<Double> runTimeToEmptyMins,
            Optional<Double> consumptionRateLPerS,
            Map<String, Object> additionalProperties) {
        this.capacity = capacity;
        this.remaining = remaining;
        this.percentRemaining = percentRemaining;
        this.voltage = voltage;
        this.currentAmps = currentAmps;
        this.runTimeToEmptyMins = runTimeToEmptyMins;
        this.consumptionRateLPerS = consumptionRateLPerS;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Total power capacity of the system.
     */
    @JsonProperty("capacity")
    public Optional<Float> getCapacity() {
        return capacity;
    }

    /**
     * @return Remaining power capacity of the system.
     */
    @JsonProperty("remaining")
    public Optional<Float> getRemaining() {
        return remaining;
    }

    /**
     * @return Percent of power remaining.
     */
    @JsonProperty("percentRemaining")
    public Optional<Float> getPercentRemaining() {
        return percentRemaining;
    }

    /**
     * @return Voltage of the power source subsystem, as reported by the power source. If the source does not report this value
     * this field will be null.
     */
    @JsonProperty("voltage")
    public Optional<Double> getVoltage() {
        return voltage;
    }

    /**
     * @return Current in amps of the power source subsystem, as reported by the power source. If the source does not
     * report this value this field will be null.
     */
    @JsonProperty("currentAmps")
    public Optional<Double> getCurrentAmps() {
        return currentAmps;
    }

    /**
     * @return Estimated minutes until empty. Calculated with consumption at the moment, as reported by the power source. If the source does not
     * report this value this field will be null.
     */
    @JsonProperty("runTimeToEmptyMins")
    public Optional<Double> getRunTimeToEmptyMins() {
        return runTimeToEmptyMins;
    }

    /**
     * @return Fuel consumption rate in liters per second.
     */
    @JsonProperty("consumptionRateLPerS")
    public Optional<Double> getConsumptionRateLPerS() {
        return consumptionRateLPerS;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PowerLevel && equalTo((PowerLevel) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PowerLevel other) {
        return capacity.equals(other.capacity)
                && remaining.equals(other.remaining)
                && percentRemaining.equals(other.percentRemaining)
                && voltage.equals(other.voltage)
                && currentAmps.equals(other.currentAmps)
                && runTimeToEmptyMins.equals(other.runTimeToEmptyMins)
                && consumptionRateLPerS.equals(other.consumptionRateLPerS);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.capacity,
                this.remaining,
                this.percentRemaining,
                this.voltage,
                this.currentAmps,
                this.runTimeToEmptyMins,
                this.consumptionRateLPerS);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Float> capacity = Optional.empty();

        private Optional<Float> remaining = Optional.empty();

        private Optional<Float> percentRemaining = Optional.empty();

        private Optional<Double> voltage = Optional.empty();

        private Optional<Double> currentAmps = Optional.empty();

        private Optional<Double> runTimeToEmptyMins = Optional.empty();

        private Optional<Double> consumptionRateLPerS = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PowerLevel other) {
            capacity(other.getCapacity());
            remaining(other.getRemaining());
            percentRemaining(other.getPercentRemaining());
            voltage(other.getVoltage());
            currentAmps(other.getCurrentAmps());
            runTimeToEmptyMins(other.getRunTimeToEmptyMins());
            consumptionRateLPerS(other.getConsumptionRateLPerS());
            return this;
        }

        /**
         * <p>Total power capacity of the system.</p>
         */
        @JsonSetter(value = "capacity", nulls = Nulls.SKIP)
        public Builder capacity(Optional<Float> capacity) {
            this.capacity = capacity;
            return this;
        }

        public Builder capacity(Float capacity) {
            this.capacity = Optional.ofNullable(capacity);
            return this;
        }

        /**
         * <p>Remaining power capacity of the system.</p>
         */
        @JsonSetter(value = "remaining", nulls = Nulls.SKIP)
        public Builder remaining(Optional<Float> remaining) {
            this.remaining = remaining;
            return this;
        }

        public Builder remaining(Float remaining) {
            this.remaining = Optional.ofNullable(remaining);
            return this;
        }

        /**
         * <p>Percent of power remaining.</p>
         */
        @JsonSetter(value = "percentRemaining", nulls = Nulls.SKIP)
        public Builder percentRemaining(Optional<Float> percentRemaining) {
            this.percentRemaining = percentRemaining;
            return this;
        }

        public Builder percentRemaining(Float percentRemaining) {
            this.percentRemaining = Optional.ofNullable(percentRemaining);
            return this;
        }

        /**
         * <p>Voltage of the power source subsystem, as reported by the power source. If the source does not report this value
         * this field will be null.</p>
         */
        @JsonSetter(value = "voltage", nulls = Nulls.SKIP)
        public Builder voltage(Optional<Double> voltage) {
            this.voltage = voltage;
            return this;
        }

        public Builder voltage(Double voltage) {
            this.voltage = Optional.ofNullable(voltage);
            return this;
        }

        /**
         * <p>Current in amps of the power source subsystem, as reported by the power source. If the source does not
         * report this value this field will be null.</p>
         */
        @JsonSetter(value = "currentAmps", nulls = Nulls.SKIP)
        public Builder currentAmps(Optional<Double> currentAmps) {
            this.currentAmps = currentAmps;
            return this;
        }

        public Builder currentAmps(Double currentAmps) {
            this.currentAmps = Optional.ofNullable(currentAmps);
            return this;
        }

        /**
         * <p>Estimated minutes until empty. Calculated with consumption at the moment, as reported by the power source. If the source does not
         * report this value this field will be null.</p>
         */
        @JsonSetter(value = "runTimeToEmptyMins", nulls = Nulls.SKIP)
        public Builder runTimeToEmptyMins(Optional<Double> runTimeToEmptyMins) {
            this.runTimeToEmptyMins = runTimeToEmptyMins;
            return this;
        }

        public Builder runTimeToEmptyMins(Double runTimeToEmptyMins) {
            this.runTimeToEmptyMins = Optional.ofNullable(runTimeToEmptyMins);
            return this;
        }

        /**
         * <p>Fuel consumption rate in liters per second.</p>
         */
        @JsonSetter(value = "consumptionRateLPerS", nulls = Nulls.SKIP)
        public Builder consumptionRateLPerS(Optional<Double> consumptionRateLPerS) {
            this.consumptionRateLPerS = consumptionRateLPerS;
            return this;
        }

        public Builder consumptionRateLPerS(Double consumptionRateLPerS) {
            this.consumptionRateLPerS = Optional.ofNullable(consumptionRateLPerS);
            return this;
        }

        public PowerLevel build() {
            return new PowerLevel(
                    capacity,
                    remaining,
                    percentRemaining,
                    voltage,
                    currentAmps,
                    runTimeToEmptyMins,
                    consumptionRateLPerS,
                    additionalProperties);
        }
    }
}
