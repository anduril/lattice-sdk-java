/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RangeRings.Builder.class)
public final class RangeRings {
    private final Optional<Double> minDistanceM;

    private final Optional<Double> maxDistanceM;

    private final Optional<Integer> ringCount;

    private final Optional<Color> ringLineColor;

    private final Map<String, Object> additionalProperties;

    private RangeRings(
            Optional<Double> minDistanceM,
            Optional<Double> maxDistanceM,
            Optional<Integer> ringCount,
            Optional<Color> ringLineColor,
            Map<String, Object> additionalProperties) {
        this.minDistanceM = minDistanceM;
        this.maxDistanceM = maxDistanceM;
        this.ringCount = ringCount;
        this.ringLineColor = ringLineColor;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The minimum range ring distance, specified in meters.
     */
    @JsonProperty("minDistanceM")
    public Optional<Double> getMinDistanceM() {
        return minDistanceM;
    }

    /**
     * @return The maximum range ring distance, specified in meters.
     */
    @JsonProperty("maxDistanceM")
    public Optional<Double> getMaxDistanceM() {
        return maxDistanceM;
    }

    /**
     * @return The count of range rings.
     */
    @JsonProperty("ringCount")
    public Optional<Integer> getRingCount() {
        return ringCount;
    }

    /**
     * @return The color of range rings, specified in hex string.
     */
    @JsonProperty("ringLineColor")
    public Optional<Color> getRingLineColor() {
        return ringLineColor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RangeRings && equalTo((RangeRings) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RangeRings other) {
        return minDistanceM.equals(other.minDistanceM)
                && maxDistanceM.equals(other.maxDistanceM)
                && ringCount.equals(other.ringCount)
                && ringLineColor.equals(other.ringLineColor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.minDistanceM, this.maxDistanceM, this.ringCount, this.ringLineColor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> minDistanceM = Optional.empty();

        private Optional<Double> maxDistanceM = Optional.empty();

        private Optional<Integer> ringCount = Optional.empty();

        private Optional<Color> ringLineColor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RangeRings other) {
            minDistanceM(other.getMinDistanceM());
            maxDistanceM(other.getMaxDistanceM());
            ringCount(other.getRingCount());
            ringLineColor(other.getRingLineColor());
            return this;
        }

        /**
         * <p>The minimum range ring distance, specified in meters.</p>
         */
        @JsonSetter(value = "minDistanceM", nulls = Nulls.SKIP)
        public Builder minDistanceM(Optional<Double> minDistanceM) {
            this.minDistanceM = minDistanceM;
            return this;
        }

        public Builder minDistanceM(Double minDistanceM) {
            this.minDistanceM = Optional.ofNullable(minDistanceM);
            return this;
        }

        /**
         * <p>The maximum range ring distance, specified in meters.</p>
         */
        @JsonSetter(value = "maxDistanceM", nulls = Nulls.SKIP)
        public Builder maxDistanceM(Optional<Double> maxDistanceM) {
            this.maxDistanceM = maxDistanceM;
            return this;
        }

        public Builder maxDistanceM(Double maxDistanceM) {
            this.maxDistanceM = Optional.ofNullable(maxDistanceM);
            return this;
        }

        /**
         * <p>The count of range rings.</p>
         */
        @JsonSetter(value = "ringCount", nulls = Nulls.SKIP)
        public Builder ringCount(Optional<Integer> ringCount) {
            this.ringCount = ringCount;
            return this;
        }

        public Builder ringCount(Integer ringCount) {
            this.ringCount = Optional.ofNullable(ringCount);
            return this;
        }

        /**
         * <p>The color of range rings, specified in hex string.</p>
         */
        @JsonSetter(value = "ringLineColor", nulls = Nulls.SKIP)
        public Builder ringLineColor(Optional<Color> ringLineColor) {
            this.ringLineColor = ringLineColor;
            return this;
        }

        public Builder ringLineColor(Color ringLineColor) {
            this.ringLineColor = Optional.ofNullable(ringLineColor);
            return this;
        }

        public RangeRings build() {
            return new RangeRings(minDistanceM, maxDistanceM, ringCount, ringLineColor, additionalProperties);
        }
    }
}
