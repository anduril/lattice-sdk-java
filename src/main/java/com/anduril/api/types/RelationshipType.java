/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RelationshipType.Builder.class)
public final class RelationshipType {
    private final Optional<TrackedBy> trackedBy;

    private final Optional<GroupChild> groupChild;

    private final Optional<GroupParent> groupParent;

    private final Optional<MergedFrom> mergedFrom;

    private final Optional<ActiveTarget> activeTarget;

    private final Map<String, Object> additionalProperties;

    private RelationshipType(
            Optional<TrackedBy> trackedBy,
            Optional<GroupChild> groupChild,
            Optional<GroupParent> groupParent,
            Optional<MergedFrom> mergedFrom,
            Optional<ActiveTarget> activeTarget,
            Map<String, Object> additionalProperties) {
        this.trackedBy = trackedBy;
        this.groupChild = groupChild;
        this.groupParent = groupParent;
        this.mergedFrom = mergedFrom;
        this.activeTarget = activeTarget;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("trackedBy")
    public Optional<TrackedBy> getTrackedBy() {
        return trackedBy;
    }

    @JsonProperty("groupChild")
    public Optional<GroupChild> getGroupChild() {
        return groupChild;
    }

    @JsonProperty("groupParent")
    public Optional<GroupParent> getGroupParent() {
        return groupParent;
    }

    @JsonProperty("mergedFrom")
    public Optional<MergedFrom> getMergedFrom() {
        return mergedFrom;
    }

    @JsonProperty("activeTarget")
    public Optional<ActiveTarget> getActiveTarget() {
        return activeTarget;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RelationshipType && equalTo((RelationshipType) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RelationshipType other) {
        return trackedBy.equals(other.trackedBy)
                && groupChild.equals(other.groupChild)
                && groupParent.equals(other.groupParent)
                && mergedFrom.equals(other.mergedFrom)
                && activeTarget.equals(other.activeTarget);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.trackedBy, this.groupChild, this.groupParent, this.mergedFrom, this.activeTarget);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TrackedBy> trackedBy = Optional.empty();

        private Optional<GroupChild> groupChild = Optional.empty();

        private Optional<GroupParent> groupParent = Optional.empty();

        private Optional<MergedFrom> mergedFrom = Optional.empty();

        private Optional<ActiveTarget> activeTarget = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RelationshipType other) {
            trackedBy(other.getTrackedBy());
            groupChild(other.getGroupChild());
            groupParent(other.getGroupParent());
            mergedFrom(other.getMergedFrom());
            activeTarget(other.getActiveTarget());
            return this;
        }

        @JsonSetter(value = "trackedBy", nulls = Nulls.SKIP)
        public Builder trackedBy(Optional<TrackedBy> trackedBy) {
            this.trackedBy = trackedBy;
            return this;
        }

        public Builder trackedBy(TrackedBy trackedBy) {
            this.trackedBy = Optional.ofNullable(trackedBy);
            return this;
        }

        @JsonSetter(value = "groupChild", nulls = Nulls.SKIP)
        public Builder groupChild(Optional<GroupChild> groupChild) {
            this.groupChild = groupChild;
            return this;
        }

        public Builder groupChild(GroupChild groupChild) {
            this.groupChild = Optional.ofNullable(groupChild);
            return this;
        }

        @JsonSetter(value = "groupParent", nulls = Nulls.SKIP)
        public Builder groupParent(Optional<GroupParent> groupParent) {
            this.groupParent = groupParent;
            return this;
        }

        public Builder groupParent(GroupParent groupParent) {
            this.groupParent = Optional.ofNullable(groupParent);
            return this;
        }

        @JsonSetter(value = "mergedFrom", nulls = Nulls.SKIP)
        public Builder mergedFrom(Optional<MergedFrom> mergedFrom) {
            this.mergedFrom = mergedFrom;
            return this;
        }

        public Builder mergedFrom(MergedFrom mergedFrom) {
            this.mergedFrom = Optional.ofNullable(mergedFrom);
            return this;
        }

        @JsonSetter(value = "activeTarget", nulls = Nulls.SKIP)
        public Builder activeTarget(Optional<ActiveTarget> activeTarget) {
            this.activeTarget = activeTarget;
            return this;
        }

        public Builder activeTarget(ActiveTarget activeTarget) {
            this.activeTarget = Optional.ofNullable(activeTarget);
            return this;
        }

        public RelationshipType build() {
            return new RelationshipType(
                    trackedBy, groupChild, groupParent, mergedFrom, activeTarget, additionalProperties);
        }
    }
}
