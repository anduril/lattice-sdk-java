/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AngleOfArrival.Builder.class)
public final class AngleOfArrival {
    private final Optional<Pose> relativePose;

    private final Optional<TMat2> bearingElevationCovarianceRad2;

    private final Map<String, Object> additionalProperties;

    private AngleOfArrival(
            Optional<Pose> relativePose,
            Optional<TMat2> bearingElevationCovarianceRad2,
            Map<String, Object> additionalProperties) {
        this.relativePose = relativePose;
        this.bearingElevationCovarianceRad2 = bearingElevationCovarianceRad2;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
     * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
     */
    @JsonProperty("relativePose")
    public Optional<Pose> getRelativePose() {
        return relativePose;
    }

    /**
     * @return Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
     * and elevation is positive down from the FL/XY plane.
     * mxx = bearing variance in rad^2
     * mxy = bearing/elevation covariance in rad^2
     * myy = elevation variance in rad^2
     */
    @JsonProperty("bearingElevationCovarianceRad2")
    public Optional<TMat2> getBearingElevationCovarianceRad2() {
        return bearingElevationCovarianceRad2;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AngleOfArrival && equalTo((AngleOfArrival) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AngleOfArrival other) {
        return relativePose.equals(other.relativePose)
                && bearingElevationCovarianceRad2.equals(other.bearingElevationCovarianceRad2);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.relativePose, this.bearingElevationCovarianceRad2);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Pose> relativePose = Optional.empty();

        private Optional<TMat2> bearingElevationCovarianceRad2 = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AngleOfArrival other) {
            relativePose(other.getRelativePose());
            bearingElevationCovarianceRad2(other.getBearingElevationCovarianceRad2());
            return this;
        }

        /**
         * <p>Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
         * forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.</p>
         */
        @JsonSetter(value = "relativePose", nulls = Nulls.SKIP)
        public Builder relativePose(Optional<Pose> relativePose) {
            this.relativePose = relativePose;
            return this;
        }

        public Builder relativePose(Pose relativePose) {
            this.relativePose = Optional.ofNullable(relativePose);
            return this;
        }

        /**
         * <p>Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
         * and elevation is positive down from the FL/XY plane.
         * mxx = bearing variance in rad^2
         * mxy = bearing/elevation covariance in rad^2
         * myy = elevation variance in rad^2</p>
         */
        @JsonSetter(value = "bearingElevationCovarianceRad2", nulls = Nulls.SKIP)
        public Builder bearingElevationCovarianceRad2(Optional<TMat2> bearingElevationCovarianceRad2) {
            this.bearingElevationCovarianceRad2 = bearingElevationCovarianceRad2;
            return this;
        }

        public Builder bearingElevationCovarianceRad2(TMat2 bearingElevationCovarianceRad2) {
            this.bearingElevationCovarianceRad2 = Optional.ofNullable(bearingElevationCovarianceRad2);
            return this;
        }

        public AngleOfArrival build() {
            return new AngleOfArrival(relativePose, bearingElevationCovarianceRad2, additionalProperties);
        }
    }
}
