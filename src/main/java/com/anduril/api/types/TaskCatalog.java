/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaskCatalog.Builder.class)
public final class TaskCatalog {
    private final Optional<List<TaskDefinition>> taskDefinitions;

    private final Map<String, Object> additionalProperties;

    private TaskCatalog(Optional<List<TaskDefinition>> taskDefinitions, Map<String, Object> additionalProperties) {
        this.taskDefinitions = taskDefinitions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("taskDefinitions")
    public Optional<List<TaskDefinition>> getTaskDefinitions() {
        return taskDefinitions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaskCatalog && equalTo((TaskCatalog) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaskCatalog other) {
        return taskDefinitions.equals(other.taskDefinitions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.taskDefinitions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<TaskDefinition>> taskDefinitions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaskCatalog other) {
            taskDefinitions(other.getTaskDefinitions());
            return this;
        }

        @JsonSetter(value = "taskDefinitions", nulls = Nulls.SKIP)
        public Builder taskDefinitions(Optional<List<TaskDefinition>> taskDefinitions) {
            this.taskDefinitions = taskDefinitions;
            return this;
        }

        public Builder taskDefinitions(List<TaskDefinition> taskDefinitions) {
            this.taskDefinitions = Optional.ofNullable(taskDefinitions);
            return this;
        }

        public TaskCatalog build() {
            return new TaskCatalog(taskDefinitions, additionalProperties);
        }
    }
}
