/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Orbit.Builder.class)
public final class Orbit {
    private final Optional<OrbitMeanElements> orbitMeanElements;

    private final Map<String, Object> additionalProperties;

    private Orbit(Optional<OrbitMeanElements> orbitMeanElements, Map<String, Object> additionalProperties) {
        this.orbitMeanElements = orbitMeanElements;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Orbit Mean Elements data, analogous to the Orbit Mean Elements Message in CCSDS 502.0-B-3
     */
    @JsonProperty("orbitMeanElements")
    public Optional<OrbitMeanElements> getOrbitMeanElements() {
        return orbitMeanElements;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Orbit && equalTo((Orbit) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Orbit other) {
        return orbitMeanElements.equals(other.orbitMeanElements);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.orbitMeanElements);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OrbitMeanElements> orbitMeanElements = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Orbit other) {
            orbitMeanElements(other.getOrbitMeanElements());
            return this;
        }

        /**
         * <p>Orbit Mean Elements data, analogous to the Orbit Mean Elements Message in CCSDS 502.0-B-3</p>
         */
        @JsonSetter(value = "orbitMeanElements", nulls = Nulls.SKIP)
        public Builder orbitMeanElements(Optional<OrbitMeanElements> orbitMeanElements) {
            this.orbitMeanElements = orbitMeanElements;
            return this;
        }

        public Builder orbitMeanElements(OrbitMeanElements orbitMeanElements) {
            this.orbitMeanElements = Optional.ofNullable(orbitMeanElements);
            return this;
        }

        public Orbit build() {
            return new Orbit(orbitMeanElements, additionalProperties);
        }
    }
}
