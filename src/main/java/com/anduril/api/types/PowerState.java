/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PowerState.Builder.class)
public final class PowerState {
    private final Optional<Map<String, PowerSource>> sourceIdToState;

    private final Map<String, Object> additionalProperties;

    private PowerState(Optional<Map<String, PowerSource>> sourceIdToState, Map<String, Object> additionalProperties) {
        this.sourceIdToState = sourceIdToState;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return This is a map where the key is a unique id of the power source and the value is additional information about the
     * power source.
     */
    @JsonProperty("sourceIdToState")
    public Optional<Map<String, PowerSource>> getSourceIdToState() {
        return sourceIdToState;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PowerState && equalTo((PowerState) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PowerState other) {
        return sourceIdToState.equals(other.sourceIdToState);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sourceIdToState);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, PowerSource>> sourceIdToState = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PowerState other) {
            sourceIdToState(other.getSourceIdToState());
            return this;
        }

        /**
         * <p>This is a map where the key is a unique id of the power source and the value is additional information about the
         * power source.</p>
         */
        @JsonSetter(value = "sourceIdToState", nulls = Nulls.SKIP)
        public Builder sourceIdToState(Optional<Map<String, PowerSource>> sourceIdToState) {
            this.sourceIdToState = sourceIdToState;
            return this;
        }

        public Builder sourceIdToState(Map<String, PowerSource> sourceIdToState) {
            this.sourceIdToState = Optional.ofNullable(sourceIdToState);
            return this;
        }

        public PowerState build() {
            return new PowerState(sourceIdToState, additionalProperties);
        }
    }
}
