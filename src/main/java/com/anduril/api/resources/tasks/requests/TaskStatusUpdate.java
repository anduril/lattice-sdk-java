/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.tasks.requests;

import com.anduril.api.core.ObjectMappers;
import com.anduril.api.types.Principal;
import com.anduril.api.types.TaskStatus;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaskStatusUpdate.Builder.class)
public final class TaskStatusUpdate {
    private final Optional<Integer> statusVersion;

    private final Optional<TaskStatus> newStatus;

    private final Optional<Principal> author;

    private final Map<String, Object> additionalProperties;

    private TaskStatusUpdate(
            Optional<Integer> statusVersion,
            Optional<TaskStatus> newStatus,
            Optional<Principal> author,
            Map<String, Object> additionalProperties) {
        this.statusVersion = statusVersion;
        this.newStatus = newStatus;
        this.author = author;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The status version of the task to update. This version number increments to indicate the task's
     * current stage in its status lifecycle. Specifically, whenever a task's status updates, the status
     * version increments by one. Any status updates received with a lower status version number than what
     * is known are considered stale and ignored.
     */
    @JsonProperty("statusVersion")
    public Optional<Integer> getStatusVersion() {
        return statusVersion;
    }

    /**
     * @return The new status of the task.
     */
    @JsonProperty("newStatus")
    public Optional<TaskStatus> getNewStatus() {
        return newStatus;
    }

    @JsonProperty("author")
    public Optional<Principal> getAuthor() {
        return author;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaskStatusUpdate && equalTo((TaskStatusUpdate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaskStatusUpdate other) {
        return statusVersion.equals(other.statusVersion)
                && newStatus.equals(other.newStatus)
                && author.equals(other.author);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.statusVersion, this.newStatus, this.author);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> statusVersion = Optional.empty();

        private Optional<TaskStatus> newStatus = Optional.empty();

        private Optional<Principal> author = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaskStatusUpdate other) {
            statusVersion(other.getStatusVersion());
            newStatus(other.getNewStatus());
            author(other.getAuthor());
            return this;
        }

        /**
         * <p>The status version of the task to update. This version number increments to indicate the task's
         * current stage in its status lifecycle. Specifically, whenever a task's status updates, the status
         * version increments by one. Any status updates received with a lower status version number than what
         * is known are considered stale and ignored.</p>
         */
        @JsonSetter(value = "statusVersion", nulls = Nulls.SKIP)
        public Builder statusVersion(Optional<Integer> statusVersion) {
            this.statusVersion = statusVersion;
            return this;
        }

        public Builder statusVersion(Integer statusVersion) {
            this.statusVersion = Optional.ofNullable(statusVersion);
            return this;
        }

        /**
         * <p>The new status of the task.</p>
         */
        @JsonSetter(value = "newStatus", nulls = Nulls.SKIP)
        public Builder newStatus(Optional<TaskStatus> newStatus) {
            this.newStatus = newStatus;
            return this;
        }

        public Builder newStatus(TaskStatus newStatus) {
            this.newStatus = Optional.ofNullable(newStatus);
            return this;
        }

        @JsonSetter(value = "author", nulls = Nulls.SKIP)
        public Builder author(Optional<Principal> author) {
            this.author = author;
            return this;
        }

        public Builder author(Principal author) {
            this.author = Optional.ofNullable(author);
            return this;
        }

        public TaskStatusUpdate build() {
            return new TaskStatusUpdate(statusVersion, newStatus, author, additionalProperties);
        }
    }
}
