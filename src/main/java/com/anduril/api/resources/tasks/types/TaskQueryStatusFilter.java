/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.tasks.types;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaskQueryStatusFilter.Builder.class)
public final class TaskQueryStatusFilter {
    private final Optional<TaskQueryStatusFilterStatus> status;

    private final Map<String, Object> additionalProperties;

    private TaskQueryStatusFilter(
            Optional<TaskQueryStatusFilterStatus> status, Map<String, Object> additionalProperties) {
        this.status = status;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Status of the Task to filter by, inclusive.
     */
    @JsonProperty("status")
    public Optional<TaskQueryStatusFilterStatus> getStatus() {
        return status;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaskQueryStatusFilter && equalTo((TaskQueryStatusFilter) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaskQueryStatusFilter other) {
        return status.equals(other.status);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.status);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TaskQueryStatusFilterStatus> status = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaskQueryStatusFilter other) {
            status(other.getStatus());
            return this;
        }

        /**
         * <p>Status of the Task to filter by, inclusive.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<TaskQueryStatusFilterStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(TaskQueryStatusFilterStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public TaskQueryStatusFilter build() {
            return new TaskQueryStatusFilter(status, additionalProperties);
        }
    }
}
