/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.task.requests;

import com.anduril.api.core.ObjectMappers;
import com.anduril.api.types.EntityIdsSelector;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AgentListener.Builder.class)
public final class AgentListener {
    private final Optional<EntityIdsSelector> agentSelector;

    private final Map<String, Object> additionalProperties;

    private AgentListener(Optional<EntityIdsSelector> agentSelector, Map<String, Object> additionalProperties) {
        this.agentSelector = agentSelector;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Selector criteria to determine which Agent Tasks the agent receives
     */
    @JsonProperty("agentSelector")
    public Optional<EntityIdsSelector> getAgentSelector() {
        return agentSelector;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AgentListener && equalTo((AgentListener) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AgentListener other) {
        return agentSelector.equals(other.agentSelector);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.agentSelector);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<EntityIdsSelector> agentSelector = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AgentListener other) {
            agentSelector(other.getAgentSelector());
            return this;
        }

        /**
         * <p>Selector criteria to determine which Agent Tasks the agent receives</p>
         */
        @JsonSetter(value = "agentSelector", nulls = Nulls.SKIP)
        public Builder agentSelector(Optional<EntityIdsSelector> agentSelector) {
            this.agentSelector = agentSelector;
            return this;
        }

        public Builder agentSelector(EntityIdsSelector agentSelector) {
            this.agentSelector = Optional.ofNullable(agentSelector);
            return this;
        }

        public AgentListener build() {
            return new AgentListener(agentSelector, additionalProperties);
        }
    }
}
