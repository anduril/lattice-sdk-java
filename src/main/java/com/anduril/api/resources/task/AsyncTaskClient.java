/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.task;

import com.anduril.api.core.ClientOptions;
import com.anduril.api.core.RequestOptions;
import com.anduril.api.resources.task.requests.AgentListener;
import com.anduril.api.resources.task.requests.TaskCreation;
import com.anduril.api.resources.task.requests.TaskQuery;
import com.anduril.api.resources.task.requests.TaskStatusUpdate;
import com.anduril.api.types.AgentRequest;
import com.anduril.api.types.Task;
import com.anduril.api.types.TaskQueryResults;
import java.util.concurrent.CompletableFuture;

public class AsyncTaskClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawTaskClient rawClient;

    public AsyncTaskClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawTaskClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawTaskClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public CompletableFuture<Task> createTask() {
        return this.rawClient.createTask().thenApply(response -> response.body());
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public CompletableFuture<Task> createTask(TaskCreation request) {
        return this.rawClient.createTask(request).thenApply(response -> response.body());
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public CompletableFuture<Task> createTask(TaskCreation request, RequestOptions requestOptions) {
        return this.rawClient.createTask(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Task> getTaskById(String taskId) {
        return this.rawClient.getTaskById(taskId).thenApply(response -> response.body());
    }

    public CompletableFuture<Task> getTaskById(String taskId, RequestOptions requestOptions) {
        return this.rawClient.getTaskById(taskId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Task> updateTaskStatusById(String taskId) {
        return this.rawClient.updateTaskStatusById(taskId).thenApply(response -> response.body());
    }

    public CompletableFuture<Task> updateTaskStatusById(String taskId, TaskStatusUpdate request) {
        return this.rawClient.updateTaskStatusById(taskId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Task> updateTaskStatusById(
            String taskId, TaskStatusUpdate request, RequestOptions requestOptions) {
        return this.rawClient
                .updateTaskStatusById(taskId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<TaskQueryResults> queryTasks() {
        return this.rawClient.queryTasks().thenApply(response -> response.body());
    }

    public CompletableFuture<TaskQueryResults> queryTasks(TaskQuery request) {
        return this.rawClient.queryTasks(request).thenApply(response -> response.body());
    }

    public CompletableFuture<TaskQueryResults> queryTasks(TaskQuery request, RequestOptions requestOptions) {
        return this.rawClient.queryTasks(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public CompletableFuture<AgentRequest> longPollListenAsAgent() {
        return this.rawClient.longPollListenAsAgent().thenApply(response -> response.body());
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public CompletableFuture<AgentRequest> longPollListenAsAgent(AgentListener request) {
        return this.rawClient.longPollListenAsAgent(request).thenApply(response -> response.body());
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public CompletableFuture<AgentRequest> longPollListenAsAgent(AgentListener request, RequestOptions requestOptions) {
        return this.rawClient.longPollListenAsAgent(request, requestOptions).thenApply(response -> response.body());
    }
}
