/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.task;

import com.anduril.api.core.ClientOptions;
import com.anduril.api.core.LatticeApiException;
import com.anduril.api.core.LatticeException;
import com.anduril.api.core.LatticeHttpResponse;
import com.anduril.api.core.MediaTypes;
import com.anduril.api.core.ObjectMappers;
import com.anduril.api.core.RequestOptions;
import com.anduril.api.errors.BadRequestError;
import com.anduril.api.errors.NotFoundError;
import com.anduril.api.errors.UnauthorizedError;
import com.anduril.api.resources.task.requests.AgentListener;
import com.anduril.api.resources.task.requests.TaskCreation;
import com.anduril.api.resources.task.requests.TaskQuery;
import com.anduril.api.resources.task.requests.TaskStatusUpdate;
import com.anduril.api.types.AgentRequest;
import com.anduril.api.types.Task;
import com.anduril.api.types.TaskQueryResults;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawTaskClient {
    protected final ClientOptions clientOptions;

    public RawTaskClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public LatticeHttpResponse<Task> createTask() {
        return createTask(TaskCreation.builder().build());
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public LatticeHttpResponse<Task> createTask(TaskCreation request) {
        return createTask(request, null);
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public LatticeHttpResponse<Task> createTask(TaskCreation request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("tasks")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new LatticeException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new LatticeHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Task.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new LatticeApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new LatticeException("Network error executing HTTP request", e);
        }
    }

    public LatticeHttpResponse<Task> getTaskById(String taskId) {
        return getTaskById(taskId, null);
    }

    public LatticeHttpResponse<Task> getTaskById(String taskId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("tasks")
                .addPathSegment(taskId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new LatticeHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Task.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new LatticeApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new LatticeException("Network error executing HTTP request", e);
        }
    }

    public LatticeHttpResponse<Task> updateTaskStatusById(String taskId) {
        return updateTaskStatusById(taskId, TaskStatusUpdate.builder().build());
    }

    public LatticeHttpResponse<Task> updateTaskStatusById(String taskId, TaskStatusUpdate request) {
        return updateTaskStatusById(taskId, request, null);
    }

    public LatticeHttpResponse<Task> updateTaskStatusById(
            String taskId, TaskStatusUpdate request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("tasks")
                .addPathSegment(taskId)
                .addPathSegments("status")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new LatticeException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new LatticeHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Task.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new LatticeApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new LatticeException("Network error executing HTTP request", e);
        }
    }

    public LatticeHttpResponse<TaskQueryResults> queryTasks() {
        return queryTasks(TaskQuery.builder().build());
    }

    public LatticeHttpResponse<TaskQueryResults> queryTasks(TaskQuery request) {
        return queryTasks(request, null);
    }

    public LatticeHttpResponse<TaskQueryResults> queryTasks(TaskQuery request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("tasks/query")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new LatticeException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new LatticeHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), TaskQueryResults.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new LatticeApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new LatticeException("Network error executing HTTP request", e);
        }
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public LatticeHttpResponse<AgentRequest> longPollListenAsAgent() {
        return longPollListenAsAgent(AgentListener.builder().build());
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public LatticeHttpResponse<AgentRequest> longPollListenAsAgent(AgentListener request) {
        return longPollListenAsAgent(request, null);
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public LatticeHttpResponse<AgentRequest> longPollListenAsAgent(
            AgentListener request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("agent/listen")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new LatticeException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new LatticeHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), AgentRequest.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new LatticeApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new LatticeException("Network error executing HTTP request", e);
        }
    }
}
