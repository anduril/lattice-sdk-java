/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.entity.requests;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityEventRequest.Builder.class)
public final class EntityEventRequest {
    private final String sessionToken;

    private final Optional<Integer> batchSize;

    private final Map<String, Object> additionalProperties;

    private EntityEventRequest(
            String sessionToken, Optional<Integer> batchSize, Map<String, Object> additionalProperties) {
        this.sessionToken = sessionToken;
        this.batchSize = batchSize;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Long-poll session identifier. Leave empty to start a new polling session.
     */
    @JsonProperty("sessionToken")
    public String getSessionToken() {
        return sessionToken;
    }

    /**
     * @return Maximum size of response batch. Defaults to 100. Must be between 1 and 2000 (inclusive).
     */
    @JsonProperty("batchSize")
    public Optional<Integer> getBatchSize() {
        return batchSize;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityEventRequest && equalTo((EntityEventRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityEventRequest other) {
        return sessionToken.equals(other.sessionToken) && batchSize.equals(other.batchSize);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sessionToken, this.batchSize);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SessionTokenStage builder() {
        return new Builder();
    }

    public interface SessionTokenStage {
        /**
         * <p>Long-poll session identifier. Leave empty to start a new polling session.</p>
         */
        _FinalStage sessionToken(@NotNull String sessionToken);

        Builder from(EntityEventRequest other);
    }

    public interface _FinalStage {
        EntityEventRequest build();

        /**
         * <p>Maximum size of response batch. Defaults to 100. Must be between 1 and 2000 (inclusive).</p>
         */
        _FinalStage batchSize(Optional<Integer> batchSize);

        _FinalStage batchSize(Integer batchSize);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SessionTokenStage, _FinalStage {
        private String sessionToken;

        private Optional<Integer> batchSize = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EntityEventRequest other) {
            sessionToken(other.getSessionToken());
            batchSize(other.getBatchSize());
            return this;
        }

        /**
         * <p>Long-poll session identifier. Leave empty to start a new polling session.</p>
         * <p>Long-poll session identifier. Leave empty to start a new polling session.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sessionToken")
        public _FinalStage sessionToken(@NotNull String sessionToken) {
            this.sessionToken = Objects.requireNonNull(sessionToken, "sessionToken must not be null");
            return this;
        }

        /**
         * <p>Maximum size of response batch. Defaults to 100. Must be between 1 and 2000 (inclusive).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchSize(Integer batchSize) {
            this.batchSize = Optional.ofNullable(batchSize);
            return this;
        }

        /**
         * <p>Maximum size of response batch. Defaults to 100. Must be between 1 and 2000 (inclusive).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "batchSize", nulls = Nulls.SKIP)
        public _FinalStage batchSize(Optional<Integer> batchSize) {
            this.batchSize = batchSize;
            return this;
        }

        @java.lang.Override
        public EntityEventRequest build() {
            return new EntityEventRequest(sessionToken, batchSize, additionalProperties);
        }
    }
}
