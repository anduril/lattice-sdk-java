/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.entity;

import com.anduril.api.core.ClientOptions;
import com.anduril.api.core.RequestOptions;
import com.anduril.api.resources.entity.requests.EntityEventRequest;
import com.anduril.api.resources.entity.requests.EntityOverride;
import com.anduril.api.types.Entity;
import com.anduril.api.types.EntityEventResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncEntityClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawEntityClient rawClient;

    public AsyncEntityClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawEntityClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawEntityClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Publish an entity for ingest into the Entities API. Entities created with this method are &quot;owned&quot; by the originator: other sources,
     * such as the UI, may not edit or delete these entities. The server validates entities at API call time and
     * returns an error if the entity is invalid.
     * <p>An entity ID must be provided when calling this endpoint. If the entity referenced by the entity ID does not exist
     * then it will be created. Otherwise the entity will be updated. An entity will only be updated if its
     * provenance.sourceUpdateTime is greater than the provenance.sourceUpdateTime of the existing entity.</p>
     */
    public CompletableFuture<Entity> publishEntityRest() {
        return this.rawClient.publishEntityRest().thenApply(response -> response.body());
    }

    /**
     * Publish an entity for ingest into the Entities API. Entities created with this method are &quot;owned&quot; by the originator: other sources,
     * such as the UI, may not edit or delete these entities. The server validates entities at API call time and
     * returns an error if the entity is invalid.
     * <p>An entity ID must be provided when calling this endpoint. If the entity referenced by the entity ID does not exist
     * then it will be created. Otherwise the entity will be updated. An entity will only be updated if its
     * provenance.sourceUpdateTime is greater than the provenance.sourceUpdateTime of the existing entity.</p>
     */
    public CompletableFuture<Entity> publishEntityRest(Entity request) {
        return this.rawClient.publishEntityRest(request).thenApply(response -> response.body());
    }

    /**
     * Publish an entity for ingest into the Entities API. Entities created with this method are &quot;owned&quot; by the originator: other sources,
     * such as the UI, may not edit or delete these entities. The server validates entities at API call time and
     * returns an error if the entity is invalid.
     * <p>An entity ID must be provided when calling this endpoint. If the entity referenced by the entity ID does not exist
     * then it will be created. Otherwise the entity will be updated. An entity will only be updated if its
     * provenance.sourceUpdateTime is greater than the provenance.sourceUpdateTime of the existing entity.</p>
     */
    public CompletableFuture<Entity> publishEntityRest(Entity request, RequestOptions requestOptions) {
        return this.rawClient.publishEntityRest(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Entity> getEntityById(String entityId) {
        return this.rawClient.getEntityById(entityId).thenApply(response -> response.body());
    }

    public CompletableFuture<Entity> getEntityById(String entityId, RequestOptions requestOptions) {
        return this.rawClient.getEntityById(entityId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Only fields marked with overridable can be overridden. Please refer to our documentation to see the comprehensive
     * list of fields that can be overridden. The entity in the request body should only have a value set on the field
     * specified in the field path parameter. Field paths are rooted in the base entity object and must be represented
     * using lower_snake_case. Do not include &quot;entity&quot; in the field path.
     * <p>Note that overrides are applied in an eventually consistent manner. If multiple overrides are created
     * concurrently for the same field path, the last writer wins.</p>
     */
    public CompletableFuture<Entity> putEntityOverrideRest(String entityId, String fieldPath) {
        return this.rawClient.putEntityOverrideRest(entityId, fieldPath).thenApply(response -> response.body());
    }

    /**
     * Only fields marked with overridable can be overridden. Please refer to our documentation to see the comprehensive
     * list of fields that can be overridden. The entity in the request body should only have a value set on the field
     * specified in the field path parameter. Field paths are rooted in the base entity object and must be represented
     * using lower_snake_case. Do not include &quot;entity&quot; in the field path.
     * <p>Note that overrides are applied in an eventually consistent manner. If multiple overrides are created
     * concurrently for the same field path, the last writer wins.</p>
     */
    public CompletableFuture<Entity> putEntityOverrideRest(String entityId, String fieldPath, EntityOverride request) {
        return this.rawClient
                .putEntityOverrideRest(entityId, fieldPath, request)
                .thenApply(response -> response.body());
    }

    /**
     * Only fields marked with overridable can be overridden. Please refer to our documentation to see the comprehensive
     * list of fields that can be overridden. The entity in the request body should only have a value set on the field
     * specified in the field path parameter. Field paths are rooted in the base entity object and must be represented
     * using lower_snake_case. Do not include &quot;entity&quot; in the field path.
     * <p>Note that overrides are applied in an eventually consistent manner. If multiple overrides are created
     * concurrently for the same field path, the last writer wins.</p>
     */
    public CompletableFuture<Entity> putEntityOverrideRest(
            String entityId, String fieldPath, EntityOverride request, RequestOptions requestOptions) {
        return this.rawClient
                .putEntityOverrideRest(entityId, fieldPath, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * This operation clears the override value from the specified field path on the entity.
     */
    public CompletableFuture<Entity> removeEntityOverrideRest(String entityId, String fieldPath) {
        return this.rawClient.removeEntityOverrideRest(entityId, fieldPath).thenApply(response -> response.body());
    }

    /**
     * This operation clears the override value from the specified field path on the entity.
     */
    public CompletableFuture<Entity> removeEntityOverrideRest(
            String entityId, String fieldPath, RequestOptions requestOptions) {
        return this.rawClient
                .removeEntityOverrideRest(entityId, fieldPath, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * This is a long polling API that will first return all preexisting data and then return all new data as
     * it becomes available. If you want to start a new polling session then open a request with an empty
     * 'sessionToken' in the request body. The server will return a new session token in the response.
     * If you want to retrieve the next batch of results from an existing polling session then send the session
     * token you received from the server in the request body. If no new data is available then the server will
     * hold the connection open for up to 5 minutes. After the 5 minute timeout period, the server will close the
     * connection with no results and you may resume polling with the same session token. If your session falls behind
     * more than 3x the total number of entities in the environment, the server will terminate your session.
     * In this case you must start a new session by sending a request with an empty session token.
     */
    public CompletableFuture<EntityEventResponse> longPollEntityEvents(EntityEventRequest request) {
        return this.rawClient.longPollEntityEvents(request).thenApply(response -> response.body());
    }

    /**
     * This is a long polling API that will first return all preexisting data and then return all new data as
     * it becomes available. If you want to start a new polling session then open a request with an empty
     * 'sessionToken' in the request body. The server will return a new session token in the response.
     * If you want to retrieve the next batch of results from an existing polling session then send the session
     * token you received from the server in the request body. If no new data is available then the server will
     * hold the connection open for up to 5 minutes. After the 5 minute timeout period, the server will close the
     * connection with no results and you may resume polling with the same session token. If your session falls behind
     * more than 3x the total number of entities in the environment, the server will terminate your session.
     * In this case you must start a new session by sending a request with an empty session token.
     */
    public CompletableFuture<EntityEventResponse> longPollEntityEvents(
            EntityEventRequest request, RequestOptions requestOptions) {
        return this.rawClient.longPollEntityEvents(request, requestOptions).thenApply(response -> response.body());
    }
}
