/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.objects.requests;

import com.anduril.api.core.ObjectMappers;
import com.anduril.api.resources.objects.types.ListObjectsRequestAllObjectsInMesh;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListObjectsRequest.Builder.class)
public final class ListObjectsRequest {
    private final Optional<String> prefix;

    private final Optional<OffsetDateTime> sinceTimestamp;

    private final Optional<String> pageToken;

    private final Optional<ListObjectsRequestAllObjectsInMesh> allObjectsInMesh;

    private final Map<String, Object> additionalProperties;

    private ListObjectsRequest(
            Optional<String> prefix,
            Optional<OffsetDateTime> sinceTimestamp,
            Optional<String> pageToken,
            Optional<ListObjectsRequestAllObjectsInMesh> allObjectsInMesh,
            Map<String, Object> additionalProperties) {
        this.prefix = prefix;
        this.sinceTimestamp = sinceTimestamp;
        this.pageToken = pageToken;
        this.allObjectsInMesh = allObjectsInMesh;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filters the objects based on the specified prefix path. If no path is specified, all objects are returned.
     */
    @JsonProperty("prefix")
    public Optional<String> getPrefix() {
        return prefix;
    }

    /**
     * @return Sets the age for the oldest objects to query across the environment.
     */
    @JsonProperty("sinceTimestamp")
    public Optional<OffsetDateTime> getSinceTimestamp() {
        return sinceTimestamp;
    }

    /**
     * @return Base64 and URL-encoded cursor returned by the service to continue paging.
     */
    @JsonProperty("pageToken")
    public Optional<String> getPageToken() {
        return pageToken;
    }

    /**
     * @return Lists objects across all environment nodes in a Lattice Mesh.
     */
    @JsonProperty("allObjectsInMesh")
    public Optional<ListObjectsRequestAllObjectsInMesh> getAllObjectsInMesh() {
        return allObjectsInMesh;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListObjectsRequest && equalTo((ListObjectsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListObjectsRequest other) {
        return prefix.equals(other.prefix)
                && sinceTimestamp.equals(other.sinceTimestamp)
                && pageToken.equals(other.pageToken)
                && allObjectsInMesh.equals(other.allObjectsInMesh);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.prefix, this.sinceTimestamp, this.pageToken, this.allObjectsInMesh);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> prefix = Optional.empty();

        private Optional<OffsetDateTime> sinceTimestamp = Optional.empty();

        private Optional<String> pageToken = Optional.empty();

        private Optional<ListObjectsRequestAllObjectsInMesh> allObjectsInMesh = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListObjectsRequest other) {
            prefix(other.getPrefix());
            sinceTimestamp(other.getSinceTimestamp());
            pageToken(other.getPageToken());
            allObjectsInMesh(other.getAllObjectsInMesh());
            return this;
        }

        /**
         * <p>Filters the objects based on the specified prefix path. If no path is specified, all objects are returned.</p>
         */
        @JsonSetter(value = "prefix", nulls = Nulls.SKIP)
        public Builder prefix(Optional<String> prefix) {
            this.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            this.prefix = Optional.ofNullable(prefix);
            return this;
        }

        /**
         * <p>Sets the age for the oldest objects to query across the environment.</p>
         */
        @JsonSetter(value = "sinceTimestamp", nulls = Nulls.SKIP)
        public Builder sinceTimestamp(Optional<OffsetDateTime> sinceTimestamp) {
            this.sinceTimestamp = sinceTimestamp;
            return this;
        }

        public Builder sinceTimestamp(OffsetDateTime sinceTimestamp) {
            this.sinceTimestamp = Optional.ofNullable(sinceTimestamp);
            return this;
        }

        /**
         * <p>Base64 and URL-encoded cursor returned by the service to continue paging.</p>
         */
        @JsonSetter(value = "pageToken", nulls = Nulls.SKIP)
        public Builder pageToken(Optional<String> pageToken) {
            this.pageToken = pageToken;
            return this;
        }

        public Builder pageToken(String pageToken) {
            this.pageToken = Optional.ofNullable(pageToken);
            return this;
        }

        /**
         * <p>Lists objects across all environment nodes in a Lattice Mesh.</p>
         */
        @JsonSetter(value = "allObjectsInMesh", nulls = Nulls.SKIP)
        public Builder allObjectsInMesh(Optional<ListObjectsRequestAllObjectsInMesh> allObjectsInMesh) {
            this.allObjectsInMesh = allObjectsInMesh;
            return this;
        }

        public Builder allObjectsInMesh(ListObjectsRequestAllObjectsInMesh allObjectsInMesh) {
            this.allObjectsInMesh = Optional.ofNullable(allObjectsInMesh);
            return this;
        }

        public ListObjectsRequest build() {
            return new ListObjectsRequest(prefix, sinceTimestamp, pageToken, allObjectsInMesh, additionalProperties);
        }
    }
}
