/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.objects;

import com.anduril.api.core.ClientOptions;
import com.anduril.api.core.RequestOptions;
import com.anduril.api.core.pagination.SyncPagingIterable;
import com.anduril.api.resources.objects.requests.GetObjectRequest;
import com.anduril.api.resources.objects.requests.ListObjectsRequest;
import com.anduril.api.types.PathMetadata;
import java.io.InputStream;
import java.util.concurrent.CompletableFuture;

public class AsyncObjectsClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawObjectsClient rawClient;

    public AsyncObjectsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawObjectsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawObjectsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     */
    public CompletableFuture<SyncPagingIterable<PathMetadata>> listObjects() {
        return this.rawClient.listObjects().thenApply(response -> response.body());
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     */
    public CompletableFuture<SyncPagingIterable<PathMetadata>> listObjects(ListObjectsRequest request) {
        return this.rawClient.listObjects(request).thenApply(response -> response.body());
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     */
    public CompletableFuture<SyncPagingIterable<PathMetadata>> listObjects(
            ListObjectsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listObjects(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     */
    public CompletableFuture<InputStream> getObject(String objectPath) {
        return this.rawClient.getObject(objectPath).thenApply(response -> response.body());
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     */
    public CompletableFuture<InputStream> getObject(String objectPath, GetObjectRequest request) {
        return this.rawClient.getObject(objectPath, request).thenApply(response -> response.body());
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     */
    public CompletableFuture<InputStream> getObject(
            String objectPath, GetObjectRequest request, RequestOptions requestOptions) {
        return this.rawClient.getObject(objectPath, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Uploads an object using multiform data. The object must be 1 GiB or smaller.
     */
    public CompletableFuture<PathMetadata> uploadObject(String objectPath, InputStream request) {
        return this.rawClient.uploadObject(objectPath, request).thenApply(response -> response.body());
    }

    /**
     * Uploads an object using multiform data. The object must be 1 GiB or smaller.
     */
    public CompletableFuture<PathMetadata> uploadObject(
            String objectPath, InputStream request, RequestOptions requestOptions) {
        return this.rawClient.uploadObject(objectPath, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Uploads an object using multiform data. The object must be 1 GiB or smaller.
     */
    public CompletableFuture<PathMetadata> uploadObject(String objectPath, byte[] request) {
        return this.rawClient.uploadObject(objectPath, request).thenApply(response -> response.body());
    }

    /**
     * Uploads an object using multiform data. The object must be 1 GiB or smaller.
     */
    public CompletableFuture<PathMetadata> uploadObject(
            String objectPath, byte[] request, RequestOptions requestOptions) {
        return this.rawClient.uploadObject(objectPath, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deletes an object from your environment given the objectPath path parameter.
     */
    public CompletableFuture<Void> deleteObject(String objectPath) {
        return this.rawClient.deleteObject(objectPath).thenApply(response -> response.body());
    }

    /**
     * Deletes an object from your environment given the objectPath path parameter.
     */
    public CompletableFuture<Void> deleteObject(String objectPath, RequestOptions requestOptions) {
        return this.rawClient.deleteObject(objectPath, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns metadata for a specified object path. Use this to fetch metadata such as object size (size_bytes), its expiry time (expiry_time), or its latest update timestamp (last_updated_at).
     */
    public CompletableFuture<Void> getObjectMetadata(String objectPath) {
        return this.rawClient.getObjectMetadata(objectPath).thenApply(response -> response.body());
    }

    /**
     * Returns metadata for a specified object path. Use this to fetch metadata such as object size (size_bytes), its expiry time (expiry_time), or its latest update timestamp (last_updated_at).
     */
    public CompletableFuture<Void> getObjectMetadata(String objectPath, RequestOptions requestOptions) {
        return this.rawClient.getObjectMetadata(objectPath, requestOptions).thenApply(response -> response.body());
    }
}
