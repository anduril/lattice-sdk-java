/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.entities;

import com.anduril.api.core.ClientOptions;
import com.anduril.api.core.MediaTypes;
import com.anduril.api.core.ObjectMappers;
import com.anduril.api.core.RequestOptions;
import com.anduril.api.core.andurilApiException;
import com.anduril.api.core.andurilException;
import com.anduril.api.core.andurilHttpResponse;
import com.anduril.api.errors.BadRequestError;
import com.anduril.api.errors.NotFoundError;
import com.anduril.api.errors.RequestTimeoutError;
import com.anduril.api.errors.TooManyRequestsError;
import com.anduril.api.errors.UnauthorizedError;
import com.anduril.api.resources.entities.requests.EntityEventRequest;
import com.anduril.api.resources.entities.requests.EntityOverride;
import com.anduril.api.types.Entity;
import com.anduril.api.types.EntityEventResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawEntitiesClient {
    protected final ClientOptions clientOptions;

    public RawEntitiesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Publish an entity for ingest into the Entities API. Entities created with this method are &quot;owned&quot; by the originator: other sources,
     * such as the UI, may not edit or delete these entities. The server validates entities at API call time and
     * returns an error if the entity is invalid.
     * <p>An entity ID must be provided when calling this endpoint. If the entity referenced by the entity ID does not exist
     * then it will be created. Otherwise the entity will be updated. An entity will only be updated if its
     * provenance.sourceUpdateTime is greater than the provenance.sourceUpdateTime of the existing entity.</p>
     */
    public andurilHttpResponse<Entity> publishEntity() {
        return publishEntity(Entity.builder().build());
    }

    /**
     * Publish an entity for ingest into the Entities API. Entities created with this method are &quot;owned&quot; by the originator: other sources,
     * such as the UI, may not edit or delete these entities. The server validates entities at API call time and
     * returns an error if the entity is invalid.
     * <p>An entity ID must be provided when calling this endpoint. If the entity referenced by the entity ID does not exist
     * then it will be created. Otherwise the entity will be updated. An entity will only be updated if its
     * provenance.sourceUpdateTime is greater than the provenance.sourceUpdateTime of the existing entity.</p>
     */
    public andurilHttpResponse<Entity> publishEntity(Entity request) {
        return publishEntity(request, null);
    }

    /**
     * Publish an entity for ingest into the Entities API. Entities created with this method are &quot;owned&quot; by the originator: other sources,
     * such as the UI, may not edit or delete these entities. The server validates entities at API call time and
     * returns an error if the entity is invalid.
     * <p>An entity ID must be provided when calling this endpoint. If the entity referenced by the entity ID does not exist
     * then it will be created. Otherwise the entity will be updated. An entity will only be updated if its
     * provenance.sourceUpdateTime is greater than the provenance.sourceUpdateTime of the existing entity.</p>
     */
    public andurilHttpResponse<Entity> publishEntity(Entity request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/entities")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new andurilException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new andurilHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Entity.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new andurilApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new andurilException("Network error executing HTTP request", e);
        }
    }

    public andurilHttpResponse<Entity> getEntity(String entityId) {
        return getEntity(entityId, null);
    }

    public andurilHttpResponse<Entity> getEntity(String entityId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/entities")
                .addPathSegment(entityId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new andurilHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Entity.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new andurilApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new andurilException("Network error executing HTTP request", e);
        }
    }

    /**
     * Only fields marked with overridable can be overridden. Please refer to our documentation to see the comprehensive
     * list of fields that can be overridden. The entity in the request body should only have a value set on the field
     * specified in the field path parameter. Field paths are rooted in the base entity object and must be represented
     * using lower_snake_case. Do not include &quot;entity&quot; in the field path.
     * <p>Note that overrides are applied in an eventually consistent manner. If multiple overrides are created
     * concurrently for the same field path, the last writer wins.</p>
     */
    public andurilHttpResponse<Entity> overrideEntity(String entityId, String fieldPath) {
        return overrideEntity(entityId, fieldPath, EntityOverride.builder().build());
    }

    /**
     * Only fields marked with overridable can be overridden. Please refer to our documentation to see the comprehensive
     * list of fields that can be overridden. The entity in the request body should only have a value set on the field
     * specified in the field path parameter. Field paths are rooted in the base entity object and must be represented
     * using lower_snake_case. Do not include &quot;entity&quot; in the field path.
     * <p>Note that overrides are applied in an eventually consistent manner. If multiple overrides are created
     * concurrently for the same field path, the last writer wins.</p>
     */
    public andurilHttpResponse<Entity> overrideEntity(String entityId, String fieldPath, EntityOverride request) {
        return overrideEntity(entityId, fieldPath, request, null);
    }

    /**
     * Only fields marked with overridable can be overridden. Please refer to our documentation to see the comprehensive
     * list of fields that can be overridden. The entity in the request body should only have a value set on the field
     * specified in the field path parameter. Field paths are rooted in the base entity object and must be represented
     * using lower_snake_case. Do not include &quot;entity&quot; in the field path.
     * <p>Note that overrides are applied in an eventually consistent manner. If multiple overrides are created
     * concurrently for the same field path, the last writer wins.</p>
     */
    public andurilHttpResponse<Entity> overrideEntity(
            String entityId, String fieldPath, EntityOverride request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/entities")
                .addPathSegment(entityId)
                .addPathSegments("override")
                .addPathSegment(fieldPath)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new andurilException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new andurilHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Entity.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new andurilApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new andurilException("Network error executing HTTP request", e);
        }
    }

    /**
     * This operation clears the override value from the specified field path on the entity.
     */
    public andurilHttpResponse<Entity> removeEntityOverride(String entityId, String fieldPath) {
        return removeEntityOverride(entityId, fieldPath, null);
    }

    /**
     * This operation clears the override value from the specified field path on the entity.
     */
    public andurilHttpResponse<Entity> removeEntityOverride(
            String entityId, String fieldPath, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/entities")
                .addPathSegment(entityId)
                .addPathSegments("override")
                .addPathSegment(fieldPath)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new andurilHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Entity.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new andurilApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new andurilException("Network error executing HTTP request", e);
        }
    }

    /**
     * This is a long polling API that will first return all pre-existing data and then return all new data as
     * it becomes available. If you want to start a new polling session then open a request with an empty
     * 'sessionToken' in the request body. The server will return a new session token in the response.
     * If you want to retrieve the next batch of results from an existing polling session then send the session
     * token you received from the server in the request body. If no new data is available then the server will
     * hold the connection open for up to 5 minutes. After the 5 minute timeout period, the server will close the
     * connection with no results and you may resume polling with the same session token. If your session falls behind
     * more than 3x the total number of entities in the environment, the server will terminate your session.
     * In this case you must start a new session by sending a request with an empty session token.
     */
    public andurilHttpResponse<EntityEventResponse> longPollEntityEvents(EntityEventRequest request) {
        return longPollEntityEvents(request, null);
    }

    /**
     * This is a long polling API that will first return all pre-existing data and then return all new data as
     * it becomes available. If you want to start a new polling session then open a request with an empty
     * 'sessionToken' in the request body. The server will return a new session token in the response.
     * If you want to retrieve the next batch of results from an existing polling session then send the session
     * token you received from the server in the request body. If no new data is available then the server will
     * hold the connection open for up to 5 minutes. After the 5 minute timeout period, the server will close the
     * connection with no results and you may resume polling with the same session token. If your session falls behind
     * more than 3x the total number of entities in the environment, the server will terminate your session.
     * In this case you must start a new session by sending a request with an empty session token.
     */
    public andurilHttpResponse<EntityEventResponse> longPollEntityEvents(
            EntityEventRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/entities/events")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new andurilException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new andurilHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EntityEventResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 408:
                        throw new RequestTimeoutError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 429:
                        throw new TooManyRequestsError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new andurilApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new andurilException("Network error executing HTTP request", e);
        }
    }
}
