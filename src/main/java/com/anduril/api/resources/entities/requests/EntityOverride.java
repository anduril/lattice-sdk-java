/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.entities.requests;

import com.anduril.api.core.ObjectMappers;
import com.anduril.api.types.Entity;
import com.anduril.api.types.Provenance;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityOverride.Builder.class)
public final class EntityOverride {
    private final Optional<Entity> entity;

    private final Optional<Provenance> provenance;

    private final Map<String, Object> additionalProperties;

    private EntityOverride(
            Optional<Entity> entity, Optional<Provenance> provenance, Map<String, Object> additionalProperties) {
        this.entity = entity;
        this.provenance = provenance;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The entity containing the overridden fields. The service will extract the overridable fields from
     * the object and ignore all other fields.
     */
    @JsonProperty("entity")
    public Optional<Entity> getEntity() {
        return entity;
    }

    /**
     * @return Additional information about the source of the override.
     */
    @JsonProperty("provenance")
    public Optional<Provenance> getProvenance() {
        return provenance;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityOverride && equalTo((EntityOverride) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityOverride other) {
        return entity.equals(other.entity) && provenance.equals(other.provenance);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.entity, this.provenance);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Entity> entity = Optional.empty();

        private Optional<Provenance> provenance = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EntityOverride other) {
            entity(other.getEntity());
            provenance(other.getProvenance());
            return this;
        }

        /**
         * <p>The entity containing the overridden fields. The service will extract the overridable fields from
         * the object and ignore all other fields.</p>
         */
        @JsonSetter(value = "entity", nulls = Nulls.SKIP)
        public Builder entity(Optional<Entity> entity) {
            this.entity = entity;
            return this;
        }

        public Builder entity(Entity entity) {
            this.entity = Optional.ofNullable(entity);
            return this;
        }

        /**
         * <p>Additional information about the source of the override.</p>
         */
        @JsonSetter(value = "provenance", nulls = Nulls.SKIP)
        public Builder provenance(Optional<Provenance> provenance) {
            this.provenance = provenance;
            return this;
        }

        public Builder provenance(Provenance provenance) {
            this.provenance = Optional.ofNullable(provenance);
            return this;
        }

        public EntityOverride build() {
            return new EntityOverride(entity, provenance, additionalProperties);
        }
    }
}
