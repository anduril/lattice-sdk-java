/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.api.resources.entities.requests;

import com.anduril.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityStreamRequest.Builder.class)
public final class EntityStreamRequest {
    private final Optional<Integer> heartbeatIntervalMs;

    private final Optional<Boolean> preExistingOnly;

    private final Optional<List<String>> componentsToInclude;

    private final Map<String, Object> additionalProperties;

    private EntityStreamRequest(
            Optional<Integer> heartbeatIntervalMs,
            Optional<Boolean> preExistingOnly,
            Optional<List<String>> componentsToInclude,
            Map<String, Object> additionalProperties) {
        this.heartbeatIntervalMs = heartbeatIntervalMs;
        this.preExistingOnly = preExistingOnly;
        this.componentsToInclude = componentsToInclude;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return at what interval to send heartbeat events, defaults to 30s.
     */
    @JsonProperty("heartbeatIntervalMS")
    public Optional<Integer> getHeartbeatIntervalMs() {
        return heartbeatIntervalMs;
    }

    /**
     * @return only stream pre-existing entities in the environment and then close the connection, defaults to false.
     */
    @JsonProperty("preExistingOnly")
    public Optional<Boolean> getPreExistingOnly() {
        return preExistingOnly;
    }

    /**
     * @return list of components to include, leave empty to include all components.
     */
    @JsonProperty("componentsToInclude")
    public Optional<List<String>> getComponentsToInclude() {
        return componentsToInclude;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityStreamRequest && equalTo((EntityStreamRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityStreamRequest other) {
        return heartbeatIntervalMs.equals(other.heartbeatIntervalMs)
                && preExistingOnly.equals(other.preExistingOnly)
                && componentsToInclude.equals(other.componentsToInclude);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.heartbeatIntervalMs, this.preExistingOnly, this.componentsToInclude);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> heartbeatIntervalMs = Optional.empty();

        private Optional<Boolean> preExistingOnly = Optional.empty();

        private Optional<List<String>> componentsToInclude = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EntityStreamRequest other) {
            heartbeatIntervalMs(other.getHeartbeatIntervalMs());
            preExistingOnly(other.getPreExistingOnly());
            componentsToInclude(other.getComponentsToInclude());
            return this;
        }

        /**
         * <p>at what interval to send heartbeat events, defaults to 30s.</p>
         */
        @JsonSetter(value = "heartbeatIntervalMS", nulls = Nulls.SKIP)
        public Builder heartbeatIntervalMs(Optional<Integer> heartbeatIntervalMs) {
            this.heartbeatIntervalMs = heartbeatIntervalMs;
            return this;
        }

        public Builder heartbeatIntervalMs(Integer heartbeatIntervalMs) {
            this.heartbeatIntervalMs = Optional.ofNullable(heartbeatIntervalMs);
            return this;
        }

        /**
         * <p>only stream pre-existing entities in the environment and then close the connection, defaults to false.</p>
         */
        @JsonSetter(value = "preExistingOnly", nulls = Nulls.SKIP)
        public Builder preExistingOnly(Optional<Boolean> preExistingOnly) {
            this.preExistingOnly = preExistingOnly;
            return this;
        }

        public Builder preExistingOnly(Boolean preExistingOnly) {
            this.preExistingOnly = Optional.ofNullable(preExistingOnly);
            return this;
        }

        /**
         * <p>list of components to include, leave empty to include all components.</p>
         */
        @JsonSetter(value = "componentsToInclude", nulls = Nulls.SKIP)
        public Builder componentsToInclude(Optional<List<String>> componentsToInclude) {
            this.componentsToInclude = componentsToInclude;
            return this;
        }

        public Builder componentsToInclude(List<String> componentsToInclude) {
            this.componentsToInclude = Optional.ofNullable(componentsToInclude);
            return this;
        }

        public EntityStreamRequest build() {
            return new EntityStreamRequest(
                    heartbeatIntervalMs, preExistingOnly, componentsToInclude, additionalProperties);
        }
    }
}
