/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ComponentHealth.Builder.class)
public final class ComponentHealth {
    private final Optional<String> id;

    private final Optional<String> name;

    private final Optional<ComponentHealthHealth> health;

    private final Optional<List<ComponentMessage>> messages;

    private final Optional<OffsetDateTime> updateTime;

    private final Map<String, Object> additionalProperties;

    private ComponentHealth(
            Optional<String> id,
            Optional<String> name,
            Optional<ComponentHealthHealth> health,
            Optional<List<ComponentMessage>> messages,
            Optional<OffsetDateTime> updateTime,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.health = health;
        this.messages = messages;
        this.updateTime = updateTime;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Consistent internal ID for this component.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return Display name for this component.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return Health for this component.
     */
    @JsonProperty("health")
    public Optional<ComponentHealthHealth> getHealth() {
        return health;
    }

    /**
     * @return Human-readable describing the component state. These messages should be understandable by end users.
     */
    @JsonProperty("messages")
    public Optional<List<ComponentMessage>> getMessages() {
        return messages;
    }

    /**
     * @return The last update time for this specific component.
     * If this timestamp is unset, the data is assumed to be most recent
     */
    @JsonProperty("updateTime")
    public Optional<OffsetDateTime> getUpdateTime() {
        return updateTime;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ComponentHealth && equalTo((ComponentHealth) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ComponentHealth other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && health.equals(other.health)
                && messages.equals(other.messages)
                && updateTime.equals(other.updateTime);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.health, this.messages, this.updateTime);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<ComponentHealthHealth> health = Optional.empty();

        private Optional<List<ComponentMessage>> messages = Optional.empty();

        private Optional<OffsetDateTime> updateTime = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ComponentHealth other) {
            id(other.getId());
            name(other.getName());
            health(other.getHealth());
            messages(other.getMessages());
            updateTime(other.getUpdateTime());
            return this;
        }

        /**
         * <p>Consistent internal ID for this component.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>Display name for this component.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>Health for this component.</p>
         */
        @JsonSetter(value = "health", nulls = Nulls.SKIP)
        public Builder health(Optional<ComponentHealthHealth> health) {
            this.health = health;
            return this;
        }

        public Builder health(ComponentHealthHealth health) {
            this.health = Optional.ofNullable(health);
            return this;
        }

        /**
         * <p>Human-readable describing the component state. These messages should be understandable by end users.</p>
         */
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<ComponentMessage>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<ComponentMessage> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>The last update time for this specific component.
         * If this timestamp is unset, the data is assumed to be most recent</p>
         */
        @JsonSetter(value = "updateTime", nulls = Nulls.SKIP)
        public Builder updateTime(Optional<OffsetDateTime> updateTime) {
            this.updateTime = updateTime;
            return this;
        }

        public Builder updateTime(OffsetDateTime updateTime) {
            this.updateTime = Optional.ofNullable(updateTime);
            return this;
        }

        public ComponentHealth build() {
            return new ComponentHealth(id, name, health, messages, updateTime, additionalProperties);
        }
    }
}
