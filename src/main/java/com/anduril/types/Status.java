/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Status.Builder.class)
public final class Status {
    private final Optional<String> platformActivity;

    private final Optional<String> role;

    private final Map<String, Object> additionalProperties;

    private Status(Optional<String> platformActivity, Optional<String> role, Map<String, Object> additionalProperties) {
        this.platformActivity = platformActivity;
        this.role = role;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A string that describes the activity that the entity is performing.
     * Examples include &quot;RECONNAISSANCE&quot;, &quot;INTERDICTION&quot;, &quot;RETURN TO BASE (RTB)&quot;, &quot;PREPARING FOR LAUNCH&quot;.
     */
    @JsonProperty("platformActivity")
    public Optional<String> getPlatformActivity() {
        return platformActivity;
    }

    /**
     * @return A human-readable string that describes the role the entity is currently performing. E.g. &quot;Team Member&quot;, &quot;Commander&quot;.
     */
    @JsonProperty("role")
    public Optional<String> getRole() {
        return role;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Status && equalTo((Status) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Status other) {
        return platformActivity.equals(other.platformActivity) && role.equals(other.role);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.platformActivity, this.role);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> platformActivity = Optional.empty();

        private Optional<String> role = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Status other) {
            platformActivity(other.getPlatformActivity());
            role(other.getRole());
            return this;
        }

        /**
         * <p>A string that describes the activity that the entity is performing.
         * Examples include &quot;RECONNAISSANCE&quot;, &quot;INTERDICTION&quot;, &quot;RETURN TO BASE (RTB)&quot;, &quot;PREPARING FOR LAUNCH&quot;.</p>
         */
        @JsonSetter(value = "platformActivity", nulls = Nulls.SKIP)
        public Builder platformActivity(Optional<String> platformActivity) {
            this.platformActivity = platformActivity;
            return this;
        }

        public Builder platformActivity(String platformActivity) {
            this.platformActivity = Optional.ofNullable(platformActivity);
            return this;
        }

        /**
         * <p>A human-readable string that describes the role the entity is currently performing. E.g. &quot;Team Member&quot;, &quot;Commander&quot;.</p>
         */
        @JsonSetter(value = "role", nulls = Nulls.SKIP)
        public Builder role(Optional<String> role) {
            this.role = role;
            return this;
        }

        public Builder role(String role) {
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Status build() {
            return new Status(platformActivity, role, additionalProperties);
        }
    }
}
