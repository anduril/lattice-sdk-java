/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MilStd2525C.Builder.class)
public final class MilStd2525C {
    private final Optional<String> sidc;

    private final Map<String, Object> additionalProperties;

    private MilStd2525C(Optional<String> sidc, Map<String, Object> additionalProperties) {
        this.sidc = sidc;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sidc")
    public Optional<String> getSidc() {
        return sidc;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MilStd2525C && equalTo((MilStd2525C) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MilStd2525C other) {
        return sidc.equals(other.sidc);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sidc);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> sidc = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MilStd2525C other) {
            sidc(other.getSidc());
            return this;
        }

        @JsonSetter(value = "sidc", nulls = Nulls.SKIP)
        public Builder sidc(Optional<String> sidc) {
            this.sidc = sidc;
            return this;
        }

        public Builder sidc(String sidc) {
            this.sidc = Optional.ofNullable(sidc);
            return this;
        }

        public MilStd2525C build() {
            return new MilStd2525C(sidc, additionalProperties);
        }
    }
}
