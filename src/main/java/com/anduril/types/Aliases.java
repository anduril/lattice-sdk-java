/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Aliases.Builder.class)
public final class Aliases {
    private final Optional<List<AlternateId>> alternateIds;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private Aliases(
            Optional<List<AlternateId>> alternateIds, Optional<String> name, Map<String, Object> additionalProperties) {
        this.alternateIds = alternateIds;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("alternateIds")
    public Optional<List<AlternateId>> getAlternateIds() {
        return alternateIds;
    }

    /**
     * @return The best available version of the entity's display name.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Aliases && equalTo((Aliases) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Aliases other) {
        return alternateIds.equals(other.alternateIds) && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.alternateIds, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<AlternateId>> alternateIds = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Aliases other) {
            alternateIds(other.getAlternateIds());
            name(other.getName());
            return this;
        }

        @JsonSetter(value = "alternateIds", nulls = Nulls.SKIP)
        public Builder alternateIds(Optional<List<AlternateId>> alternateIds) {
            this.alternateIds = alternateIds;
            return this;
        }

        public Builder alternateIds(List<AlternateId> alternateIds) {
            this.alternateIds = Optional.ofNullable(alternateIds);
            return this;
        }

        /**
         * <p>The best available version of the entity's display name.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Aliases build() {
            return new Aliases(alternateIds, name, additionalProperties);
        }
    }
}
