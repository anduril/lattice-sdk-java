/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CronWindow.Builder.class)
public final class CronWindow {
    private final Optional<String> cronExpression;

    private final Optional<String> durationMillis;

    private final Map<String, Object> additionalProperties;

    private CronWindow(
            Optional<String> cronExpression,
            Optional<String> durationMillis,
            Map<String, Object> additionalProperties) {
        this.cronExpression = cronExpression;
        this.durationMillis = durationMillis;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return in UTC, describes when and at what cadence this window starts, in the quartz flavor of cron
     * <p>examples:
     * This schedule is begins at 7:00:00am UTC everyday between Monday and Friday
     * 0 0 7 ? * MON-FRI *
     * This schedule begins every 5 minutes starting at 12:00:00pm UTC until 8:00:00pm UTC everyday
     * 0 0/5 12-20 * * ? *
     * This schedule begins at 12:00:00pm UTC on March 2nd 2023
     * 0 0 12 2 3 ? 2023</p>
     */
    @JsonProperty("cronExpression")
    public Optional<String> getCronExpression() {
        return cronExpression;
    }

    /**
     * @return describes the duration
     */
    @JsonProperty("durationMillis")
    public Optional<String> getDurationMillis() {
        return durationMillis;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CronWindow && equalTo((CronWindow) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CronWindow other) {
        return cronExpression.equals(other.cronExpression) && durationMillis.equals(other.durationMillis);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cronExpression, this.durationMillis);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cronExpression = Optional.empty();

        private Optional<String> durationMillis = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CronWindow other) {
            cronExpression(other.getCronExpression());
            durationMillis(other.getDurationMillis());
            return this;
        }

        /**
         * <p>in UTC, describes when and at what cadence this window starts, in the quartz flavor of cron</p>
         * <p>examples:
         * This schedule is begins at 7:00:00am UTC everyday between Monday and Friday
         * 0 0 7 ? * MON-FRI *
         * This schedule begins every 5 minutes starting at 12:00:00pm UTC until 8:00:00pm UTC everyday
         * 0 0/5 12-20 * * ? *
         * This schedule begins at 12:00:00pm UTC on March 2nd 2023
         * 0 0 12 2 3 ? 2023</p>
         */
        @JsonSetter(value = "cronExpression", nulls = Nulls.SKIP)
        public Builder cronExpression(Optional<String> cronExpression) {
            this.cronExpression = cronExpression;
            return this;
        }

        public Builder cronExpression(String cronExpression) {
            this.cronExpression = Optional.ofNullable(cronExpression);
            return this;
        }

        /**
         * <p>describes the duration</p>
         */
        @JsonSetter(value = "durationMillis", nulls = Nulls.SKIP)
        public Builder durationMillis(Optional<String> durationMillis) {
            this.durationMillis = durationMillis;
            return this;
        }

        public Builder durationMillis(String durationMillis) {
            this.durationMillis = Optional.ofNullable(durationMillis);
            return this;
        }

        public CronWindow build() {
            return new CronWindow(cronExpression, durationMillis, additionalProperties);
        }
    }
}
