/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Lla.Builder.class)
public final class Lla {
    private final Optional<Double> lon;

    private final Optional<Double> lat;

    private final Optional<Double> alt;

    private final Optional<Boolean> is2D;

    private final Optional<LlaAltitudeReference> altitudeReference;

    private final Map<String, Object> additionalProperties;

    private Lla(
            Optional<Double> lon,
            Optional<Double> lat,
            Optional<Double> alt,
            Optional<Boolean> is2D,
            Optional<LlaAltitudeReference> altitudeReference,
            Map<String, Object> additionalProperties) {
        this.lon = lon;
        this.lat = lat;
        this.alt = alt;
        this.is2D = is2D;
        this.altitudeReference = altitudeReference;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("lon")
    public Optional<Double> getLon() {
        return lon;
    }

    @JsonProperty("lat")
    public Optional<Double> getLat() {
        return lat;
    }

    @JsonProperty("alt")
    public Optional<Double> getAlt() {
        return alt;
    }

    @JsonProperty("is2d")
    public Optional<Boolean> getIs2D() {
        return is2D;
    }

    /**
     * @return Meaning of alt.
     * altitude in meters above either WGS84 or EGM96, use altitude_reference to
     * determine what zero means.
     */
    @JsonProperty("altitudeReference")
    public Optional<LlaAltitudeReference> getAltitudeReference() {
        return altitudeReference;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Lla && equalTo((Lla) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Lla other) {
        return lon.equals(other.lon)
                && lat.equals(other.lat)
                && alt.equals(other.alt)
                && is2D.equals(other.is2D)
                && altitudeReference.equals(other.altitudeReference);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.lon, this.lat, this.alt, this.is2D, this.altitudeReference);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> lon = Optional.empty();

        private Optional<Double> lat = Optional.empty();

        private Optional<Double> alt = Optional.empty();

        private Optional<Boolean> is2D = Optional.empty();

        private Optional<LlaAltitudeReference> altitudeReference = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Lla other) {
            lon(other.getLon());
            lat(other.getLat());
            alt(other.getAlt());
            is2D(other.getIs2D());
            altitudeReference(other.getAltitudeReference());
            return this;
        }

        @JsonSetter(value = "lon", nulls = Nulls.SKIP)
        public Builder lon(Optional<Double> lon) {
            this.lon = lon;
            return this;
        }

        public Builder lon(Double lon) {
            this.lon = Optional.ofNullable(lon);
            return this;
        }

        @JsonSetter(value = "lat", nulls = Nulls.SKIP)
        public Builder lat(Optional<Double> lat) {
            this.lat = lat;
            return this;
        }

        public Builder lat(Double lat) {
            this.lat = Optional.ofNullable(lat);
            return this;
        }

        @JsonSetter(value = "alt", nulls = Nulls.SKIP)
        public Builder alt(Optional<Double> alt) {
            this.alt = alt;
            return this;
        }

        public Builder alt(Double alt) {
            this.alt = Optional.ofNullable(alt);
            return this;
        }

        @JsonSetter(value = "is2d", nulls = Nulls.SKIP)
        public Builder is2D(Optional<Boolean> is2D) {
            this.is2D = is2D;
            return this;
        }

        public Builder is2D(Boolean is2D) {
            this.is2D = Optional.ofNullable(is2D);
            return this;
        }

        /**
         * <p>Meaning of alt.
         * altitude in meters above either WGS84 or EGM96, use altitude_reference to
         * determine what zero means.</p>
         */
        @JsonSetter(value = "altitudeReference", nulls = Nulls.SKIP)
        public Builder altitudeReference(Optional<LlaAltitudeReference> altitudeReference) {
            this.altitudeReference = altitudeReference;
            return this;
        }

        public Builder altitudeReference(LlaAltitudeReference altitudeReference) {
            this.altitudeReference = Optional.ofNullable(altitudeReference);
            return this;
        }

        public Lla build() {
            return new Lla(lon, lat, alt, is2D, altitudeReference, additionalProperties);
        }
    }
}
