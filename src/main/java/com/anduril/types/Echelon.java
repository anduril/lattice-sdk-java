/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Echelon.Builder.class)
public final class Echelon {
    private final Optional<EchelonArmyEchelon> armyEchelon;

    private final Map<String, Object> additionalProperties;

    private Echelon(Optional<EchelonArmyEchelon> armyEchelon, Map<String, Object> additionalProperties) {
        this.armyEchelon = armyEchelon;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("armyEchelon")
    public Optional<EchelonArmyEchelon> getArmyEchelon() {
        return armyEchelon;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Echelon && equalTo((Echelon) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Echelon other) {
        return armyEchelon.equals(other.armyEchelon);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.armyEchelon);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<EchelonArmyEchelon> armyEchelon = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Echelon other) {
            armyEchelon(other.getArmyEchelon());
            return this;
        }

        @JsonSetter(value = "armyEchelon", nulls = Nulls.SKIP)
        public Builder armyEchelon(Optional<EchelonArmyEchelon> armyEchelon) {
            this.armyEchelon = armyEchelon;
            return this;
        }

        public Builder armyEchelon(EchelonArmyEchelon armyEchelon) {
            this.armyEchelon = Optional.ofNullable(armyEchelon);
            return this;
        }

        public Echelon build() {
            return new Echelon(armyEchelon, additionalProperties);
        }
    }
}
