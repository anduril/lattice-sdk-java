/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EmitterNotation.Builder.class)
public final class EmitterNotation {
    private final Optional<String> emitterNotation;

    private final Optional<Double> confidence;

    private final Map<String, Object> additionalProperties;

    private EmitterNotation(
            Optional<String> emitterNotation, Optional<Double> confidence, Map<String, Object> additionalProperties) {
        this.emitterNotation = emitterNotation;
        this.confidence = confidence;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("emitterNotation")
    public Optional<String> getEmitterNotation() {
        return emitterNotation;
    }

    /**
     * @return confidence as a percentage that the emitter notation in this component is accurate
     */
    @JsonProperty("confidence")
    public Optional<Double> getConfidence() {
        return confidence;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmitterNotation && equalTo((EmitterNotation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmitterNotation other) {
        return emitterNotation.equals(other.emitterNotation) && confidence.equals(other.confidence);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.emitterNotation, this.confidence);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> emitterNotation = Optional.empty();

        private Optional<Double> confidence = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EmitterNotation other) {
            emitterNotation(other.getEmitterNotation());
            confidence(other.getConfidence());
            return this;
        }

        @JsonSetter(value = "emitterNotation", nulls = Nulls.SKIP)
        public Builder emitterNotation(Optional<String> emitterNotation) {
            this.emitterNotation = emitterNotation;
            return this;
        }

        public Builder emitterNotation(String emitterNotation) {
            this.emitterNotation = Optional.ofNullable(emitterNotation);
            return this;
        }

        /**
         * <p>confidence as a percentage that the emitter notation in this component is accurate</p>
         */
        @JsonSetter(value = "confidence", nulls = Nulls.SKIP)
        public Builder confidence(Optional<Double> confidence) {
            this.confidence = confidence;
            return this;
        }

        public Builder confidence(Double confidence) {
            this.confidence = Optional.ofNullable(confidence);
            return this;
        }

        public EmitterNotation build() {
            return new EmitterNotation(emitterNotation, confidence, additionalProperties);
        }
    }
}
