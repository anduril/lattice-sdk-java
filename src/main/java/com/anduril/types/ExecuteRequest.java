/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExecuteRequest.Builder.class)
public final class ExecuteRequest {
    private final Optional<Task> task;

    private final Map<String, Object> additionalProperties;

    private ExecuteRequest(Optional<Task> task, Map<String, Object> additionalProperties) {
        this.task = task;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Task to execute.
     */
    @JsonProperty("task")
    public Optional<Task> getTask() {
        return task;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExecuteRequest && equalTo((ExecuteRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExecuteRequest other) {
        return task.equals(other.task);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.task);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Task> task = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExecuteRequest other) {
            task(other.getTask());
            return this;
        }

        /**
         * <p>Task to execute.</p>
         */
        @JsonSetter(value = "task", nulls = Nulls.SKIP)
        public Builder task(Optional<Task> task) {
            this.task = task;
            return this;
        }

        public Builder task(Task task) {
            this.task = Optional.ofNullable(task);
            return this;
        }

        public ExecuteRequest build() {
            return new ExecuteRequest(task, additionalProperties);
        }
    }
}
