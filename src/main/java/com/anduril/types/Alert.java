/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Alert.Builder.class)
public final class Alert {
    private final Optional<String> alertCode;

    private final Optional<String> description;

    private final Optional<AlertLevel> level;

    private final Optional<OffsetDateTime> activatedTime;

    private final Optional<List<AlertCondition>> activeConditions;

    private final Map<String, Object> additionalProperties;

    private Alert(
            Optional<String> alertCode,
            Optional<String> description,
            Optional<AlertLevel> level,
            Optional<OffsetDateTime> activatedTime,
            Optional<List<AlertCondition>> activeConditions,
            Map<String, Object> additionalProperties) {
        this.alertCode = alertCode;
        this.description = description;
        this.level = level;
        this.activatedTime = activatedTime;
        this.activeConditions = activeConditions;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Short, machine-readable code that describes this alert. This code is intended to provide systems off-asset
     * with a lookup key to retrieve more detailed information about the alert.
     */
    @JsonProperty("alertCode")
    public Optional<String> getAlertCode() {
        return alertCode;
    }

    /**
     * @return Human-readable description of this alert. The description is intended for display in the UI for human
     * understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
     * provides no dynamic substitutions, then prefer lookup based on alert_code.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return Alert level (Warning, Caution, or Advisory).
     */
    @JsonProperty("level")
    public Optional<AlertLevel> getLevel() {
        return level;
    }

    /**
     * @return Time at which this alert was activated.
     */
    @JsonProperty("activatedTime")
    public Optional<OffsetDateTime> getActivatedTime() {
        return activatedTime;
    }

    /**
     * @return Set of conditions which have activated this alert.
     */
    @JsonProperty("activeConditions")
    public Optional<List<AlertCondition>> getActiveConditions() {
        return activeConditions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Alert && equalTo((Alert) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Alert other) {
        return alertCode.equals(other.alertCode)
                && description.equals(other.description)
                && level.equals(other.level)
                && activatedTime.equals(other.activatedTime)
                && activeConditions.equals(other.activeConditions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.alertCode, this.description, this.level, this.activatedTime, this.activeConditions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> alertCode = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<AlertLevel> level = Optional.empty();

        private Optional<OffsetDateTime> activatedTime = Optional.empty();

        private Optional<List<AlertCondition>> activeConditions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Alert other) {
            alertCode(other.getAlertCode());
            description(other.getDescription());
            level(other.getLevel());
            activatedTime(other.getActivatedTime());
            activeConditions(other.getActiveConditions());
            return this;
        }

        /**
         * <p>Short, machine-readable code that describes this alert. This code is intended to provide systems off-asset
         * with a lookup key to retrieve more detailed information about the alert.</p>
         */
        @JsonSetter(value = "alertCode", nulls = Nulls.SKIP)
        public Builder alertCode(Optional<String> alertCode) {
            this.alertCode = alertCode;
            return this;
        }

        public Builder alertCode(String alertCode) {
            this.alertCode = Optional.ofNullable(alertCode);
            return this;
        }

        /**
         * <p>Human-readable description of this alert. The description is intended for display in the UI for human
         * understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
         * provides no dynamic substitutions, then prefer lookup based on alert_code.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>Alert level (Warning, Caution, or Advisory).</p>
         */
        @JsonSetter(value = "level", nulls = Nulls.SKIP)
        public Builder level(Optional<AlertLevel> level) {
            this.level = level;
            return this;
        }

        public Builder level(AlertLevel level) {
            this.level = Optional.ofNullable(level);
            return this;
        }

        /**
         * <p>Time at which this alert was activated.</p>
         */
        @JsonSetter(value = "activatedTime", nulls = Nulls.SKIP)
        public Builder activatedTime(Optional<OffsetDateTime> activatedTime) {
            this.activatedTime = activatedTime;
            return this;
        }

        public Builder activatedTime(OffsetDateTime activatedTime) {
            this.activatedTime = Optional.ofNullable(activatedTime);
            return this;
        }

        /**
         * <p>Set of conditions which have activated this alert.</p>
         */
        @JsonSetter(value = "activeConditions", nulls = Nulls.SKIP)
        public Builder activeConditions(Optional<List<AlertCondition>> activeConditions) {
            this.activeConditions = activeConditions;
            return this;
        }

        public Builder activeConditions(List<AlertCondition> activeConditions) {
            this.activeConditions = Optional.ofNullable(activeConditions);
            return this;
        }

        public Alert build() {
            return new Alert(alertCode, description, level, activatedTime, activeConditions, additionalProperties);
        }
    }
}
