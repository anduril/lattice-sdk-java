/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Classification.Builder.class)
public final class Classification {
    private final Optional<ClassificationInformation> default_;

    private final Optional<List<FieldClassificationInformation>> fields;

    private final Map<String, Object> additionalProperties;

    private Classification(
            Optional<ClassificationInformation> default_,
            Optional<List<FieldClassificationInformation>> fields,
            Map<String, Object> additionalProperties) {
        this.default_ = default_;
        this.fields = fields;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The default classification information which should be assumed to apply to everything in
     * the entity unless a specific field level classification is present.
     */
    @JsonProperty("default")
    public Optional<ClassificationInformation> getDefault() {
        return default_;
    }

    /**
     * @return The set of individual field classification information which should always precedence
     * over the default classification information.
     */
    @JsonProperty("fields")
    public Optional<List<FieldClassificationInformation>> getFields() {
        return fields;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Classification && equalTo((Classification) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Classification other) {
        return default_.equals(other.default_) && fields.equals(other.fields);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.default_, this.fields);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ClassificationInformation> default_ = Optional.empty();

        private Optional<List<FieldClassificationInformation>> fields = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Classification other) {
            default_(other.getDefault());
            fields(other.getFields());
            return this;
        }

        /**
         * <p>The default classification information which should be assumed to apply to everything in
         * the entity unless a specific field level classification is present.</p>
         */
        @JsonSetter(value = "default", nulls = Nulls.SKIP)
        public Builder default_(Optional<ClassificationInformation> default_) {
            this.default_ = default_;
            return this;
        }

        public Builder default_(ClassificationInformation default_) {
            this.default_ = Optional.ofNullable(default_);
            return this;
        }

        /**
         * <p>The set of individual field classification information which should always precedence
         * over the default classification information.</p>
         */
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public Builder fields(Optional<List<FieldClassificationInformation>> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(List<FieldClassificationInformation> fields) {
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        public Classification build() {
            return new Classification(default_, fields, additionalProperties);
        }
    }
}
