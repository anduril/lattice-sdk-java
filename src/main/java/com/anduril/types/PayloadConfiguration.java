/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayloadConfiguration.Builder.class)
public final class PayloadConfiguration {
    private final Optional<String> capabilityId;

    private final Optional<Integer> quantity;

    private final Optional<List<PayloadConfigurationEffectiveEnvironmentItem>> effectiveEnvironment;

    private final Optional<PayloadConfigurationPayloadOperationalState> payloadOperationalState;

    private final Optional<String> payloadDescription;

    private final Map<String, Object> additionalProperties;

    private PayloadConfiguration(
            Optional<String> capabilityId,
            Optional<Integer> quantity,
            Optional<List<PayloadConfigurationEffectiveEnvironmentItem>> effectiveEnvironment,
            Optional<PayloadConfigurationPayloadOperationalState> payloadOperationalState,
            Optional<String> payloadDescription,
            Map<String, Object> additionalProperties) {
        this.capabilityId = capabilityId;
        this.quantity = quantity;
        this.effectiveEnvironment = effectiveEnvironment;
        this.payloadOperationalState = payloadOperationalState;
        this.payloadDescription = payloadDescription;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Identifying ID for the capability.
     * This ID may be used multiple times to represent payloads that are the same capability but have different operational states
     */
    @JsonProperty("capabilityId")
    public Optional<String> getCapabilityId() {
        return capabilityId;
    }

    /**
     * @return The number of payloads currently available in the configuration.
     */
    @JsonProperty("quantity")
    public Optional<Integer> getQuantity() {
        return quantity;
    }

    /**
     * @return The target environments the configuration is effective against.
     */
    @JsonProperty("effectiveEnvironment")
    public Optional<List<PayloadConfigurationEffectiveEnvironmentItem>> getEffectiveEnvironment() {
        return effectiveEnvironment;
    }

    /**
     * @return The operational state of this payload.
     */
    @JsonProperty("payloadOperationalState")
    public Optional<PayloadConfigurationPayloadOperationalState> getPayloadOperationalState() {
        return payloadOperationalState;
    }

    /**
     * @return A human readable description of the payload
     */
    @JsonProperty("payloadDescription")
    public Optional<String> getPayloadDescription() {
        return payloadDescription;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayloadConfiguration && equalTo((PayloadConfiguration) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayloadConfiguration other) {
        return capabilityId.equals(other.capabilityId)
                && quantity.equals(other.quantity)
                && effectiveEnvironment.equals(other.effectiveEnvironment)
                && payloadOperationalState.equals(other.payloadOperationalState)
                && payloadDescription.equals(other.payloadDescription);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.capabilityId,
                this.quantity,
                this.effectiveEnvironment,
                this.payloadOperationalState,
                this.payloadDescription);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> capabilityId = Optional.empty();

        private Optional<Integer> quantity = Optional.empty();

        private Optional<List<PayloadConfigurationEffectiveEnvironmentItem>> effectiveEnvironment = Optional.empty();

        private Optional<PayloadConfigurationPayloadOperationalState> payloadOperationalState = Optional.empty();

        private Optional<String> payloadDescription = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayloadConfiguration other) {
            capabilityId(other.getCapabilityId());
            quantity(other.getQuantity());
            effectiveEnvironment(other.getEffectiveEnvironment());
            payloadOperationalState(other.getPayloadOperationalState());
            payloadDescription(other.getPayloadDescription());
            return this;
        }

        /**
         * <p>Identifying ID for the capability.
         * This ID may be used multiple times to represent payloads that are the same capability but have different operational states</p>
         */
        @JsonSetter(value = "capabilityId", nulls = Nulls.SKIP)
        public Builder capabilityId(Optional<String> capabilityId) {
            this.capabilityId = capabilityId;
            return this;
        }

        public Builder capabilityId(String capabilityId) {
            this.capabilityId = Optional.ofNullable(capabilityId);
            return this;
        }

        /**
         * <p>The number of payloads currently available in the configuration.</p>
         */
        @JsonSetter(value = "quantity", nulls = Nulls.SKIP)
        public Builder quantity(Optional<Integer> quantity) {
            this.quantity = quantity;
            return this;
        }

        public Builder quantity(Integer quantity) {
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * <p>The target environments the configuration is effective against.</p>
         */
        @JsonSetter(value = "effectiveEnvironment", nulls = Nulls.SKIP)
        public Builder effectiveEnvironment(
                Optional<List<PayloadConfigurationEffectiveEnvironmentItem>> effectiveEnvironment) {
            this.effectiveEnvironment = effectiveEnvironment;
            return this;
        }

        public Builder effectiveEnvironment(List<PayloadConfigurationEffectiveEnvironmentItem> effectiveEnvironment) {
            this.effectiveEnvironment = Optional.ofNullable(effectiveEnvironment);
            return this;
        }

        /**
         * <p>The operational state of this payload.</p>
         */
        @JsonSetter(value = "payloadOperationalState", nulls = Nulls.SKIP)
        public Builder payloadOperationalState(
                Optional<PayloadConfigurationPayloadOperationalState> payloadOperationalState) {
            this.payloadOperationalState = payloadOperationalState;
            return this;
        }

        public Builder payloadOperationalState(PayloadConfigurationPayloadOperationalState payloadOperationalState) {
            this.payloadOperationalState = Optional.ofNullable(payloadOperationalState);
            return this;
        }

        /**
         * <p>A human readable description of the payload</p>
         */
        @JsonSetter(value = "payloadDescription", nulls = Nulls.SKIP)
        public Builder payloadDescription(Optional<String> payloadDescription) {
            this.payloadDescription = payloadDescription;
            return this;
        }

        public Builder payloadDescription(String payloadDescription) {
            this.payloadDescription = Optional.ofNullable(payloadDescription);
            return this;
        }

        public PayloadConfiguration build() {
            return new PayloadConfiguration(
                    capabilityId,
                    quantity,
                    effectiveEnvironment,
                    payloadOperationalState,
                    payloadDescription,
                    additionalProperties);
        }
    }
}
