/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GeoEllipsoid.Builder.class)
public final class GeoEllipsoid {
    private final Optional<Double> forwardAxisM;

    private final Optional<Double> sideAxisM;

    private final Optional<Double> upAxisM;

    private final Map<String, Object> additionalProperties;

    private GeoEllipsoid(
            Optional<Double> forwardAxisM,
            Optional<Double> sideAxisM,
            Optional<Double> upAxisM,
            Map<String, Object> additionalProperties) {
        this.forwardAxisM = forwardAxisM;
        this.sideAxisM = sideAxisM;
        this.upAxisM = upAxisM;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Defines the distance from the center point to the surface along the forward axis
     */
    @JsonProperty("forwardAxisM")
    public Optional<Double> getForwardAxisM() {
        return forwardAxisM;
    }

    /**
     * @return Defines the distance from the center point to the surface along the side axis
     */
    @JsonProperty("sideAxisM")
    public Optional<Double> getSideAxisM() {
        return sideAxisM;
    }

    /**
     * @return Defines the distance from the center point to the surface along the up axis
     */
    @JsonProperty("upAxisM")
    public Optional<Double> getUpAxisM() {
        return upAxisM;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GeoEllipsoid && equalTo((GeoEllipsoid) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GeoEllipsoid other) {
        return forwardAxisM.equals(other.forwardAxisM)
                && sideAxisM.equals(other.sideAxisM)
                && upAxisM.equals(other.upAxisM);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.forwardAxisM, this.sideAxisM, this.upAxisM);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> forwardAxisM = Optional.empty();

        private Optional<Double> sideAxisM = Optional.empty();

        private Optional<Double> upAxisM = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GeoEllipsoid other) {
            forwardAxisM(other.getForwardAxisM());
            sideAxisM(other.getSideAxisM());
            upAxisM(other.getUpAxisM());
            return this;
        }

        /**
         * <p>Defines the distance from the center point to the surface along the forward axis</p>
         */
        @JsonSetter(value = "forwardAxisM", nulls = Nulls.SKIP)
        public Builder forwardAxisM(Optional<Double> forwardAxisM) {
            this.forwardAxisM = forwardAxisM;
            return this;
        }

        public Builder forwardAxisM(Double forwardAxisM) {
            this.forwardAxisM = Optional.ofNullable(forwardAxisM);
            return this;
        }

        /**
         * <p>Defines the distance from the center point to the surface along the side axis</p>
         */
        @JsonSetter(value = "sideAxisM", nulls = Nulls.SKIP)
        public Builder sideAxisM(Optional<Double> sideAxisM) {
            this.sideAxisM = sideAxisM;
            return this;
        }

        public Builder sideAxisM(Double sideAxisM) {
            this.sideAxisM = Optional.ofNullable(sideAxisM);
            return this;
        }

        /**
         * <p>Defines the distance from the center point to the surface along the up axis</p>
         */
        @JsonSetter(value = "upAxisM", nulls = Nulls.SKIP)
        public Builder upAxisM(Optional<Double> upAxisM) {
            this.upAxisM = upAxisM;
            return this;
        }

        public Builder upAxisM(Double upAxisM) {
            this.upAxisM = Optional.ofNullable(upAxisM);
            return this;
        }

        public GeoEllipsoid build() {
            return new GeoEllipsoid(forwardAxisM, sideAxisM, upAxisM, additionalProperties);
        }
    }
}
