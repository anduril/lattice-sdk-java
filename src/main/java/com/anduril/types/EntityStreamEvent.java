/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EntityStreamEvent.Builder.class)
public final class EntityStreamEvent implements IEntityEvent {
    private final Optional<EntityEventEventType> eventType;

    private final Optional<OffsetDateTime> time;

    private final Optional<Entity> entity;

    private final Map<String, Object> additionalProperties;

    private EntityStreamEvent(
            Optional<EntityEventEventType> eventType,
            Optional<OffsetDateTime> time,
            Optional<Entity> entity,
            Map<String, Object> additionalProperties) {
        this.eventType = eventType;
        this.time = time;
        this.entity = entity;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("eventType")
    public Optional<EntityEventEventType> getEventType() {
        return eventType;
    }

    @JsonProperty("time")
    @java.lang.Override
    public Optional<OffsetDateTime> getTime() {
        return time;
    }

    @JsonProperty("entity")
    @java.lang.Override
    public Optional<Entity> getEntity() {
        return entity;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EntityStreamEvent && equalTo((EntityStreamEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EntityStreamEvent other) {
        return eventType.equals(other.eventType) && time.equals(other.time) && entity.equals(other.entity);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventType, this.time, this.entity);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<EntityEventEventType> eventType = Optional.empty();

        private Optional<OffsetDateTime> time = Optional.empty();

        private Optional<Entity> entity = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(EntityStreamEvent other) {
            eventType(other.getEventType());
            time(other.getTime());
            entity(other.getEntity());
            return this;
        }

        @JsonSetter(value = "eventType", nulls = Nulls.SKIP)
        public Builder eventType(Optional<EntityEventEventType> eventType) {
            this.eventType = eventType;
            return this;
        }

        public Builder eventType(EntityEventEventType eventType) {
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        @JsonSetter(value = "time", nulls = Nulls.SKIP)
        public Builder time(Optional<OffsetDateTime> time) {
            this.time = time;
            return this;
        }

        public Builder time(OffsetDateTime time) {
            this.time = Optional.ofNullable(time);
            return this;
        }

        @JsonSetter(value = "entity", nulls = Nulls.SKIP)
        public Builder entity(Optional<Entity> entity) {
            this.entity = entity;
            return this;
        }

        public Builder entity(Entity entity) {
            this.entity = Optional.ofNullable(entity);
            return this;
        }

        public EntityStreamEvent build() {
            return new EntityStreamEvent(eventType, time, entity, additionalProperties);
        }
    }
}
