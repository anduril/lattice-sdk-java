/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AlertCondition.Builder.class)
public final class AlertCondition {
    private final Optional<String> conditionCode;

    private final Optional<String> description;

    private final Map<String, Object> additionalProperties;

    private AlertCondition(
            Optional<String> conditionCode, Optional<String> description, Map<String, Object> additionalProperties) {
        this.conditionCode = conditionCode;
        this.description = description;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Short, machine-readable code that describes this condition. This code is intended to provide systems off-asset
     * with a lookup key to retrieve more detailed information about the condition.
     */
    @JsonProperty("conditionCode")
    public Optional<String> getConditionCode() {
        return conditionCode;
    }

    /**
     * @return Human-readable description of this condition. The description is intended for display in the UI for human
     * understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
     * provides no dynamic substitutions, then prefer lookup based on condition_code.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AlertCondition && equalTo((AlertCondition) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AlertCondition other) {
        return conditionCode.equals(other.conditionCode) && description.equals(other.description);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.conditionCode, this.description);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> conditionCode = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AlertCondition other) {
            conditionCode(other.getConditionCode());
            description(other.getDescription());
            return this;
        }

        /**
         * <p>Short, machine-readable code that describes this condition. This code is intended to provide systems off-asset
         * with a lookup key to retrieve more detailed information about the condition.</p>
         */
        @JsonSetter(value = "conditionCode", nulls = Nulls.SKIP)
        public Builder conditionCode(Optional<String> conditionCode) {
            this.conditionCode = conditionCode;
            return this;
        }

        public Builder conditionCode(String conditionCode) {
            this.conditionCode = Optional.ofNullable(conditionCode);
            return this;
        }

        /**
         * <p>Human-readable description of this condition. The description is intended for display in the UI for human
         * understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
         * provides no dynamic substitutions, then prefer lookup based on condition_code.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        public AlertCondition build() {
            return new AlertCondition(conditionCode, description, additionalProperties);
        }
    }
}
