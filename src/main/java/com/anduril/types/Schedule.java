/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Schedule.Builder.class)
public final class Schedule {
    private final Optional<List<CronWindow>> windows;

    private final Optional<String> scheduleId;

    private final Optional<ScheduleScheduleType> scheduleType;

    private final Map<String, Object> additionalProperties;

    private Schedule(
            Optional<List<CronWindow>> windows,
            Optional<String> scheduleId,
            Optional<ScheduleScheduleType> scheduleType,
            Map<String, Object> additionalProperties) {
        this.windows = windows;
        this.scheduleId = scheduleId;
        this.scheduleType = scheduleType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return expression that represents this schedule's &quot;ON&quot; state
     */
    @JsonProperty("windows")
    public Optional<List<CronWindow>> getWindows() {
        return windows;
    }

    /**
     * @return A unique identifier for this schedule.
     */
    @JsonProperty("scheduleId")
    public Optional<String> getScheduleId() {
        return scheduleId;
    }

    /**
     * @return The schedule type
     */
    @JsonProperty("scheduleType")
    public Optional<ScheduleScheduleType> getScheduleType() {
        return scheduleType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Schedule && equalTo((Schedule) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Schedule other) {
        return windows.equals(other.windows)
                && scheduleId.equals(other.scheduleId)
                && scheduleType.equals(other.scheduleType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.windows, this.scheduleId, this.scheduleType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<CronWindow>> windows = Optional.empty();

        private Optional<String> scheduleId = Optional.empty();

        private Optional<ScheduleScheduleType> scheduleType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Schedule other) {
            windows(other.getWindows());
            scheduleId(other.getScheduleId());
            scheduleType(other.getScheduleType());
            return this;
        }

        /**
         * <p>expression that represents this schedule's &quot;ON&quot; state</p>
         */
        @JsonSetter(value = "windows", nulls = Nulls.SKIP)
        public Builder windows(Optional<List<CronWindow>> windows) {
            this.windows = windows;
            return this;
        }

        public Builder windows(List<CronWindow> windows) {
            this.windows = Optional.ofNullable(windows);
            return this;
        }

        /**
         * <p>A unique identifier for this schedule.</p>
         */
        @JsonSetter(value = "scheduleId", nulls = Nulls.SKIP)
        public Builder scheduleId(Optional<String> scheduleId) {
            this.scheduleId = scheduleId;
            return this;
        }

        public Builder scheduleId(String scheduleId) {
            this.scheduleId = Optional.ofNullable(scheduleId);
            return this;
        }

        /**
         * <p>The schedule type</p>
         */
        @JsonSetter(value = "scheduleType", nulls = Nulls.SKIP)
        public Builder scheduleType(Optional<ScheduleScheduleType> scheduleType) {
            this.scheduleType = scheduleType;
            return this;
        }

        public Builder scheduleType(ScheduleScheduleType scheduleType) {
            this.scheduleType = Optional.ofNullable(scheduleType);
            return this;
        }

        public Schedule build() {
            return new Schedule(windows, scheduleId, scheduleType, additionalProperties);
        }
    }
}
