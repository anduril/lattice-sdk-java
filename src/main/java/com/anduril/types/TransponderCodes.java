/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransponderCodes.Builder.class)
public final class TransponderCodes {
    private final Optional<Integer> mode1;

    private final Optional<Integer> mode2;

    private final Optional<Integer> mode3;

    private final Optional<TransponderCodesMode4InterrogationResponse> mode4InterrogationResponse;

    private final Optional<Mode5> mode5;

    private final Optional<ModeS> modeS;

    private final Map<String, Object> additionalProperties;

    private TransponderCodes(
            Optional<Integer> mode1,
            Optional<Integer> mode2,
            Optional<Integer> mode3,
            Optional<TransponderCodesMode4InterrogationResponse> mode4InterrogationResponse,
            Optional<Mode5> mode5,
            Optional<ModeS> modeS,
            Map<String, Object> additionalProperties) {
        this.mode1 = mode1;
        this.mode2 = mode2;
        this.mode3 = mode3;
        this.mode4InterrogationResponse = mode4InterrogationResponse;
        this.mode5 = mode5;
        this.modeS = modeS;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The mode 1 code assigned to military assets.
     */
    @JsonProperty("mode1")
    public Optional<Integer> getMode1() {
        return mode1;
    }

    /**
     * @return The Mode 2 code assigned to military assets.
     */
    @JsonProperty("mode2")
    public Optional<Integer> getMode2() {
        return mode2;
    }

    /**
     * @return The Mode 3 code assigned by ATC to the asset.
     */
    @JsonProperty("mode3")
    public Optional<Integer> getMode3() {
        return mode3;
    }

    /**
     * @return The validity of the response from the Mode 4 interrogation.
     */
    @JsonProperty("mode4InterrogationResponse")
    public Optional<TransponderCodesMode4InterrogationResponse> getMode4InterrogationResponse() {
        return mode4InterrogationResponse;
    }

    /**
     * @return The Mode 5 transponder codes.
     */
    @JsonProperty("mode5")
    public Optional<Mode5> getMode5() {
        return mode5;
    }

    /**
     * @return The Mode S transponder codes.
     */
    @JsonProperty("modeS")
    public Optional<ModeS> getModeS() {
        return modeS;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransponderCodes && equalTo((TransponderCodes) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransponderCodes other) {
        return mode1.equals(other.mode1)
                && mode2.equals(other.mode2)
                && mode3.equals(other.mode3)
                && mode4InterrogationResponse.equals(other.mode4InterrogationResponse)
                && mode5.equals(other.mode5)
                && modeS.equals(other.modeS);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.mode1, this.mode2, this.mode3, this.mode4InterrogationResponse, this.mode5, this.modeS);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> mode1 = Optional.empty();

        private Optional<Integer> mode2 = Optional.empty();

        private Optional<Integer> mode3 = Optional.empty();

        private Optional<TransponderCodesMode4InterrogationResponse> mode4InterrogationResponse = Optional.empty();

        private Optional<Mode5> mode5 = Optional.empty();

        private Optional<ModeS> modeS = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransponderCodes other) {
            mode1(other.getMode1());
            mode2(other.getMode2());
            mode3(other.getMode3());
            mode4InterrogationResponse(other.getMode4InterrogationResponse());
            mode5(other.getMode5());
            modeS(other.getModeS());
            return this;
        }

        /**
         * <p>The mode 1 code assigned to military assets.</p>
         */
        @JsonSetter(value = "mode1", nulls = Nulls.SKIP)
        public Builder mode1(Optional<Integer> mode1) {
            this.mode1 = mode1;
            return this;
        }

        public Builder mode1(Integer mode1) {
            this.mode1 = Optional.ofNullable(mode1);
            return this;
        }

        /**
         * <p>The Mode 2 code assigned to military assets.</p>
         */
        @JsonSetter(value = "mode2", nulls = Nulls.SKIP)
        public Builder mode2(Optional<Integer> mode2) {
            this.mode2 = mode2;
            return this;
        }

        public Builder mode2(Integer mode2) {
            this.mode2 = Optional.ofNullable(mode2);
            return this;
        }

        /**
         * <p>The Mode 3 code assigned by ATC to the asset.</p>
         */
        @JsonSetter(value = "mode3", nulls = Nulls.SKIP)
        public Builder mode3(Optional<Integer> mode3) {
            this.mode3 = mode3;
            return this;
        }

        public Builder mode3(Integer mode3) {
            this.mode3 = Optional.ofNullable(mode3);
            return this;
        }

        /**
         * <p>The validity of the response from the Mode 4 interrogation.</p>
         */
        @JsonSetter(value = "mode4InterrogationResponse", nulls = Nulls.SKIP)
        public Builder mode4InterrogationResponse(
                Optional<TransponderCodesMode4InterrogationResponse> mode4InterrogationResponse) {
            this.mode4InterrogationResponse = mode4InterrogationResponse;
            return this;
        }

        public Builder mode4InterrogationResponse(
                TransponderCodesMode4InterrogationResponse mode4InterrogationResponse) {
            this.mode4InterrogationResponse = Optional.ofNullable(mode4InterrogationResponse);
            return this;
        }

        /**
         * <p>The Mode 5 transponder codes.</p>
         */
        @JsonSetter(value = "mode5", nulls = Nulls.SKIP)
        public Builder mode5(Optional<Mode5> mode5) {
            this.mode5 = mode5;
            return this;
        }

        public Builder mode5(Mode5 mode5) {
            this.mode5 = Optional.ofNullable(mode5);
            return this;
        }

        /**
         * <p>The Mode S transponder codes.</p>
         */
        @JsonSetter(value = "modeS", nulls = Nulls.SKIP)
        public Builder modeS(Optional<ModeS> modeS) {
            this.modeS = modeS;
            return this;
        }

        public Builder modeS(ModeS modeS) {
            this.modeS = Optional.ofNullable(modeS);
            return this;
        }

        public TransponderCodes build() {
            return new TransponderCodes(
                    mode1, mode2, mode3, mode4InterrogationResponse, mode5, modeS, additionalProperties);
        }
    }
}
