/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class OverrideType {
    public static final OverrideType OVERRIDE_TYPE_INVALID =
            new OverrideType(Value.OVERRIDE_TYPE_INVALID, "OVERRIDE_TYPE_INVALID");

    public static final OverrideType OVERRIDE_TYPE_POST_EXPIRY =
            new OverrideType(Value.OVERRIDE_TYPE_POST_EXPIRY, "OVERRIDE_TYPE_POST_EXPIRY");

    public static final OverrideType OVERRIDE_TYPE_LIVE =
            new OverrideType(Value.OVERRIDE_TYPE_LIVE, "OVERRIDE_TYPE_LIVE");

    private final Value value;

    private final String string;

    OverrideType(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other) || (other instanceof OverrideType && this.string.equals(((OverrideType) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case OVERRIDE_TYPE_INVALID:
                return visitor.visitOverrideTypeInvalid();
            case OVERRIDE_TYPE_POST_EXPIRY:
                return visitor.visitOverrideTypePostExpiry();
            case OVERRIDE_TYPE_LIVE:
                return visitor.visitOverrideTypeLive();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static OverrideType valueOf(String value) {
        switch (value) {
            case "OVERRIDE_TYPE_INVALID":
                return OVERRIDE_TYPE_INVALID;
            case "OVERRIDE_TYPE_POST_EXPIRY":
                return OVERRIDE_TYPE_POST_EXPIRY;
            case "OVERRIDE_TYPE_LIVE":
                return OVERRIDE_TYPE_LIVE;
            default:
                return new OverrideType(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        OVERRIDE_TYPE_INVALID,

        OVERRIDE_TYPE_LIVE,

        OVERRIDE_TYPE_POST_EXPIRY,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitOverrideTypeInvalid();

        T visitOverrideTypeLive();

        T visitOverrideTypePostExpiry();

        T visitUnknown(String unknownType);
    }
}
