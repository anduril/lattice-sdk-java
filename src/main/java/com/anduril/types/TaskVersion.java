/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaskVersion.Builder.class)
public final class TaskVersion {
    private final Optional<String> taskId;

    private final Optional<Integer> definitionVersion;

    private final Optional<Integer> statusVersion;

    private final Map<String, Object> additionalProperties;

    private TaskVersion(
            Optional<String> taskId,
            Optional<Integer> definitionVersion,
            Optional<Integer> statusVersion,
            Map<String, Object> additionalProperties) {
        this.taskId = taskId;
        this.definitionVersion = definitionVersion;
        this.statusVersion = statusVersion;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique ID for this Task.
     */
    @JsonProperty("taskId")
    public Optional<String> getTaskId() {
        return taskId;
    }

    /**
     * @return Increments on definition (i.e. not TaskStatus) change. 0 is unset, starts at 1 on creation.
     */
    @JsonProperty("definitionVersion")
    public Optional<Integer> getDefinitionVersion() {
        return definitionVersion;
    }

    /**
     * @return Increments on changes to TaskStatus. 0 is unset, starts at 1 on creation.
     */
    @JsonProperty("statusVersion")
    public Optional<Integer> getStatusVersion() {
        return statusVersion;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaskVersion && equalTo((TaskVersion) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaskVersion other) {
        return taskId.equals(other.taskId)
                && definitionVersion.equals(other.definitionVersion)
                && statusVersion.equals(other.statusVersion);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.taskId, this.definitionVersion, this.statusVersion);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> taskId = Optional.empty();

        private Optional<Integer> definitionVersion = Optional.empty();

        private Optional<Integer> statusVersion = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaskVersion other) {
            taskId(other.getTaskId());
            definitionVersion(other.getDefinitionVersion());
            statusVersion(other.getStatusVersion());
            return this;
        }

        /**
         * <p>The unique ID for this Task.</p>
         */
        @JsonSetter(value = "taskId", nulls = Nulls.SKIP)
        public Builder taskId(Optional<String> taskId) {
            this.taskId = taskId;
            return this;
        }

        public Builder taskId(String taskId) {
            this.taskId = Optional.ofNullable(taskId);
            return this;
        }

        /**
         * <p>Increments on definition (i.e. not TaskStatus) change. 0 is unset, starts at 1 on creation.</p>
         */
        @JsonSetter(value = "definitionVersion", nulls = Nulls.SKIP)
        public Builder definitionVersion(Optional<Integer> definitionVersion) {
            this.definitionVersion = definitionVersion;
            return this;
        }

        public Builder definitionVersion(Integer definitionVersion) {
            this.definitionVersion = Optional.ofNullable(definitionVersion);
            return this;
        }

        /**
         * <p>Increments on changes to TaskStatus. 0 is unset, starts at 1 on creation.</p>
         */
        @JsonSetter(value = "statusVersion", nulls = Nulls.SKIP)
        public Builder statusVersion(Optional<Integer> statusVersion) {
            this.statusVersion = statusVersion;
            return this;
        }

        public Builder statusVersion(Integer statusVersion) {
            this.statusVersion = Optional.ofNullable(statusVersion);
            return this;
        }

        public TaskVersion build() {
            return new TaskVersion(taskId, definitionVersion, statusVersion, additionalProperties);
        }
    }
}
