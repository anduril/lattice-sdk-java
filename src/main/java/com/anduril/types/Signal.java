/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Signal.Builder.class)
public final class Signal {
    private final Optional<Frequency> frequencyCenter;

    private final Optional<FrequencyRange> frequencyRange;

    private final Optional<Double> bandwidthHz;

    private final Optional<Double> signalToNoiseRatio;

    private final Optional<LineOfBearing> lineOfBearing;

    private final Optional<Fixed> fixed;

    private final Optional<List<EmitterNotation>> emitterNotations;

    private final Optional<Double> pulseWidthS;

    private final Optional<PulseRepetitionInterval> pulseRepetitionInterval;

    private final Optional<ScanCharacteristics> scanCharacteristics;

    private final Map<String, Object> additionalProperties;

    private Signal(
            Optional<Frequency> frequencyCenter,
            Optional<FrequencyRange> frequencyRange,
            Optional<Double> bandwidthHz,
            Optional<Double> signalToNoiseRatio,
            Optional<LineOfBearing> lineOfBearing,
            Optional<Fixed> fixed,
            Optional<List<EmitterNotation>> emitterNotations,
            Optional<Double> pulseWidthS,
            Optional<PulseRepetitionInterval> pulseRepetitionInterval,
            Optional<ScanCharacteristics> scanCharacteristics,
            Map<String, Object> additionalProperties) {
        this.frequencyCenter = frequencyCenter;
        this.frequencyRange = frequencyRange;
        this.bandwidthHz = bandwidthHz;
        this.signalToNoiseRatio = signalToNoiseRatio;
        this.lineOfBearing = lineOfBearing;
        this.fixed = fixed;
        this.emitterNotations = emitterNotations;
        this.pulseWidthS = pulseWidthS;
        this.pulseRepetitionInterval = pulseRepetitionInterval;
        this.scanCharacteristics = scanCharacteristics;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("frequencyCenter")
    public Optional<Frequency> getFrequencyCenter() {
        return frequencyCenter;
    }

    @JsonProperty("frequencyRange")
    public Optional<FrequencyRange> getFrequencyRange() {
        return frequencyRange;
    }

    /**
     * @return Indicates the bandwidth of a signal (Hz).
     */
    @JsonProperty("bandwidthHz")
    public Optional<Double> getBandwidthHz() {
        return bandwidthHz;
    }

    /**
     * @return Indicates the signal to noise (SNR) of this signal.
     */
    @JsonProperty("signalToNoiseRatio")
    public Optional<Double> getSignalToNoiseRatio() {
        return signalToNoiseRatio;
    }

    @JsonProperty("lineOfBearing")
    public Optional<LineOfBearing> getLineOfBearing() {
        return lineOfBearing;
    }

    @JsonProperty("fixed")
    public Optional<Fixed> getFixed() {
        return fixed;
    }

    /**
     * @return Emitter notations associated with this entity.
     */
    @JsonProperty("emitterNotations")
    public Optional<List<EmitterNotation>> getEmitterNotations() {
        return emitterNotations;
    }

    /**
     * @return length in time of a single pulse
     */
    @JsonProperty("pulseWidthS")
    public Optional<Double> getPulseWidthS() {
        return pulseWidthS;
    }

    /**
     * @return length in time between the start of two pulses
     */
    @JsonProperty("pulseRepetitionInterval")
    public Optional<PulseRepetitionInterval> getPulseRepetitionInterval() {
        return pulseRepetitionInterval;
    }

    /**
     * @return describes how a signal is observing the environment
     */
    @JsonProperty("scanCharacteristics")
    public Optional<ScanCharacteristics> getScanCharacteristics() {
        return scanCharacteristics;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Signal && equalTo((Signal) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Signal other) {
        return frequencyCenter.equals(other.frequencyCenter)
                && frequencyRange.equals(other.frequencyRange)
                && bandwidthHz.equals(other.bandwidthHz)
                && signalToNoiseRatio.equals(other.signalToNoiseRatio)
                && lineOfBearing.equals(other.lineOfBearing)
                && fixed.equals(other.fixed)
                && emitterNotations.equals(other.emitterNotations)
                && pulseWidthS.equals(other.pulseWidthS)
                && pulseRepetitionInterval.equals(other.pulseRepetitionInterval)
                && scanCharacteristics.equals(other.scanCharacteristics);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.frequencyCenter,
                this.frequencyRange,
                this.bandwidthHz,
                this.signalToNoiseRatio,
                this.lineOfBearing,
                this.fixed,
                this.emitterNotations,
                this.pulseWidthS,
                this.pulseRepetitionInterval,
                this.scanCharacteristics);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Frequency> frequencyCenter = Optional.empty();

        private Optional<FrequencyRange> frequencyRange = Optional.empty();

        private Optional<Double> bandwidthHz = Optional.empty();

        private Optional<Double> signalToNoiseRatio = Optional.empty();

        private Optional<LineOfBearing> lineOfBearing = Optional.empty();

        private Optional<Fixed> fixed = Optional.empty();

        private Optional<List<EmitterNotation>> emitterNotations = Optional.empty();

        private Optional<Double> pulseWidthS = Optional.empty();

        private Optional<PulseRepetitionInterval> pulseRepetitionInterval = Optional.empty();

        private Optional<ScanCharacteristics> scanCharacteristics = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Signal other) {
            frequencyCenter(other.getFrequencyCenter());
            frequencyRange(other.getFrequencyRange());
            bandwidthHz(other.getBandwidthHz());
            signalToNoiseRatio(other.getSignalToNoiseRatio());
            lineOfBearing(other.getLineOfBearing());
            fixed(other.getFixed());
            emitterNotations(other.getEmitterNotations());
            pulseWidthS(other.getPulseWidthS());
            pulseRepetitionInterval(other.getPulseRepetitionInterval());
            scanCharacteristics(other.getScanCharacteristics());
            return this;
        }

        @JsonSetter(value = "frequencyCenter", nulls = Nulls.SKIP)
        public Builder frequencyCenter(Optional<Frequency> frequencyCenter) {
            this.frequencyCenter = frequencyCenter;
            return this;
        }

        public Builder frequencyCenter(Frequency frequencyCenter) {
            this.frequencyCenter = Optional.ofNullable(frequencyCenter);
            return this;
        }

        @JsonSetter(value = "frequencyRange", nulls = Nulls.SKIP)
        public Builder frequencyRange(Optional<FrequencyRange> frequencyRange) {
            this.frequencyRange = frequencyRange;
            return this;
        }

        public Builder frequencyRange(FrequencyRange frequencyRange) {
            this.frequencyRange = Optional.ofNullable(frequencyRange);
            return this;
        }

        /**
         * <p>Indicates the bandwidth of a signal (Hz).</p>
         */
        @JsonSetter(value = "bandwidthHz", nulls = Nulls.SKIP)
        public Builder bandwidthHz(Optional<Double> bandwidthHz) {
            this.bandwidthHz = bandwidthHz;
            return this;
        }

        public Builder bandwidthHz(Double bandwidthHz) {
            this.bandwidthHz = Optional.ofNullable(bandwidthHz);
            return this;
        }

        /**
         * <p>Indicates the signal to noise (SNR) of this signal.</p>
         */
        @JsonSetter(value = "signalToNoiseRatio", nulls = Nulls.SKIP)
        public Builder signalToNoiseRatio(Optional<Double> signalToNoiseRatio) {
            this.signalToNoiseRatio = signalToNoiseRatio;
            return this;
        }

        public Builder signalToNoiseRatio(Double signalToNoiseRatio) {
            this.signalToNoiseRatio = Optional.ofNullable(signalToNoiseRatio);
            return this;
        }

        @JsonSetter(value = "lineOfBearing", nulls = Nulls.SKIP)
        public Builder lineOfBearing(Optional<LineOfBearing> lineOfBearing) {
            this.lineOfBearing = lineOfBearing;
            return this;
        }

        public Builder lineOfBearing(LineOfBearing lineOfBearing) {
            this.lineOfBearing = Optional.ofNullable(lineOfBearing);
            return this;
        }

        @JsonSetter(value = "fixed", nulls = Nulls.SKIP)
        public Builder fixed(Optional<Fixed> fixed) {
            this.fixed = fixed;
            return this;
        }

        public Builder fixed(Fixed fixed) {
            this.fixed = Optional.ofNullable(fixed);
            return this;
        }

        /**
         * <p>Emitter notations associated with this entity.</p>
         */
        @JsonSetter(value = "emitterNotations", nulls = Nulls.SKIP)
        public Builder emitterNotations(Optional<List<EmitterNotation>> emitterNotations) {
            this.emitterNotations = emitterNotations;
            return this;
        }

        public Builder emitterNotations(List<EmitterNotation> emitterNotations) {
            this.emitterNotations = Optional.ofNullable(emitterNotations);
            return this;
        }

        /**
         * <p>length in time of a single pulse</p>
         */
        @JsonSetter(value = "pulseWidthS", nulls = Nulls.SKIP)
        public Builder pulseWidthS(Optional<Double> pulseWidthS) {
            this.pulseWidthS = pulseWidthS;
            return this;
        }

        public Builder pulseWidthS(Double pulseWidthS) {
            this.pulseWidthS = Optional.ofNullable(pulseWidthS);
            return this;
        }

        /**
         * <p>length in time between the start of two pulses</p>
         */
        @JsonSetter(value = "pulseRepetitionInterval", nulls = Nulls.SKIP)
        public Builder pulseRepetitionInterval(Optional<PulseRepetitionInterval> pulseRepetitionInterval) {
            this.pulseRepetitionInterval = pulseRepetitionInterval;
            return this;
        }

        public Builder pulseRepetitionInterval(PulseRepetitionInterval pulseRepetitionInterval) {
            this.pulseRepetitionInterval = Optional.ofNullable(pulseRepetitionInterval);
            return this;
        }

        /**
         * <p>describes how a signal is observing the environment</p>
         */
        @JsonSetter(value = "scanCharacteristics", nulls = Nulls.SKIP)
        public Builder scanCharacteristics(Optional<ScanCharacteristics> scanCharacteristics) {
            this.scanCharacteristics = scanCharacteristics;
            return this;
        }

        public Builder scanCharacteristics(ScanCharacteristics scanCharacteristics) {
            this.scanCharacteristics = Optional.ofNullable(scanCharacteristics);
            return this;
        }

        public Signal build() {
            return new Signal(
                    frequencyCenter,
                    frequencyRange,
                    bandwidthHz,
                    signalToNoiseRatio,
                    lineOfBearing,
                    fixed,
                    emitterNotations,
                    pulseWidthS,
                    pulseRepetitionInterval,
                    scanCharacteristics,
                    additionalProperties);
        }
    }
}
