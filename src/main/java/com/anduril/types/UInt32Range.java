/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UInt32Range.Builder.class)
public final class UInt32Range {
    private final Optional<Integer> lowerBound;

    private final Optional<Integer> upperBound;

    private final Map<String, Object> additionalProperties;

    private UInt32Range(
            Optional<Integer> lowerBound, Optional<Integer> upperBound, Map<String, Object> additionalProperties) {
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("lowerBound")
    public Optional<Integer> getLowerBound() {
        return lowerBound;
    }

    @JsonProperty("upperBound")
    public Optional<Integer> getUpperBound() {
        return upperBound;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UInt32Range && equalTo((UInt32Range) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UInt32Range other) {
        return lowerBound.equals(other.lowerBound) && upperBound.equals(other.upperBound);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.lowerBound, this.upperBound);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> lowerBound = Optional.empty();

        private Optional<Integer> upperBound = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UInt32Range other) {
            lowerBound(other.getLowerBound());
            upperBound(other.getUpperBound());
            return this;
        }

        @JsonSetter(value = "lowerBound", nulls = Nulls.SKIP)
        public Builder lowerBound(Optional<Integer> lowerBound) {
            this.lowerBound = lowerBound;
            return this;
        }

        public Builder lowerBound(Integer lowerBound) {
            this.lowerBound = Optional.ofNullable(lowerBound);
            return this;
        }

        @JsonSetter(value = "upperBound", nulls = Nulls.SKIP)
        public Builder upperBound(Optional<Integer> upperBound) {
            this.upperBound = upperBound;
            return this;
        }

        public Builder upperBound(Integer upperBound) {
            this.upperBound = Optional.ofNullable(upperBound);
            return this;
        }

        public UInt32Range build() {
            return new UInt32Range(lowerBound, upperBound, additionalProperties);
        }
    }
}
