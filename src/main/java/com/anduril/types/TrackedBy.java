/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TrackedBy.Builder.class)
public final class TrackedBy {
    private final Optional<Sensors> activelyTrackingSensors;

    private final Optional<OffsetDateTime> lastMeasurementTimestamp;

    private final Map<String, Object> additionalProperties;

    private TrackedBy(
            Optional<Sensors> activelyTrackingSensors,
            Optional<OffsetDateTime> lastMeasurementTimestamp,
            Map<String, Object> additionalProperties) {
        this.activelyTrackingSensors = activelyTrackingSensors;
        this.lastMeasurementTimestamp = lastMeasurementTimestamp;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Sensor details of the tracking entity's sensors that were active and tracking the tracked entity. This may be
     * a subset of the total sensors available on the tracking entity.
     */
    @JsonProperty("activelyTrackingSensors")
    public Optional<Sensors> getActivelyTrackingSensors() {
        return activelyTrackingSensors;
    }

    /**
     * @return Latest time that any sensor in actively_tracking_sensors detected the tracked entity.
     */
    @JsonProperty("lastMeasurementTimestamp")
    public Optional<OffsetDateTime> getLastMeasurementTimestamp() {
        return lastMeasurementTimestamp;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TrackedBy && equalTo((TrackedBy) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TrackedBy other) {
        return activelyTrackingSensors.equals(other.activelyTrackingSensors)
                && lastMeasurementTimestamp.equals(other.lastMeasurementTimestamp);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.activelyTrackingSensors, this.lastMeasurementTimestamp);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Sensors> activelyTrackingSensors = Optional.empty();

        private Optional<OffsetDateTime> lastMeasurementTimestamp = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TrackedBy other) {
            activelyTrackingSensors(other.getActivelyTrackingSensors());
            lastMeasurementTimestamp(other.getLastMeasurementTimestamp());
            return this;
        }

        /**
         * <p>Sensor details of the tracking entity's sensors that were active and tracking the tracked entity. This may be
         * a subset of the total sensors available on the tracking entity.</p>
         */
        @JsonSetter(value = "activelyTrackingSensors", nulls = Nulls.SKIP)
        public Builder activelyTrackingSensors(Optional<Sensors> activelyTrackingSensors) {
            this.activelyTrackingSensors = activelyTrackingSensors;
            return this;
        }

        public Builder activelyTrackingSensors(Sensors activelyTrackingSensors) {
            this.activelyTrackingSensors = Optional.ofNullable(activelyTrackingSensors);
            return this;
        }

        /**
         * <p>Latest time that any sensor in actively_tracking_sensors detected the tracked entity.</p>
         */
        @JsonSetter(value = "lastMeasurementTimestamp", nulls = Nulls.SKIP)
        public Builder lastMeasurementTimestamp(Optional<OffsetDateTime> lastMeasurementTimestamp) {
            this.lastMeasurementTimestamp = lastMeasurementTimestamp;
            return this;
        }

        public Builder lastMeasurementTimestamp(OffsetDateTime lastMeasurementTimestamp) {
            this.lastMeasurementTimestamp = Optional.ofNullable(lastMeasurementTimestamp);
            return this;
        }

        public TrackedBy build() {
            return new TrackedBy(activelyTrackingSensors, lastMeasurementTimestamp, additionalProperties);
        }
    }
}
