/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MediaItem.Builder.class)
public final class MediaItem {
    private final Optional<MediaItemType> type;

    private final Optional<String> relativePath;

    private final Map<String, Object> additionalProperties;

    private MediaItem(
            Optional<MediaItemType> type, Optional<String> relativePath, Map<String, Object> additionalProperties) {
        this.type = type;
        this.relativePath = relativePath;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public Optional<MediaItemType> getType() {
        return type;
    }

    /**
     * @return The path, relative to the environment base URL, where media related to an entity can be accessed
     */
    @JsonProperty("relativePath")
    public Optional<String> getRelativePath() {
        return relativePath;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MediaItem && equalTo((MediaItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MediaItem other) {
        return type.equals(other.type) && relativePath.equals(other.relativePath);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.relativePath);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<MediaItemType> type = Optional.empty();

        private Optional<String> relativePath = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MediaItem other) {
            type(other.getType());
            relativePath(other.getRelativePath());
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<MediaItemType> type) {
            this.type = type;
            return this;
        }

        public Builder type(MediaItemType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The path, relative to the environment base URL, where media related to an entity can be accessed</p>
         */
        @JsonSetter(value = "relativePath", nulls = Nulls.SKIP)
        public Builder relativePath(Optional<String> relativePath) {
            this.relativePath = relativePath;
            return this;
        }

        public Builder relativePath(String relativePath) {
            this.relativePath = Optional.ofNullable(relativePath);
            return this;
        }

        public MediaItem build() {
            return new MediaItem(type, relativePath, additionalProperties);
        }
    }
}
