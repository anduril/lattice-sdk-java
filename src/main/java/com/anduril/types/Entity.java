/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Entity.Builder.class)
public final class Entity {
    private final Optional<String> entityId;

    private final Optional<String> description;

    private final Optional<Boolean> isLive;

    private final Optional<OffsetDateTime> createdTime;

    private final Optional<OffsetDateTime> expiryTime;

    private final Optional<Status> status;

    private final Optional<Location> location;

    private final Optional<LocationUncertainty> locationUncertainty;

    private final Optional<GeoShape> geoShape;

    private final Optional<GeoDetails> geoDetails;

    private final Optional<Aliases> aliases;

    private final Optional<Tracked> tracked;

    private final Optional<Correlation> correlation;

    private final Optional<MilView> milView;

    private final Optional<Ontology> ontology;

    private final Optional<Sensors> sensors;

    private final Optional<Payloads> payloads;

    private final Optional<PowerState> powerState;

    private final Optional<Provenance> provenance;

    private final Optional<Overrides> overrides;

    private final Optional<Indicators> indicators;

    private final Optional<TargetPriority> targetPriority;

    private final Optional<Signal> signal;

    private final Optional<TransponderCodes> transponderCodes;

    private final Optional<Classification> dataClassification;

    private final Optional<TaskCatalog> taskCatalog;

    private final Optional<Media> media;

    private final Optional<Relationships> relationships;

    private final Optional<VisualDetails> visualDetails;

    private final Optional<Dimensions> dimensions;

    private final Optional<RouteDetails> routeDetails;

    private final Optional<Schedules> schedules;

    private final Optional<Health> health;

    private final Optional<GroupDetails> groupDetails;

    private final Optional<Supplies> supplies;

    private final Optional<Orbit> orbit;

    private final Map<String, Object> additionalProperties;

    private Entity(
            Optional<String> entityId,
            Optional<String> description,
            Optional<Boolean> isLive,
            Optional<OffsetDateTime> createdTime,
            Optional<OffsetDateTime> expiryTime,
            Optional<Status> status,
            Optional<Location> location,
            Optional<LocationUncertainty> locationUncertainty,
            Optional<GeoShape> geoShape,
            Optional<GeoDetails> geoDetails,
            Optional<Aliases> aliases,
            Optional<Tracked> tracked,
            Optional<Correlation> correlation,
            Optional<MilView> milView,
            Optional<Ontology> ontology,
            Optional<Sensors> sensors,
            Optional<Payloads> payloads,
            Optional<PowerState> powerState,
            Optional<Provenance> provenance,
            Optional<Overrides> overrides,
            Optional<Indicators> indicators,
            Optional<TargetPriority> targetPriority,
            Optional<Signal> signal,
            Optional<TransponderCodes> transponderCodes,
            Optional<Classification> dataClassification,
            Optional<TaskCatalog> taskCatalog,
            Optional<Media> media,
            Optional<Relationships> relationships,
            Optional<VisualDetails> visualDetails,
            Optional<Dimensions> dimensions,
            Optional<RouteDetails> routeDetails,
            Optional<Schedules> schedules,
            Optional<Health> health,
            Optional<GroupDetails> groupDetails,
            Optional<Supplies> supplies,
            Optional<Orbit> orbit,
            Map<String, Object> additionalProperties) {
        this.entityId = entityId;
        this.description = description;
        this.isLive = isLive;
        this.createdTime = createdTime;
        this.expiryTime = expiryTime;
        this.status = status;
        this.location = location;
        this.locationUncertainty = locationUncertainty;
        this.geoShape = geoShape;
        this.geoDetails = geoDetails;
        this.aliases = aliases;
        this.tracked = tracked;
        this.correlation = correlation;
        this.milView = milView;
        this.ontology = ontology;
        this.sensors = sensors;
        this.payloads = payloads;
        this.powerState = powerState;
        this.provenance = provenance;
        this.overrides = overrides;
        this.indicators = indicators;
        this.targetPriority = targetPriority;
        this.signal = signal;
        this.transponderCodes = transponderCodes;
        this.dataClassification = dataClassification;
        this.taskCatalog = taskCatalog;
        this.media = media;
        this.relationships = relationships;
        this.visualDetails = visualDetails;
        this.dimensions = dimensions;
        this.routeDetails = routeDetails;
        this.schedules = schedules;
        this.health = health;
        this.groupDetails = groupDetails;
        this.supplies = supplies;
        this.orbit = orbit;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A Globally Unique Identifier (GUID) for your entity. If this field is empty, the Entity Manager API
     * automatically generates an ID when it creates the entity.
     */
    @JsonProperty("entityId")
    public Optional<String> getEntityId() {
        return entityId;
    }

    /**
     * @return A human-readable entity description that's helpful for debugging purposes and human
     * traceability. If this field is empty, the Entity Manager API generates one for you.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return Indicates the entity is active and should have a lifecycle state of CREATE or UPDATE.
     * Set this field to true when publishing an entity.
     */
    @JsonProperty("isLive")
    public Optional<Boolean> getIsLive() {
        return isLive;
    }

    /**
     * @return The time when the entity was first known to the entity producer. If this field is empty, the Entity Manager API uses the
     * current timestamp of when the entity is first received.
     * For example, when a drone is first powered on, it might report its startup time as the created time.
     * The timestamp doesn't change for the lifetime of an entity.
     */
    @JsonProperty("createdTime")
    public Optional<OffsetDateTime> getCreatedTime() {
        return createdTime;
    }

    /**
     * @return Future time that expires an entity and updates the is_live flag.
     * For entities that are constantly updating, the expiry time also updates.
     * In some cases, this may differ from is_live.
     * Example: Entities with tasks exported to an external system must remain
     * active even after they expire.
     * This field is required when publishing a prepopulated entity.
     * The expiry time must be in the future, but less than 30 days from the current time.
     */
    @JsonProperty("expiryTime")
    public Optional<OffsetDateTime> getExpiryTime() {
        return expiryTime;
    }

    /**
     * @return Human-readable descriptions of what the entity is currently doing.
     */
    @JsonProperty("status")
    public Optional<Status> getStatus() {
        return status;
    }

    /**
     * @return Geospatial data related to the entity, including its position, kinematics, and orientation.
     */
    @JsonProperty("location")
    public Optional<Location> getLocation() {
        return location;
    }

    /**
     * @return Indicates uncertainty of the entity's position and kinematics.
     */
    @JsonProperty("locationUncertainty")
    public Optional<LocationUncertainty> getLocationUncertainty() {
        return locationUncertainty;
    }

    /**
     * @return Geospatial representation of the entity, including entities that cover an area rather than a fixed point.
     */
    @JsonProperty("geoShape")
    public Optional<GeoShape> getGeoShape() {
        return geoShape;
    }

    /**
     * @return Additional details on what the geospatial area or point represents, along with visual display details.
     */
    @JsonProperty("geoDetails")
    public Optional<GeoDetails> getGeoDetails() {
        return geoDetails;
    }

    /**
     * @return Entity name displayed in the Lattice UI side panel. Also includes identifiers that other systems can use to reference the same entity.
     */
    @JsonProperty("aliases")
    public Optional<Aliases> getAliases() {
        return aliases;
    }

    /**
     * @return If this entity is tracked by another entity, this component contains data related to how it's being tracked.
     */
    @JsonProperty("tracked")
    public Optional<Tracked> getTracked() {
        return tracked;
    }

    /**
     * @return If this entity has been correlated or decorrelated to another one, this component contains information on the correlation or decorrelation.
     */
    @JsonProperty("correlation")
    public Optional<Correlation> getCorrelation() {
        return correlation;
    }

    /**
     * @return View of the entity.
     */
    @JsonProperty("milView")
    public Optional<MilView> getMilView() {
        return milView;
    }

    /**
     * @return Ontology defines an entity's categorization in Lattice, and improves data retrieval and integration. Builds a standardized representation of the entity.
     */
    @JsonProperty("ontology")
    public Optional<Ontology> getOntology() {
        return ontology;
    }

    /**
     * @return Details an entity's available sensors.
     */
    @JsonProperty("sensors")
    public Optional<Sensors> getSensors() {
        return sensors;
    }

    /**
     * @return Details an entity's available payloads.
     */
    @JsonProperty("payloads")
    public Optional<Payloads> getPayloads() {
        return payloads;
    }

    /**
     * @return Details the entity's power source.
     */
    @JsonProperty("powerState")
    public Optional<PowerState> getPowerState() {
        return powerState;
    }

    /**
     * @return The primary data source provenance for this entity.
     */
    @JsonProperty("provenance")
    public Optional<Provenance> getProvenance() {
        return provenance;
    }

    /**
     * @return Provenance of override data.
     */
    @JsonProperty("overrides")
    public Optional<Overrides> getOverrides() {
        return overrides;
    }

    /**
     * @return Describes an entity's specific characteristics and the operations that can be performed on the entity.
     * For example, &quot;simulated&quot; informs the operator that the entity is from a simulation, and &quot;deletable&quot;
     * informs the operator (and system) that the delete operation is valid against the entity.
     */
    @JsonProperty("indicators")
    public Optional<Indicators> getIndicators() {
        return indicators;
    }

    /**
     * @return The prioritization associated with an entity, such as if it's a threat or a high-value target.
     */
    @JsonProperty("targetPriority")
    public Optional<TargetPriority> getTargetPriority() {
        return targetPriority;
    }

    /**
     * @return Describes an entity's signal characteristics, primarily used when an entity is a signal of interest.
     */
    @JsonProperty("signal")
    public Optional<Signal> getSignal() {
        return signal;
    }

    /**
     * @return A message describing any transponder codes associated with Mode 1, 2, 3, 4, 5, S interrogations. These are related to ADS-B modes.
     */
    @JsonProperty("transponderCodes")
    public Optional<TransponderCodes> getTransponderCodes() {
        return transponderCodes;
    }

    /**
     * @return Describes an entity's security classification levels at an overall classification level and on a per
     * field level.
     */
    @JsonProperty("dataClassification")
    public Optional<Classification> getDataClassification() {
        return dataClassification;
    }

    /**
     * @return A catalog of tasks that can be performed by an entity.
     */
    @JsonProperty("taskCatalog")
    public Optional<TaskCatalog> getTaskCatalog() {
        return taskCatalog;
    }

    /**
     * @return Media associated with an entity, such as videos, images, or thumbnails.
     */
    @JsonProperty("media")
    public Optional<Media> getMedia() {
        return media;
    }

    /**
     * @return The relationships between this entity and other entities in the common operational picture (COP).
     */
    @JsonProperty("relationships")
    public Optional<Relationships> getRelationships() {
        return relationships;
    }

    /**
     * @return Visual details associated with the display of an entity in the client.
     */
    @JsonProperty("visualDetails")
    public Optional<VisualDetails> getVisualDetails() {
        return visualDetails;
    }

    /**
     * @return Physical dimensions of the entity.
     */
    @JsonProperty("dimensions")
    public Optional<Dimensions> getDimensions() {
        return dimensions;
    }

    /**
     * @return Additional information about an entity's route.
     */
    @JsonProperty("routeDetails")
    public Optional<RouteDetails> getRouteDetails() {
        return routeDetails;
    }

    /**
     * @return Schedules associated with this entity.
     */
    @JsonProperty("schedules")
    public Optional<Schedules> getSchedules() {
        return schedules;
    }

    /**
     * @return Health metrics or connection status reported by the entity.
     */
    @JsonProperty("health")
    public Optional<Health> getHealth() {
        return health;
    }

    /**
     * @return Details for the group associated with this entity.
     */
    @JsonProperty("groupDetails")
    public Optional<GroupDetails> getGroupDetails() {
        return groupDetails;
    }

    /**
     * @return Contains relevant supply information for the entity, such as fuel.
     */
    @JsonProperty("supplies")
    public Optional<Supplies> getSupplies() {
        return supplies;
    }

    /**
     * @return Orbit information for space objects.
     */
    @JsonProperty("orbit")
    public Optional<Orbit> getOrbit() {
        return orbit;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Entity && equalTo((Entity) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Entity other) {
        return entityId.equals(other.entityId)
                && description.equals(other.description)
                && isLive.equals(other.isLive)
                && createdTime.equals(other.createdTime)
                && expiryTime.equals(other.expiryTime)
                && status.equals(other.status)
                && location.equals(other.location)
                && locationUncertainty.equals(other.locationUncertainty)
                && geoShape.equals(other.geoShape)
                && geoDetails.equals(other.geoDetails)
                && aliases.equals(other.aliases)
                && tracked.equals(other.tracked)
                && correlation.equals(other.correlation)
                && milView.equals(other.milView)
                && ontology.equals(other.ontology)
                && sensors.equals(other.sensors)
                && payloads.equals(other.payloads)
                && powerState.equals(other.powerState)
                && provenance.equals(other.provenance)
                && overrides.equals(other.overrides)
                && indicators.equals(other.indicators)
                && targetPriority.equals(other.targetPriority)
                && signal.equals(other.signal)
                && transponderCodes.equals(other.transponderCodes)
                && dataClassification.equals(other.dataClassification)
                && taskCatalog.equals(other.taskCatalog)
                && media.equals(other.media)
                && relationships.equals(other.relationships)
                && visualDetails.equals(other.visualDetails)
                && dimensions.equals(other.dimensions)
                && routeDetails.equals(other.routeDetails)
                && schedules.equals(other.schedules)
                && health.equals(other.health)
                && groupDetails.equals(other.groupDetails)
                && supplies.equals(other.supplies)
                && orbit.equals(other.orbit);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.entityId,
                this.description,
                this.isLive,
                this.createdTime,
                this.expiryTime,
                this.status,
                this.location,
                this.locationUncertainty,
                this.geoShape,
                this.geoDetails,
                this.aliases,
                this.tracked,
                this.correlation,
                this.milView,
                this.ontology,
                this.sensors,
                this.payloads,
                this.powerState,
                this.provenance,
                this.overrides,
                this.indicators,
                this.targetPriority,
                this.signal,
                this.transponderCodes,
                this.dataClassification,
                this.taskCatalog,
                this.media,
                this.relationships,
                this.visualDetails,
                this.dimensions,
                this.routeDetails,
                this.schedules,
                this.health,
                this.groupDetails,
                this.supplies,
                this.orbit);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> entityId = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Boolean> isLive = Optional.empty();

        private Optional<OffsetDateTime> createdTime = Optional.empty();

        private Optional<OffsetDateTime> expiryTime = Optional.empty();

        private Optional<Status> status = Optional.empty();

        private Optional<Location> location = Optional.empty();

        private Optional<LocationUncertainty> locationUncertainty = Optional.empty();

        private Optional<GeoShape> geoShape = Optional.empty();

        private Optional<GeoDetails> geoDetails = Optional.empty();

        private Optional<Aliases> aliases = Optional.empty();

        private Optional<Tracked> tracked = Optional.empty();

        private Optional<Correlation> correlation = Optional.empty();

        private Optional<MilView> milView = Optional.empty();

        private Optional<Ontology> ontology = Optional.empty();

        private Optional<Sensors> sensors = Optional.empty();

        private Optional<Payloads> payloads = Optional.empty();

        private Optional<PowerState> powerState = Optional.empty();

        private Optional<Provenance> provenance = Optional.empty();

        private Optional<Overrides> overrides = Optional.empty();

        private Optional<Indicators> indicators = Optional.empty();

        private Optional<TargetPriority> targetPriority = Optional.empty();

        private Optional<Signal> signal = Optional.empty();

        private Optional<TransponderCodes> transponderCodes = Optional.empty();

        private Optional<Classification> dataClassification = Optional.empty();

        private Optional<TaskCatalog> taskCatalog = Optional.empty();

        private Optional<Media> media = Optional.empty();

        private Optional<Relationships> relationships = Optional.empty();

        private Optional<VisualDetails> visualDetails = Optional.empty();

        private Optional<Dimensions> dimensions = Optional.empty();

        private Optional<RouteDetails> routeDetails = Optional.empty();

        private Optional<Schedules> schedules = Optional.empty();

        private Optional<Health> health = Optional.empty();

        private Optional<GroupDetails> groupDetails = Optional.empty();

        private Optional<Supplies> supplies = Optional.empty();

        private Optional<Orbit> orbit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Entity other) {
            entityId(other.getEntityId());
            description(other.getDescription());
            isLive(other.getIsLive());
            createdTime(other.getCreatedTime());
            expiryTime(other.getExpiryTime());
            status(other.getStatus());
            location(other.getLocation());
            locationUncertainty(other.getLocationUncertainty());
            geoShape(other.getGeoShape());
            geoDetails(other.getGeoDetails());
            aliases(other.getAliases());
            tracked(other.getTracked());
            correlation(other.getCorrelation());
            milView(other.getMilView());
            ontology(other.getOntology());
            sensors(other.getSensors());
            payloads(other.getPayloads());
            powerState(other.getPowerState());
            provenance(other.getProvenance());
            overrides(other.getOverrides());
            indicators(other.getIndicators());
            targetPriority(other.getTargetPriority());
            signal(other.getSignal());
            transponderCodes(other.getTransponderCodes());
            dataClassification(other.getDataClassification());
            taskCatalog(other.getTaskCatalog());
            media(other.getMedia());
            relationships(other.getRelationships());
            visualDetails(other.getVisualDetails());
            dimensions(other.getDimensions());
            routeDetails(other.getRouteDetails());
            schedules(other.getSchedules());
            health(other.getHealth());
            groupDetails(other.getGroupDetails());
            supplies(other.getSupplies());
            orbit(other.getOrbit());
            return this;
        }

        /**
         * <p>A Globally Unique Identifier (GUID) for your entity. If this field is empty, the Entity Manager API
         * automatically generates an ID when it creates the entity.</p>
         */
        @JsonSetter(value = "entityId", nulls = Nulls.SKIP)
        public Builder entityId(Optional<String> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(String entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        /**
         * <p>A human-readable entity description that's helpful for debugging purposes and human
         * traceability. If this field is empty, the Entity Manager API generates one for you.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>Indicates the entity is active and should have a lifecycle state of CREATE or UPDATE.
         * Set this field to true when publishing an entity.</p>
         */
        @JsonSetter(value = "isLive", nulls = Nulls.SKIP)
        public Builder isLive(Optional<Boolean> isLive) {
            this.isLive = isLive;
            return this;
        }

        public Builder isLive(Boolean isLive) {
            this.isLive = Optional.ofNullable(isLive);
            return this;
        }

        /**
         * <p>The time when the entity was first known to the entity producer. If this field is empty, the Entity Manager API uses the
         * current timestamp of when the entity is first received.
         * For example, when a drone is first powered on, it might report its startup time as the created time.
         * The timestamp doesn't change for the lifetime of an entity.</p>
         */
        @JsonSetter(value = "createdTime", nulls = Nulls.SKIP)
        public Builder createdTime(Optional<OffsetDateTime> createdTime) {
            this.createdTime = createdTime;
            return this;
        }

        public Builder createdTime(OffsetDateTime createdTime) {
            this.createdTime = Optional.ofNullable(createdTime);
            return this;
        }

        /**
         * <p>Future time that expires an entity and updates the is_live flag.
         * For entities that are constantly updating, the expiry time also updates.
         * In some cases, this may differ from is_live.
         * Example: Entities with tasks exported to an external system must remain
         * active even after they expire.
         * This field is required when publishing a prepopulated entity.
         * The expiry time must be in the future, but less than 30 days from the current time.</p>
         */
        @JsonSetter(value = "expiryTime", nulls = Nulls.SKIP)
        public Builder expiryTime(Optional<OffsetDateTime> expiryTime) {
            this.expiryTime = expiryTime;
            return this;
        }

        public Builder expiryTime(OffsetDateTime expiryTime) {
            this.expiryTime = Optional.ofNullable(expiryTime);
            return this;
        }

        /**
         * <p>Human-readable descriptions of what the entity is currently doing.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<Status> status) {
            this.status = status;
            return this;
        }

        public Builder status(Status status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Geospatial data related to the entity, including its position, kinematics, and orientation.</p>
         */
        @JsonSetter(value = "location", nulls = Nulls.SKIP)
        public Builder location(Optional<Location> location) {
            this.location = location;
            return this;
        }

        public Builder location(Location location) {
            this.location = Optional.ofNullable(location);
            return this;
        }

        /**
         * <p>Indicates uncertainty of the entity's position and kinematics.</p>
         */
        @JsonSetter(value = "locationUncertainty", nulls = Nulls.SKIP)
        public Builder locationUncertainty(Optional<LocationUncertainty> locationUncertainty) {
            this.locationUncertainty = locationUncertainty;
            return this;
        }

        public Builder locationUncertainty(LocationUncertainty locationUncertainty) {
            this.locationUncertainty = Optional.ofNullable(locationUncertainty);
            return this;
        }

        /**
         * <p>Geospatial representation of the entity, including entities that cover an area rather than a fixed point.</p>
         */
        @JsonSetter(value = "geoShape", nulls = Nulls.SKIP)
        public Builder geoShape(Optional<GeoShape> geoShape) {
            this.geoShape = geoShape;
            return this;
        }

        public Builder geoShape(GeoShape geoShape) {
            this.geoShape = Optional.ofNullable(geoShape);
            return this;
        }

        /**
         * <p>Additional details on what the geospatial area or point represents, along with visual display details.</p>
         */
        @JsonSetter(value = "geoDetails", nulls = Nulls.SKIP)
        public Builder geoDetails(Optional<GeoDetails> geoDetails) {
            this.geoDetails = geoDetails;
            return this;
        }

        public Builder geoDetails(GeoDetails geoDetails) {
            this.geoDetails = Optional.ofNullable(geoDetails);
            return this;
        }

        /**
         * <p>Entity name displayed in the Lattice UI side panel. Also includes identifiers that other systems can use to reference the same entity.</p>
         */
        @JsonSetter(value = "aliases", nulls = Nulls.SKIP)
        public Builder aliases(Optional<Aliases> aliases) {
            this.aliases = aliases;
            return this;
        }

        public Builder aliases(Aliases aliases) {
            this.aliases = Optional.ofNullable(aliases);
            return this;
        }

        /**
         * <p>If this entity is tracked by another entity, this component contains data related to how it's being tracked.</p>
         */
        @JsonSetter(value = "tracked", nulls = Nulls.SKIP)
        public Builder tracked(Optional<Tracked> tracked) {
            this.tracked = tracked;
            return this;
        }

        public Builder tracked(Tracked tracked) {
            this.tracked = Optional.ofNullable(tracked);
            return this;
        }

        /**
         * <p>If this entity has been correlated or decorrelated to another one, this component contains information on the correlation or decorrelation.</p>
         */
        @JsonSetter(value = "correlation", nulls = Nulls.SKIP)
        public Builder correlation(Optional<Correlation> correlation) {
            this.correlation = correlation;
            return this;
        }

        public Builder correlation(Correlation correlation) {
            this.correlation = Optional.ofNullable(correlation);
            return this;
        }

        /**
         * <p>View of the entity.</p>
         */
        @JsonSetter(value = "milView", nulls = Nulls.SKIP)
        public Builder milView(Optional<MilView> milView) {
            this.milView = milView;
            return this;
        }

        public Builder milView(MilView milView) {
            this.milView = Optional.ofNullable(milView);
            return this;
        }

        /**
         * <p>Ontology defines an entity's categorization in Lattice, and improves data retrieval and integration. Builds a standardized representation of the entity.</p>
         */
        @JsonSetter(value = "ontology", nulls = Nulls.SKIP)
        public Builder ontology(Optional<Ontology> ontology) {
            this.ontology = ontology;
            return this;
        }

        public Builder ontology(Ontology ontology) {
            this.ontology = Optional.ofNullable(ontology);
            return this;
        }

        /**
         * <p>Details an entity's available sensors.</p>
         */
        @JsonSetter(value = "sensors", nulls = Nulls.SKIP)
        public Builder sensors(Optional<Sensors> sensors) {
            this.sensors = sensors;
            return this;
        }

        public Builder sensors(Sensors sensors) {
            this.sensors = Optional.ofNullable(sensors);
            return this;
        }

        /**
         * <p>Details an entity's available payloads.</p>
         */
        @JsonSetter(value = "payloads", nulls = Nulls.SKIP)
        public Builder payloads(Optional<Payloads> payloads) {
            this.payloads = payloads;
            return this;
        }

        public Builder payloads(Payloads payloads) {
            this.payloads = Optional.ofNullable(payloads);
            return this;
        }

        /**
         * <p>Details the entity's power source.</p>
         */
        @JsonSetter(value = "powerState", nulls = Nulls.SKIP)
        public Builder powerState(Optional<PowerState> powerState) {
            this.powerState = powerState;
            return this;
        }

        public Builder powerState(PowerState powerState) {
            this.powerState = Optional.ofNullable(powerState);
            return this;
        }

        /**
         * <p>The primary data source provenance for this entity.</p>
         */
        @JsonSetter(value = "provenance", nulls = Nulls.SKIP)
        public Builder provenance(Optional<Provenance> provenance) {
            this.provenance = provenance;
            return this;
        }

        public Builder provenance(Provenance provenance) {
            this.provenance = Optional.ofNullable(provenance);
            return this;
        }

        /**
         * <p>Provenance of override data.</p>
         */
        @JsonSetter(value = "overrides", nulls = Nulls.SKIP)
        public Builder overrides(Optional<Overrides> overrides) {
            this.overrides = overrides;
            return this;
        }

        public Builder overrides(Overrides overrides) {
            this.overrides = Optional.ofNullable(overrides);
            return this;
        }

        /**
         * <p>Describes an entity's specific characteristics and the operations that can be performed on the entity.
         * For example, &quot;simulated&quot; informs the operator that the entity is from a simulation, and &quot;deletable&quot;
         * informs the operator (and system) that the delete operation is valid against the entity.</p>
         */
        @JsonSetter(value = "indicators", nulls = Nulls.SKIP)
        public Builder indicators(Optional<Indicators> indicators) {
            this.indicators = indicators;
            return this;
        }

        public Builder indicators(Indicators indicators) {
            this.indicators = Optional.ofNullable(indicators);
            return this;
        }

        /**
         * <p>The prioritization associated with an entity, such as if it's a threat or a high-value target.</p>
         */
        @JsonSetter(value = "targetPriority", nulls = Nulls.SKIP)
        public Builder targetPriority(Optional<TargetPriority> targetPriority) {
            this.targetPriority = targetPriority;
            return this;
        }

        public Builder targetPriority(TargetPriority targetPriority) {
            this.targetPriority = Optional.ofNullable(targetPriority);
            return this;
        }

        /**
         * <p>Describes an entity's signal characteristics, primarily used when an entity is a signal of interest.</p>
         */
        @JsonSetter(value = "signal", nulls = Nulls.SKIP)
        public Builder signal(Optional<Signal> signal) {
            this.signal = signal;
            return this;
        }

        public Builder signal(Signal signal) {
            this.signal = Optional.ofNullable(signal);
            return this;
        }

        /**
         * <p>A message describing any transponder codes associated with Mode 1, 2, 3, 4, 5, S interrogations. These are related to ADS-B modes.</p>
         */
        @JsonSetter(value = "transponderCodes", nulls = Nulls.SKIP)
        public Builder transponderCodes(Optional<TransponderCodes> transponderCodes) {
            this.transponderCodes = transponderCodes;
            return this;
        }

        public Builder transponderCodes(TransponderCodes transponderCodes) {
            this.transponderCodes = Optional.ofNullable(transponderCodes);
            return this;
        }

        /**
         * <p>Describes an entity's security classification levels at an overall classification level and on a per
         * field level.</p>
         */
        @JsonSetter(value = "dataClassification", nulls = Nulls.SKIP)
        public Builder dataClassification(Optional<Classification> dataClassification) {
            this.dataClassification = dataClassification;
            return this;
        }

        public Builder dataClassification(Classification dataClassification) {
            this.dataClassification = Optional.ofNullable(dataClassification);
            return this;
        }

        /**
         * <p>A catalog of tasks that can be performed by an entity.</p>
         */
        @JsonSetter(value = "taskCatalog", nulls = Nulls.SKIP)
        public Builder taskCatalog(Optional<TaskCatalog> taskCatalog) {
            this.taskCatalog = taskCatalog;
            return this;
        }

        public Builder taskCatalog(TaskCatalog taskCatalog) {
            this.taskCatalog = Optional.ofNullable(taskCatalog);
            return this;
        }

        /**
         * <p>Media associated with an entity, such as videos, images, or thumbnails.</p>
         */
        @JsonSetter(value = "media", nulls = Nulls.SKIP)
        public Builder media(Optional<Media> media) {
            this.media = media;
            return this;
        }

        public Builder media(Media media) {
            this.media = Optional.ofNullable(media);
            return this;
        }

        /**
         * <p>The relationships between this entity and other entities in the common operational picture (COP).</p>
         */
        @JsonSetter(value = "relationships", nulls = Nulls.SKIP)
        public Builder relationships(Optional<Relationships> relationships) {
            this.relationships = relationships;
            return this;
        }

        public Builder relationships(Relationships relationships) {
            this.relationships = Optional.ofNullable(relationships);
            return this;
        }

        /**
         * <p>Visual details associated with the display of an entity in the client.</p>
         */
        @JsonSetter(value = "visualDetails", nulls = Nulls.SKIP)
        public Builder visualDetails(Optional<VisualDetails> visualDetails) {
            this.visualDetails = visualDetails;
            return this;
        }

        public Builder visualDetails(VisualDetails visualDetails) {
            this.visualDetails = Optional.ofNullable(visualDetails);
            return this;
        }

        /**
         * <p>Physical dimensions of the entity.</p>
         */
        @JsonSetter(value = "dimensions", nulls = Nulls.SKIP)
        public Builder dimensions(Optional<Dimensions> dimensions) {
            this.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(Dimensions dimensions) {
            this.dimensions = Optional.ofNullable(dimensions);
            return this;
        }

        /**
         * <p>Additional information about an entity's route.</p>
         */
        @JsonSetter(value = "routeDetails", nulls = Nulls.SKIP)
        public Builder routeDetails(Optional<RouteDetails> routeDetails) {
            this.routeDetails = routeDetails;
            return this;
        }

        public Builder routeDetails(RouteDetails routeDetails) {
            this.routeDetails = Optional.ofNullable(routeDetails);
            return this;
        }

        /**
         * <p>Schedules associated with this entity.</p>
         */
        @JsonSetter(value = "schedules", nulls = Nulls.SKIP)
        public Builder schedules(Optional<Schedules> schedules) {
            this.schedules = schedules;
            return this;
        }

        public Builder schedules(Schedules schedules) {
            this.schedules = Optional.ofNullable(schedules);
            return this;
        }

        /**
         * <p>Health metrics or connection status reported by the entity.</p>
         */
        @JsonSetter(value = "health", nulls = Nulls.SKIP)
        public Builder health(Optional<Health> health) {
            this.health = health;
            return this;
        }

        public Builder health(Health health) {
            this.health = Optional.ofNullable(health);
            return this;
        }

        /**
         * <p>Details for the group associated with this entity.</p>
         */
        @JsonSetter(value = "groupDetails", nulls = Nulls.SKIP)
        public Builder groupDetails(Optional<GroupDetails> groupDetails) {
            this.groupDetails = groupDetails;
            return this;
        }

        public Builder groupDetails(GroupDetails groupDetails) {
            this.groupDetails = Optional.ofNullable(groupDetails);
            return this;
        }

        /**
         * <p>Contains relevant supply information for the entity, such as fuel.</p>
         */
        @JsonSetter(value = "supplies", nulls = Nulls.SKIP)
        public Builder supplies(Optional<Supplies> supplies) {
            this.supplies = supplies;
            return this;
        }

        public Builder supplies(Supplies supplies) {
            this.supplies = Optional.ofNullable(supplies);
            return this;
        }

        /**
         * <p>Orbit information for space objects.</p>
         */
        @JsonSetter(value = "orbit", nulls = Nulls.SKIP)
        public Builder orbit(Optional<Orbit> orbit) {
            this.orbit = orbit;
            return this;
        }

        public Builder orbit(Orbit orbit) {
            this.orbit = Optional.ofNullable(orbit);
            return this;
        }

        public Entity build() {
            return new Entity(
                    entityId,
                    description,
                    isLive,
                    createdTime,
                    expiryTime,
                    status,
                    location,
                    locationUncertainty,
                    geoShape,
                    geoDetails,
                    aliases,
                    tracked,
                    correlation,
                    milView,
                    ontology,
                    sensors,
                    payloads,
                    powerState,
                    provenance,
                    overrides,
                    indicators,
                    targetPriority,
                    signal,
                    transponderCodes,
                    dataClassification,
                    taskCatalog,
                    media,
                    relationships,
                    visualDetails,
                    dimensions,
                    routeDetails,
                    schedules,
                    health,
                    groupDetails,
                    supplies,
                    orbit,
                    additionalProperties);
        }
    }
}
