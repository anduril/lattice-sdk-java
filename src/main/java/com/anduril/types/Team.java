/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Team.Builder.class)
public final class Team {
    private final Optional<String> entityId;

    private final Optional<List<Agent>> members;

    private final Map<String, Object> additionalProperties;

    private Team(Optional<String> entityId, Optional<List<Agent>> members, Map<String, Object> additionalProperties) {
        this.entityId = entityId;
        this.members = members;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Entity ID of the team
     */
    @JsonProperty("entityId")
    public Optional<String> getEntityId() {
        return entityId;
    }

    @JsonProperty("members")
    public Optional<List<Agent>> getMembers() {
        return members;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Team && equalTo((Team) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Team other) {
        return entityId.equals(other.entityId) && members.equals(other.members);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.entityId, this.members);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> entityId = Optional.empty();

        private Optional<List<Agent>> members = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Team other) {
            entityId(other.getEntityId());
            members(other.getMembers());
            return this;
        }

        /**
         * <p>Entity ID of the team</p>
         */
        @JsonSetter(value = "entityId", nulls = Nulls.SKIP)
        public Builder entityId(Optional<String> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(String entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        @JsonSetter(value = "members", nulls = Nulls.SKIP)
        public Builder members(Optional<List<Agent>> members) {
            this.members = members;
            return this;
        }

        public Builder members(List<Agent> members) {
            this.members = Optional.ofNullable(members);
            return this;
        }

        public Team build() {
            return new Team(entityId, members, additionalProperties);
        }
    }
}
