/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Location.Builder.class)
public final class Location {
    private final Optional<Position> position;

    private final Optional<Enu> velocityEnu;

    private final Optional<Double> speedMps;

    private final Optional<Enu> acceleration;

    private final Optional<Quaternion> attitudeEnu;

    private final Map<String, Object> additionalProperties;

    private Location(
            Optional<Position> position,
            Optional<Enu> velocityEnu,
            Optional<Double> speedMps,
            Optional<Enu> acceleration,
            Optional<Quaternion> attitudeEnu,
            Map<String, Object> additionalProperties) {
        this.position = position;
        this.velocityEnu = velocityEnu;
        this.speedMps = speedMps;
        this.acceleration = acceleration;
        this.attitudeEnu = attitudeEnu;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return see Position definition for details.
     */
    @JsonProperty("position")
    public Optional<Position> getPosition() {
        return position;
    }

    /**
     * @return Velocity in an ENU reference frame centered on the corresponding position. All units are meters per second.
     */
    @JsonProperty("velocityEnu")
    public Optional<Enu> getVelocityEnu() {
        return velocityEnu;
    }

    /**
     * @return Speed is the magnitude of velocity_enu vector [sqrt(e^2 + n^2 + u^2)] when present, measured in m/s.
     */
    @JsonProperty("speedMps")
    public Optional<Double> getSpeedMps() {
        return speedMps;
    }

    /**
     * @return The entity's acceleration in meters/s^2.
     */
    @JsonProperty("acceleration")
    public Optional<Enu> getAcceleration() {
        return acceleration;
    }

    /**
     * @return quaternion to translate from entity body frame to it's ENU frame
     */
    @JsonProperty("attitudeEnu")
    public Optional<Quaternion> getAttitudeEnu() {
        return attitudeEnu;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Location && equalTo((Location) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Location other) {
        return position.equals(other.position)
                && velocityEnu.equals(other.velocityEnu)
                && speedMps.equals(other.speedMps)
                && acceleration.equals(other.acceleration)
                && attitudeEnu.equals(other.attitudeEnu);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.position, this.velocityEnu, this.speedMps, this.acceleration, this.attitudeEnu);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Position> position = Optional.empty();

        private Optional<Enu> velocityEnu = Optional.empty();

        private Optional<Double> speedMps = Optional.empty();

        private Optional<Enu> acceleration = Optional.empty();

        private Optional<Quaternion> attitudeEnu = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Location other) {
            position(other.getPosition());
            velocityEnu(other.getVelocityEnu());
            speedMps(other.getSpeedMps());
            acceleration(other.getAcceleration());
            attitudeEnu(other.getAttitudeEnu());
            return this;
        }

        /**
         * <p>see Position definition for details.</p>
         */
        @JsonSetter(value = "position", nulls = Nulls.SKIP)
        public Builder position(Optional<Position> position) {
            this.position = position;
            return this;
        }

        public Builder position(Position position) {
            this.position = Optional.ofNullable(position);
            return this;
        }

        /**
         * <p>Velocity in an ENU reference frame centered on the corresponding position. All units are meters per second.</p>
         */
        @JsonSetter(value = "velocityEnu", nulls = Nulls.SKIP)
        public Builder velocityEnu(Optional<Enu> velocityEnu) {
            this.velocityEnu = velocityEnu;
            return this;
        }

        public Builder velocityEnu(Enu velocityEnu) {
            this.velocityEnu = Optional.ofNullable(velocityEnu);
            return this;
        }

        /**
         * <p>Speed is the magnitude of velocity_enu vector [sqrt(e^2 + n^2 + u^2)] when present, measured in m/s.</p>
         */
        @JsonSetter(value = "speedMps", nulls = Nulls.SKIP)
        public Builder speedMps(Optional<Double> speedMps) {
            this.speedMps = speedMps;
            return this;
        }

        public Builder speedMps(Double speedMps) {
            this.speedMps = Optional.ofNullable(speedMps);
            return this;
        }

        /**
         * <p>The entity's acceleration in meters/s^2.</p>
         */
        @JsonSetter(value = "acceleration", nulls = Nulls.SKIP)
        public Builder acceleration(Optional<Enu> acceleration) {
            this.acceleration = acceleration;
            return this;
        }

        public Builder acceleration(Enu acceleration) {
            this.acceleration = Optional.ofNullable(acceleration);
            return this;
        }

        /**
         * <p>quaternion to translate from entity body frame to it's ENU frame</p>
         */
        @JsonSetter(value = "attitudeEnu", nulls = Nulls.SKIP)
        public Builder attitudeEnu(Optional<Quaternion> attitudeEnu) {
            this.attitudeEnu = attitudeEnu;
            return this;
        }

        public Builder attitudeEnu(Quaternion attitudeEnu) {
            this.attitudeEnu = Optional.ofNullable(attitudeEnu);
            return this;
        }

        public Location build() {
            return new Location(position, velocityEnu, speedMps, acceleration, attitudeEnu, additionalProperties);
        }
    }
}
