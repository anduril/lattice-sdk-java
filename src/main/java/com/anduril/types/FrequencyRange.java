/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FrequencyRange.Builder.class)
public final class FrequencyRange {
    private final Optional<Frequency> minimumFrequencyHz;

    private final Optional<Frequency> maximumFrequencyHz;

    private final Map<String, Object> additionalProperties;

    private FrequencyRange(
            Optional<Frequency> minimumFrequencyHz,
            Optional<Frequency> maximumFrequencyHz,
            Map<String, Object> additionalProperties) {
        this.minimumFrequencyHz = minimumFrequencyHz;
        this.maximumFrequencyHz = maximumFrequencyHz;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates the lowest measured frequency of a signal (Hz).
     */
    @JsonProperty("minimumFrequencyHz")
    public Optional<Frequency> getMinimumFrequencyHz() {
        return minimumFrequencyHz;
    }

    /**
     * @return Indicates the maximum measured frequency of a signal (Hz).
     */
    @JsonProperty("maximumFrequencyHz")
    public Optional<Frequency> getMaximumFrequencyHz() {
        return maximumFrequencyHz;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FrequencyRange && equalTo((FrequencyRange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FrequencyRange other) {
        return minimumFrequencyHz.equals(other.minimumFrequencyHz)
                && maximumFrequencyHz.equals(other.maximumFrequencyHz);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.minimumFrequencyHz, this.maximumFrequencyHz);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Frequency> minimumFrequencyHz = Optional.empty();

        private Optional<Frequency> maximumFrequencyHz = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FrequencyRange other) {
            minimumFrequencyHz(other.getMinimumFrequencyHz());
            maximumFrequencyHz(other.getMaximumFrequencyHz());
            return this;
        }

        /**
         * <p>Indicates the lowest measured frequency of a signal (Hz).</p>
         */
        @JsonSetter(value = "minimumFrequencyHz", nulls = Nulls.SKIP)
        public Builder minimumFrequencyHz(Optional<Frequency> minimumFrequencyHz) {
            this.minimumFrequencyHz = minimumFrequencyHz;
            return this;
        }

        public Builder minimumFrequencyHz(Frequency minimumFrequencyHz) {
            this.minimumFrequencyHz = Optional.ofNullable(minimumFrequencyHz);
            return this;
        }

        /**
         * <p>Indicates the maximum measured frequency of a signal (Hz).</p>
         */
        @JsonSetter(value = "maximumFrequencyHz", nulls = Nulls.SKIP)
        public Builder maximumFrequencyHz(Optional<Frequency> maximumFrequencyHz) {
            this.maximumFrequencyHz = maximumFrequencyHz;
            return this;
        }

        public Builder maximumFrequencyHz(Frequency maximumFrequencyHz) {
            this.maximumFrequencyHz = Optional.ofNullable(maximumFrequencyHz);
            return this;
        }

        public FrequencyRange build() {
            return new FrequencyRange(minimumFrequencyHz, maximumFrequencyHz, additionalProperties);
        }
    }
}
