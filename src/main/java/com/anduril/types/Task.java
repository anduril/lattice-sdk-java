/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Task.Builder.class)
public final class Task {
    private final Optional<TaskVersion> version;

    private final Optional<String> displayName;

    private final Optional<GoogleProtobufAny> specification;

    private final Optional<Principal> createdBy;

    private final Optional<Principal> lastUpdatedBy;

    private final Optional<OffsetDateTime> lastUpdateTime;

    private final Optional<TaskStatus> status;

    private final Optional<OffsetDateTime> scheduledTime;

    private final Optional<Relations> relations;

    private final Optional<String> description;

    private final Optional<Boolean> isExecutedElsewhere;

    private final Optional<OffsetDateTime> createTime;

    private final Optional<Replication> replication;

    private final Optional<List<TaskEntity>> initialEntities;

    private final Optional<Owner> owner;

    private final Map<String, Object> additionalProperties;

    private Task(
            Optional<TaskVersion> version,
            Optional<String> displayName,
            Optional<GoogleProtobufAny> specification,
            Optional<Principal> createdBy,
            Optional<Principal> lastUpdatedBy,
            Optional<OffsetDateTime> lastUpdateTime,
            Optional<TaskStatus> status,
            Optional<OffsetDateTime> scheduledTime,
            Optional<Relations> relations,
            Optional<String> description,
            Optional<Boolean> isExecutedElsewhere,
            Optional<OffsetDateTime> createTime,
            Optional<Replication> replication,
            Optional<List<TaskEntity>> initialEntities,
            Optional<Owner> owner,
            Map<String, Object> additionalProperties) {
        this.version = version;
        this.displayName = displayName;
        this.specification = specification;
        this.createdBy = createdBy;
        this.lastUpdatedBy = lastUpdatedBy;
        this.lastUpdateTime = lastUpdateTime;
        this.status = status;
        this.scheduledTime = scheduledTime;
        this.relations = relations;
        this.description = description;
        this.isExecutedElsewhere = isExecutedElsewhere;
        this.createTime = createTime;
        this.replication = replication;
        this.initialEntities = initialEntities;
        this.owner = owner;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Version of this Task.
     */
    @JsonProperty("version")
    public Optional<TaskVersion> getVersion() {
        return version;
    }

    /**
     * @return DEPRECATED: Human readable display name for this Task, should be short (&lt;100 chars).
     */
    @JsonProperty("displayName")
    public Optional<String> getDisplayName() {
        return displayName;
    }

    /**
     * @return Full Task parameterization.
     */
    @JsonProperty("specification")
    public Optional<GoogleProtobufAny> getSpecification() {
        return specification;
    }

    /**
     * @return Records who created this Task. This field will not change after the Task has been created.
     */
    @JsonProperty("createdBy")
    public Optional<Principal> getCreatedBy() {
        return createdBy;
    }

    /**
     * @return Records who updated this Task last.
     */
    @JsonProperty("lastUpdatedBy")
    public Optional<Principal> getLastUpdatedBy() {
        return lastUpdatedBy;
    }

    /**
     * @return Records the time of last update.
     */
    @JsonProperty("lastUpdateTime")
    public Optional<OffsetDateTime> getLastUpdateTime() {
        return lastUpdateTime;
    }

    /**
     * @return The status of this Task.
     */
    @JsonProperty("status")
    public Optional<TaskStatus> getStatus() {
        return status;
    }

    /**
     * @return If the Task has been scheduled to execute, what time it should execute at.
     */
    @JsonProperty("scheduledTime")
    public Optional<OffsetDateTime> getScheduledTime() {
        return scheduledTime;
    }

    /**
     * @return Any related Tasks associated with this, typically includes an assignee for this Task and/or a parent.
     */
    @JsonProperty("relations")
    public Optional<Relations> getRelations() {
        return relations;
    }

    /**
     * @return Longer, free form human readable description of this Task
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return If set, execution of this Task is managed elsewhere, not by Task Manager.
     * In other words, Task manager will not attempt to update the assigned agent with execution instructions.
     */
    @JsonProperty("isExecutedElsewhere")
    public Optional<Boolean> getIsExecutedElsewhere() {
        return isExecutedElsewhere;
    }

    /**
     * @return Time of Task creation.
     */
    @JsonProperty("createTime")
    public Optional<OffsetDateTime> getCreateTime() {
        return createTime;
    }

    /**
     * @return If populated, designates this to be a replicated Task.
     */
    @JsonProperty("replication")
    public Optional<Replication> getReplication() {
        return replication;
    }

    /**
     * @return If populated, indicates an initial set of entities that can be used to execute an entity aware task
     * For example, an entity Objective, an entity Keep In Zone, etc.
     * These will not be updated during execution. If a taskable agent needs continuous updates on the entities from the
     * COP, can call entity-manager, or use an AlternateId escape hatch.
     */
    @JsonProperty("initialEntities")
    public Optional<List<TaskEntity>> getInitialEntities() {
        return initialEntities;
    }

    /**
     * @return The networked owner of this Task. It is used to ensure that linear writes occur on the node responsible
     * for replication of task data to other nodes running Task Manager.
     */
    @JsonProperty("owner")
    public Optional<Owner> getOwner() {
        return owner;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Task && equalTo((Task) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Task other) {
        return version.equals(other.version)
                && displayName.equals(other.displayName)
                && specification.equals(other.specification)
                && createdBy.equals(other.createdBy)
                && lastUpdatedBy.equals(other.lastUpdatedBy)
                && lastUpdateTime.equals(other.lastUpdateTime)
                && status.equals(other.status)
                && scheduledTime.equals(other.scheduledTime)
                && relations.equals(other.relations)
                && description.equals(other.description)
                && isExecutedElsewhere.equals(other.isExecutedElsewhere)
                && createTime.equals(other.createTime)
                && replication.equals(other.replication)
                && initialEntities.equals(other.initialEntities)
                && owner.equals(other.owner);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.version,
                this.displayName,
                this.specification,
                this.createdBy,
                this.lastUpdatedBy,
                this.lastUpdateTime,
                this.status,
                this.scheduledTime,
                this.relations,
                this.description,
                this.isExecutedElsewhere,
                this.createTime,
                this.replication,
                this.initialEntities,
                this.owner);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TaskVersion> version = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        private Optional<GoogleProtobufAny> specification = Optional.empty();

        private Optional<Principal> createdBy = Optional.empty();

        private Optional<Principal> lastUpdatedBy = Optional.empty();

        private Optional<OffsetDateTime> lastUpdateTime = Optional.empty();

        private Optional<TaskStatus> status = Optional.empty();

        private Optional<OffsetDateTime> scheduledTime = Optional.empty();

        private Optional<Relations> relations = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Boolean> isExecutedElsewhere = Optional.empty();

        private Optional<OffsetDateTime> createTime = Optional.empty();

        private Optional<Replication> replication = Optional.empty();

        private Optional<List<TaskEntity>> initialEntities = Optional.empty();

        private Optional<Owner> owner = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Task other) {
            version(other.getVersion());
            displayName(other.getDisplayName());
            specification(other.getSpecification());
            createdBy(other.getCreatedBy());
            lastUpdatedBy(other.getLastUpdatedBy());
            lastUpdateTime(other.getLastUpdateTime());
            status(other.getStatus());
            scheduledTime(other.getScheduledTime());
            relations(other.getRelations());
            description(other.getDescription());
            isExecutedElsewhere(other.getIsExecutedElsewhere());
            createTime(other.getCreateTime());
            replication(other.getReplication());
            initialEntities(other.getInitialEntities());
            owner(other.getOwner());
            return this;
        }

        /**
         * <p>Version of this Task.</p>
         */
        @JsonSetter(value = "version", nulls = Nulls.SKIP)
        public Builder version(Optional<TaskVersion> version) {
            this.version = version;
            return this;
        }

        public Builder version(TaskVersion version) {
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * <p>DEPRECATED: Human readable display name for this Task, should be short (&lt;100 chars).</p>
         */
        @JsonSetter(value = "displayName", nulls = Nulls.SKIP)
        public Builder displayName(Optional<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        /**
         * <p>Full Task parameterization.</p>
         */
        @JsonSetter(value = "specification", nulls = Nulls.SKIP)
        public Builder specification(Optional<GoogleProtobufAny> specification) {
            this.specification = specification;
            return this;
        }

        public Builder specification(GoogleProtobufAny specification) {
            this.specification = Optional.ofNullable(specification);
            return this;
        }

        /**
         * <p>Records who created this Task. This field will not change after the Task has been created.</p>
         */
        @JsonSetter(value = "createdBy", nulls = Nulls.SKIP)
        public Builder createdBy(Optional<Principal> createdBy) {
            this.createdBy = createdBy;
            return this;
        }

        public Builder createdBy(Principal createdBy) {
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        /**
         * <p>Records who updated this Task last.</p>
         */
        @JsonSetter(value = "lastUpdatedBy", nulls = Nulls.SKIP)
        public Builder lastUpdatedBy(Optional<Principal> lastUpdatedBy) {
            this.lastUpdatedBy = lastUpdatedBy;
            return this;
        }

        public Builder lastUpdatedBy(Principal lastUpdatedBy) {
            this.lastUpdatedBy = Optional.ofNullable(lastUpdatedBy);
            return this;
        }

        /**
         * <p>Records the time of last update.</p>
         */
        @JsonSetter(value = "lastUpdateTime", nulls = Nulls.SKIP)
        public Builder lastUpdateTime(Optional<OffsetDateTime> lastUpdateTime) {
            this.lastUpdateTime = lastUpdateTime;
            return this;
        }

        public Builder lastUpdateTime(OffsetDateTime lastUpdateTime) {
            this.lastUpdateTime = Optional.ofNullable(lastUpdateTime);
            return this;
        }

        /**
         * <p>The status of this Task.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<TaskStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(TaskStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>If the Task has been scheduled to execute, what time it should execute at.</p>
         */
        @JsonSetter(value = "scheduledTime", nulls = Nulls.SKIP)
        public Builder scheduledTime(Optional<OffsetDateTime> scheduledTime) {
            this.scheduledTime = scheduledTime;
            return this;
        }

        public Builder scheduledTime(OffsetDateTime scheduledTime) {
            this.scheduledTime = Optional.ofNullable(scheduledTime);
            return this;
        }

        /**
         * <p>Any related Tasks associated with this, typically includes an assignee for this Task and/or a parent.</p>
         */
        @JsonSetter(value = "relations", nulls = Nulls.SKIP)
        public Builder relations(Optional<Relations> relations) {
            this.relations = relations;
            return this;
        }

        public Builder relations(Relations relations) {
            this.relations = Optional.ofNullable(relations);
            return this;
        }

        /**
         * <p>Longer, free form human readable description of this Task</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>If set, execution of this Task is managed elsewhere, not by Task Manager.
         * In other words, Task manager will not attempt to update the assigned agent with execution instructions.</p>
         */
        @JsonSetter(value = "isExecutedElsewhere", nulls = Nulls.SKIP)
        public Builder isExecutedElsewhere(Optional<Boolean> isExecutedElsewhere) {
            this.isExecutedElsewhere = isExecutedElsewhere;
            return this;
        }

        public Builder isExecutedElsewhere(Boolean isExecutedElsewhere) {
            this.isExecutedElsewhere = Optional.ofNullable(isExecutedElsewhere);
            return this;
        }

        /**
         * <p>Time of Task creation.</p>
         */
        @JsonSetter(value = "createTime", nulls = Nulls.SKIP)
        public Builder createTime(Optional<OffsetDateTime> createTime) {
            this.createTime = createTime;
            return this;
        }

        public Builder createTime(OffsetDateTime createTime) {
            this.createTime = Optional.ofNullable(createTime);
            return this;
        }

        /**
         * <p>If populated, designates this to be a replicated Task.</p>
         */
        @JsonSetter(value = "replication", nulls = Nulls.SKIP)
        public Builder replication(Optional<Replication> replication) {
            this.replication = replication;
            return this;
        }

        public Builder replication(Replication replication) {
            this.replication = Optional.ofNullable(replication);
            return this;
        }

        /**
         * <p>If populated, indicates an initial set of entities that can be used to execute an entity aware task
         * For example, an entity Objective, an entity Keep In Zone, etc.
         * These will not be updated during execution. If a taskable agent needs continuous updates on the entities from the
         * COP, can call entity-manager, or use an AlternateId escape hatch.</p>
         */
        @JsonSetter(value = "initialEntities", nulls = Nulls.SKIP)
        public Builder initialEntities(Optional<List<TaskEntity>> initialEntities) {
            this.initialEntities = initialEntities;
            return this;
        }

        public Builder initialEntities(List<TaskEntity> initialEntities) {
            this.initialEntities = Optional.ofNullable(initialEntities);
            return this;
        }

        /**
         * <p>The networked owner of this Task. It is used to ensure that linear writes occur on the node responsible
         * for replication of task data to other nodes running Task Manager.</p>
         */
        @JsonSetter(value = "owner", nulls = Nulls.SKIP)
        public Builder owner(Optional<Owner> owner) {
            this.owner = owner;
            return this;
        }

        public Builder owner(Owner owner) {
            this.owner = Optional.ofNullable(owner);
            return this;
        }

        public Task build() {
            return new Task(
                    version,
                    displayName,
                    specification,
                    createdBy,
                    lastUpdatedBy,
                    lastUpdateTime,
                    status,
                    scheduledTime,
                    relations,
                    description,
                    isExecutedElsewhere,
                    createTime,
                    replication,
                    initialEntities,
                    owner,
                    additionalProperties);
        }
    }
}
