/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Enu.Builder.class)
public final class Enu {
    private final Optional<Double> e;

    private final Optional<Double> n;

    private final Optional<Double> u;

    private final Map<String, Object> additionalProperties;

    private Enu(Optional<Double> e, Optional<Double> n, Optional<Double> u, Map<String, Object> additionalProperties) {
        this.e = e;
        this.n = n;
        this.u = u;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("e")
    public Optional<Double> getE() {
        return e;
    }

    @JsonProperty("n")
    public Optional<Double> getN() {
        return n;
    }

    @JsonProperty("u")
    public Optional<Double> getU() {
        return u;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Enu && equalTo((Enu) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Enu other) {
        return e.equals(other.e) && n.equals(other.n) && u.equals(other.u);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.e, this.n, this.u);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> e = Optional.empty();

        private Optional<Double> n = Optional.empty();

        private Optional<Double> u = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Enu other) {
            e(other.getE());
            n(other.getN());
            u(other.getU());
            return this;
        }

        @JsonSetter(value = "e", nulls = Nulls.SKIP)
        public Builder e(Optional<Double> e) {
            this.e = e;
            return this;
        }

        public Builder e(Double e) {
            this.e = Optional.ofNullable(e);
            return this;
        }

        @JsonSetter(value = "n", nulls = Nulls.SKIP)
        public Builder n(Optional<Double> n) {
            this.n = n;
            return this;
        }

        public Builder n(Double n) {
            this.n = Optional.ofNullable(n);
            return this;
        }

        @JsonSetter(value = "u", nulls = Nulls.SKIP)
        public Builder u(Optional<Double> u) {
            this.u = u;
            return this;
        }

        public Builder u(Double u) {
            this.u = Optional.ofNullable(u);
            return this;
        }

        public Enu build() {
            return new Enu(e, n, u, additionalProperties);
        }
    }
}
