/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaskStatus.Builder.class)
public final class TaskStatus {
    private final Optional<TaskStatusStatus> status;

    private final Optional<TaskError> taskError;

    private final Optional<GoogleProtobufAny> progress;

    private final Optional<GoogleProtobufAny> result;

    private final Optional<OffsetDateTime> startTime;

    private final Optional<GoogleProtobufAny> estimate;

    private final Optional<Allocation> allocation;

    private final Map<String, Object> additionalProperties;

    private TaskStatus(
            Optional<TaskStatusStatus> status,
            Optional<TaskError> taskError,
            Optional<GoogleProtobufAny> progress,
            Optional<GoogleProtobufAny> result,
            Optional<OffsetDateTime> startTime,
            Optional<GoogleProtobufAny> estimate,
            Optional<Allocation> allocation,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.taskError = taskError;
        this.progress = progress;
        this.result = result;
        this.startTime = startTime;
        this.estimate = estimate;
        this.allocation = allocation;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Status of the Task.
     */
    @JsonProperty("status")
    public Optional<TaskStatusStatus> getStatus() {
        return status;
    }

    /**
     * @return Any errors associated with the Task.
     */
    @JsonProperty("taskError")
    public Optional<TaskError> getTaskError() {
        return taskError;
    }

    /**
     * @return Any incremental progress on the Task, should be from the tasks/v* /progress folder.
     */
    @JsonProperty("progress")
    public Optional<GoogleProtobufAny> getProgress() {
        return progress;
    }

    /**
     * @return Any final result of the Task, should be from tasks/v* /result folder.
     */
    @JsonProperty("result")
    public Optional<GoogleProtobufAny> getResult() {
        return result;
    }

    /**
     * @return Time the Task began execution, may not be known even for executing Tasks.
     */
    @JsonProperty("startTime")
    public Optional<OffsetDateTime> getStartTime() {
        return startTime;
    }

    /**
     * @return Any estimate for how the Task will progress, should be from tasks/v* /estimates folder.
     */
    @JsonProperty("estimate")
    public Optional<GoogleProtobufAny> getEstimate() {
        return estimate;
    }

    /**
     * @return Any allocated agents of the Task.
     */
    @JsonProperty("allocation")
    public Optional<Allocation> getAllocation() {
        return allocation;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaskStatus && equalTo((TaskStatus) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaskStatus other) {
        return status.equals(other.status)
                && taskError.equals(other.taskError)
                && progress.equals(other.progress)
                && result.equals(other.result)
                && startTime.equals(other.startTime)
                && estimate.equals(other.estimate)
                && allocation.equals(other.allocation);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.status,
                this.taskError,
                this.progress,
                this.result,
                this.startTime,
                this.estimate,
                this.allocation);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TaskStatusStatus> status = Optional.empty();

        private Optional<TaskError> taskError = Optional.empty();

        private Optional<GoogleProtobufAny> progress = Optional.empty();

        private Optional<GoogleProtobufAny> result = Optional.empty();

        private Optional<OffsetDateTime> startTime = Optional.empty();

        private Optional<GoogleProtobufAny> estimate = Optional.empty();

        private Optional<Allocation> allocation = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaskStatus other) {
            status(other.getStatus());
            taskError(other.getTaskError());
            progress(other.getProgress());
            result(other.getResult());
            startTime(other.getStartTime());
            estimate(other.getEstimate());
            allocation(other.getAllocation());
            return this;
        }

        /**
         * <p>Status of the Task.</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<TaskStatusStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(TaskStatusStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Any errors associated with the Task.</p>
         */
        @JsonSetter(value = "taskError", nulls = Nulls.SKIP)
        public Builder taskError(Optional<TaskError> taskError) {
            this.taskError = taskError;
            return this;
        }

        public Builder taskError(TaskError taskError) {
            this.taskError = Optional.ofNullable(taskError);
            return this;
        }

        /**
         * <p>Any incremental progress on the Task, should be from the tasks/v* /progress folder.</p>
         */
        @JsonSetter(value = "progress", nulls = Nulls.SKIP)
        public Builder progress(Optional<GoogleProtobufAny> progress) {
            this.progress = progress;
            return this;
        }

        public Builder progress(GoogleProtobufAny progress) {
            this.progress = Optional.ofNullable(progress);
            return this;
        }

        /**
         * <p>Any final result of the Task, should be from tasks/v* /result folder.</p>
         */
        @JsonSetter(value = "result", nulls = Nulls.SKIP)
        public Builder result(Optional<GoogleProtobufAny> result) {
            this.result = result;
            return this;
        }

        public Builder result(GoogleProtobufAny result) {
            this.result = Optional.ofNullable(result);
            return this;
        }

        /**
         * <p>Time the Task began execution, may not be known even for executing Tasks.</p>
         */
        @JsonSetter(value = "startTime", nulls = Nulls.SKIP)
        public Builder startTime(Optional<OffsetDateTime> startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder startTime(OffsetDateTime startTime) {
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * <p>Any estimate for how the Task will progress, should be from tasks/v* /estimates folder.</p>
         */
        @JsonSetter(value = "estimate", nulls = Nulls.SKIP)
        public Builder estimate(Optional<GoogleProtobufAny> estimate) {
            this.estimate = estimate;
            return this;
        }

        public Builder estimate(GoogleProtobufAny estimate) {
            this.estimate = Optional.ofNullable(estimate);
            return this;
        }

        /**
         * <p>Any allocated agents of the Task.</p>
         */
        @JsonSetter(value = "allocation", nulls = Nulls.SKIP)
        public Builder allocation(Optional<Allocation> allocation) {
            this.allocation = allocation;
            return this;
        }

        public Builder allocation(Allocation allocation) {
            this.allocation = Optional.ofNullable(allocation);
            return this;
        }

        public TaskStatus build() {
            return new TaskStatus(
                    status, taskError, progress, result, startTime, estimate, allocation, additionalProperties);
        }
    }
}
