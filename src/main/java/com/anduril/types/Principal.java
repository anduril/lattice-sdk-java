/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Principal.Builder.class)
public final class Principal {
    private final Optional<System> system;

    private final Optional<User> user;

    private final Optional<Team> team;

    private final Optional<Principal> onBehalfOf;

    private final Map<String, Object> additionalProperties;

    private Principal(
            Optional<System> system,
            Optional<User> user,
            Optional<Team> team,
            Optional<Principal> onBehalfOf,
            Map<String, Object> additionalProperties) {
        this.system = system;
        this.user = user;
        this.team = team;
        this.onBehalfOf = onBehalfOf;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("system")
    public Optional<System> getSystem() {
        return system;
    }

    @JsonProperty("user")
    public Optional<User> getUser() {
        return user;
    }

    @JsonProperty("team")
    public Optional<Team> getTeam() {
        return team;
    }

    /**
     * @return The Principal <em>this</em> Principal is acting on behalf of.
     * <p>Likely only populated once in the nesting (i.e. the &quot;on_behalf_of&quot; Principal would not have another &quot;on_behalf_of&quot; in most cases).</p>
     */
    @JsonProperty("onBehalfOf")
    public Optional<Principal> getOnBehalfOf() {
        return onBehalfOf;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Principal && equalTo((Principal) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Principal other) {
        return system.equals(other.system)
                && user.equals(other.user)
                && team.equals(other.team)
                && onBehalfOf.equals(other.onBehalfOf);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.system, this.user, this.team, this.onBehalfOf);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<System> system = Optional.empty();

        private Optional<User> user = Optional.empty();

        private Optional<Team> team = Optional.empty();

        private Optional<Principal> onBehalfOf = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Principal other) {
            system(other.getSystem());
            user(other.getUser());
            team(other.getTeam());
            onBehalfOf(other.getOnBehalfOf());
            return this;
        }

        @JsonSetter(value = "system", nulls = Nulls.SKIP)
        public Builder system(Optional<System> system) {
            this.system = system;
            return this;
        }

        public Builder system(System system) {
            this.system = Optional.ofNullable(system);
            return this;
        }

        @JsonSetter(value = "user", nulls = Nulls.SKIP)
        public Builder user(Optional<User> user) {
            this.user = user;
            return this;
        }

        public Builder user(User user) {
            this.user = Optional.ofNullable(user);
            return this;
        }

        @JsonSetter(value = "team", nulls = Nulls.SKIP)
        public Builder team(Optional<Team> team) {
            this.team = team;
            return this;
        }

        public Builder team(Team team) {
            this.team = Optional.ofNullable(team);
            return this;
        }

        /**
         * <p>The Principal <em>this</em> Principal is acting on behalf of.</p>
         * <p>Likely only populated once in the nesting (i.e. the &quot;on_behalf_of&quot; Principal would not have another &quot;on_behalf_of&quot; in most cases).</p>
         */
        @JsonSetter(value = "onBehalfOf", nulls = Nulls.SKIP)
        public Builder onBehalfOf(Optional<Principal> onBehalfOf) {
            this.onBehalfOf = onBehalfOf;
            return this;
        }

        public Builder onBehalfOf(Principal onBehalfOf) {
            this.onBehalfOf = Optional.ofNullable(onBehalfOf);
            return this;
        }

        public Principal build() {
            return new Principal(system, user, team, onBehalfOf, additionalProperties);
        }
    }
}
