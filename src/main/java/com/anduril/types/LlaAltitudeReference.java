/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class LlaAltitudeReference {
    public static final LlaAltitudeReference ALTITUDE_REFERENCE_BELOW_SEA_SURFACE = new LlaAltitudeReference(
            Value.ALTITUDE_REFERENCE_BELOW_SEA_SURFACE, "ALTITUDE_REFERENCE_BELOW_SEA_SURFACE");

    public static final LlaAltitudeReference ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS_84 = new LlaAltitudeReference(
            Value.ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS_84, "ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS84");

    public static final LlaAltitudeReference ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM_96 = new LlaAltitudeReference(
            Value.ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM_96, "ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM96");

    public static final LlaAltitudeReference ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR =
            new LlaAltitudeReference(Value.ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR, "ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR");

    public static final LlaAltitudeReference ALTITUDE_REFERENCE_BAROMETRIC =
            new LlaAltitudeReference(Value.ALTITUDE_REFERENCE_BAROMETRIC, "ALTITUDE_REFERENCE_BAROMETRIC");

    public static final LlaAltitudeReference ALTITUDE_REFERENCE_INVALID =
            new LlaAltitudeReference(Value.ALTITUDE_REFERENCE_INVALID, "ALTITUDE_REFERENCE_INVALID");

    public static final LlaAltitudeReference ALTITUDE_REFERENCE_UNKNOWN =
            new LlaAltitudeReference(Value.ALTITUDE_REFERENCE_UNKNOWN, "ALTITUDE_REFERENCE_UNKNOWN");

    private final Value value;

    private final String string;

    LlaAltitudeReference(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof LlaAltitudeReference && this.string.equals(((LlaAltitudeReference) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case ALTITUDE_REFERENCE_BELOW_SEA_SURFACE:
                return visitor.visitAltitudeReferenceBelowSeaSurface();
            case ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS_84:
                return visitor.visitAltitudeReferenceHeightAboveWgs84();
            case ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM_96:
                return visitor.visitAltitudeReferenceHeightAboveEgm96();
            case ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR:
                return visitor.visitAltitudeReferenceAboveSeaFloor();
            case ALTITUDE_REFERENCE_BAROMETRIC:
                return visitor.visitAltitudeReferenceBarometric();
            case ALTITUDE_REFERENCE_INVALID:
                return visitor.visitAltitudeReferenceInvalid();
            case ALTITUDE_REFERENCE_UNKNOWN:
                return visitor.visitAltitudeReferenceUnknown();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static LlaAltitudeReference valueOf(String value) {
        switch (value) {
            case "ALTITUDE_REFERENCE_BELOW_SEA_SURFACE":
                return ALTITUDE_REFERENCE_BELOW_SEA_SURFACE;
            case "ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS84":
                return ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS_84;
            case "ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM96":
                return ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM_96;
            case "ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR":
                return ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR;
            case "ALTITUDE_REFERENCE_BAROMETRIC":
                return ALTITUDE_REFERENCE_BAROMETRIC;
            case "ALTITUDE_REFERENCE_INVALID":
                return ALTITUDE_REFERENCE_INVALID;
            case "ALTITUDE_REFERENCE_UNKNOWN":
                return ALTITUDE_REFERENCE_UNKNOWN;
            default:
                return new LlaAltitudeReference(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        ALTITUDE_REFERENCE_INVALID,

        ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS_84,

        ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM_96,

        ALTITUDE_REFERENCE_UNKNOWN,

        ALTITUDE_REFERENCE_BAROMETRIC,

        ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR,

        ALTITUDE_REFERENCE_BELOW_SEA_SURFACE,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitAltitudeReferenceInvalid();

        T visitAltitudeReferenceHeightAboveWgs84();

        T visitAltitudeReferenceHeightAboveEgm96();

        T visitAltitudeReferenceUnknown();

        T visitAltitudeReferenceBarometric();

        T visitAltitudeReferenceAboveSeaFloor();

        T visitAltitudeReferenceBelowSeaSurface();

        T visitUnknown(String unknownType);
    }
}
