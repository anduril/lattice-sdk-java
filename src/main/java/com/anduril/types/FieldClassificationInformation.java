/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FieldClassificationInformation.Builder.class)
public final class FieldClassificationInformation {
    private final Optional<String> fieldPath;

    private final Optional<ClassificationInformation> classificationInformation;

    private final Map<String, Object> additionalProperties;

    private FieldClassificationInformation(
            Optional<String> fieldPath,
            Optional<ClassificationInformation> classificationInformation,
            Map<String, Object> additionalProperties) {
        this.fieldPath = fieldPath;
        this.classificationInformation = classificationInformation;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Proto field path which is the string representation of a field.
     * <blockquote>
     * <p>example: signal.bandwidth_hz would be bandwidth_hz in the signal component</p>
     * </blockquote>
     */
    @JsonProperty("fieldPath")
    public Optional<String> getFieldPath() {
        return fieldPath;
    }

    /**
     * @return The information which makes up the field level classification marking.
     */
    @JsonProperty("classificationInformation")
    public Optional<ClassificationInformation> getClassificationInformation() {
        return classificationInformation;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FieldClassificationInformation && equalTo((FieldClassificationInformation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FieldClassificationInformation other) {
        return fieldPath.equals(other.fieldPath) && classificationInformation.equals(other.classificationInformation);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fieldPath, this.classificationInformation);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> fieldPath = Optional.empty();

        private Optional<ClassificationInformation> classificationInformation = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FieldClassificationInformation other) {
            fieldPath(other.getFieldPath());
            classificationInformation(other.getClassificationInformation());
            return this;
        }

        /**
         * <p>Proto field path which is the string representation of a field.</p>
         * <blockquote>
         * <p>example: signal.bandwidth_hz would be bandwidth_hz in the signal component</p>
         * </blockquote>
         */
        @JsonSetter(value = "fieldPath", nulls = Nulls.SKIP)
        public Builder fieldPath(Optional<String> fieldPath) {
            this.fieldPath = fieldPath;
            return this;
        }

        public Builder fieldPath(String fieldPath) {
            this.fieldPath = Optional.ofNullable(fieldPath);
            return this;
        }

        /**
         * <p>The information which makes up the field level classification marking.</p>
         */
        @JsonSetter(value = "classificationInformation", nulls = Nulls.SKIP)
        public Builder classificationInformation(Optional<ClassificationInformation> classificationInformation) {
            this.classificationInformation = classificationInformation;
            return this;
        }

        public Builder classificationInformation(ClassificationInformation classificationInformation) {
            this.classificationInformation = Optional.ofNullable(classificationInformation);
            return this;
        }

        public FieldClassificationInformation build() {
            return new FieldClassificationInformation(fieldPath, classificationInformation, additionalProperties);
        }
    }
}
