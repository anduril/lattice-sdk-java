/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TargetPriority.Builder.class)
public final class TargetPriority {
    private final Optional<HighValueTarget> highValueTarget;

    private final Optional<Threat> threat;

    private final Map<String, Object> additionalProperties;

    private TargetPriority(
            Optional<HighValueTarget> highValueTarget,
            Optional<Threat> threat,
            Map<String, Object> additionalProperties) {
        this.highValueTarget = highValueTarget;
        this.threat = threat;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Describes the target priority in relation to high value target lists.
     */
    @JsonProperty("highValueTarget")
    public Optional<HighValueTarget> getHighValueTarget() {
        return highValueTarget;
    }

    /**
     * @return Describes whether the entity should be treated as a threat
     */
    @JsonProperty("threat")
    public Optional<Threat> getThreat() {
        return threat;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TargetPriority && equalTo((TargetPriority) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TargetPriority other) {
        return highValueTarget.equals(other.highValueTarget) && threat.equals(other.threat);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.highValueTarget, this.threat);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<HighValueTarget> highValueTarget = Optional.empty();

        private Optional<Threat> threat = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TargetPriority other) {
            highValueTarget(other.getHighValueTarget());
            threat(other.getThreat());
            return this;
        }

        /**
         * <p>Describes the target priority in relation to high value target lists.</p>
         */
        @JsonSetter(value = "highValueTarget", nulls = Nulls.SKIP)
        public Builder highValueTarget(Optional<HighValueTarget> highValueTarget) {
            this.highValueTarget = highValueTarget;
            return this;
        }

        public Builder highValueTarget(HighValueTarget highValueTarget) {
            this.highValueTarget = Optional.ofNullable(highValueTarget);
            return this;
        }

        /**
         * <p>Describes whether the entity should be treated as a threat</p>
         */
        @JsonSetter(value = "threat", nulls = Nulls.SKIP)
        public Builder threat(Optional<Threat> threat) {
            this.threat = threat;
            return this;
        }

        public Builder threat(Threat threat) {
            this.threat = Optional.ofNullable(threat);
            return this;
        }

        public TargetPriority build() {
            return new TargetPriority(highValueTarget, threat, additionalProperties);
        }
    }
}
