/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TMat3.Builder.class)
public final class TMat3 {
    private final Optional<Float> mxx;

    private final Optional<Float> mxy;

    private final Optional<Float> mxz;

    private final Optional<Float> myy;

    private final Optional<Float> myz;

    private final Optional<Float> mzz;

    private final Map<String, Object> additionalProperties;

    private TMat3(
            Optional<Float> mxx,
            Optional<Float> mxy,
            Optional<Float> mxz,
            Optional<Float> myy,
            Optional<Float> myz,
            Optional<Float> mzz,
            Map<String, Object> additionalProperties) {
        this.mxx = mxx;
        this.mxy = mxy;
        this.mxz = mxz;
        this.myy = myy;
        this.myz = myz;
        this.mzz = mzz;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("mxx")
    public Optional<Float> getMxx() {
        return mxx;
    }

    @JsonProperty("mxy")
    public Optional<Float> getMxy() {
        return mxy;
    }

    @JsonProperty("mxz")
    public Optional<Float> getMxz() {
        return mxz;
    }

    @JsonProperty("myy")
    public Optional<Float> getMyy() {
        return myy;
    }

    @JsonProperty("myz")
    public Optional<Float> getMyz() {
        return myz;
    }

    @JsonProperty("mzz")
    public Optional<Float> getMzz() {
        return mzz;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TMat3 && equalTo((TMat3) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TMat3 other) {
        return mxx.equals(other.mxx)
                && mxy.equals(other.mxy)
                && mxz.equals(other.mxz)
                && myy.equals(other.myy)
                && myz.equals(other.myz)
                && mzz.equals(other.mzz);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.mxx, this.mxy, this.mxz, this.myy, this.myz, this.mzz);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Float> mxx = Optional.empty();

        private Optional<Float> mxy = Optional.empty();

        private Optional<Float> mxz = Optional.empty();

        private Optional<Float> myy = Optional.empty();

        private Optional<Float> myz = Optional.empty();

        private Optional<Float> mzz = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TMat3 other) {
            mxx(other.getMxx());
            mxy(other.getMxy());
            mxz(other.getMxz());
            myy(other.getMyy());
            myz(other.getMyz());
            mzz(other.getMzz());
            return this;
        }

        @JsonSetter(value = "mxx", nulls = Nulls.SKIP)
        public Builder mxx(Optional<Float> mxx) {
            this.mxx = mxx;
            return this;
        }

        public Builder mxx(Float mxx) {
            this.mxx = Optional.ofNullable(mxx);
            return this;
        }

        @JsonSetter(value = "mxy", nulls = Nulls.SKIP)
        public Builder mxy(Optional<Float> mxy) {
            this.mxy = mxy;
            return this;
        }

        public Builder mxy(Float mxy) {
            this.mxy = Optional.ofNullable(mxy);
            return this;
        }

        @JsonSetter(value = "mxz", nulls = Nulls.SKIP)
        public Builder mxz(Optional<Float> mxz) {
            this.mxz = mxz;
            return this;
        }

        public Builder mxz(Float mxz) {
            this.mxz = Optional.ofNullable(mxz);
            return this;
        }

        @JsonSetter(value = "myy", nulls = Nulls.SKIP)
        public Builder myy(Optional<Float> myy) {
            this.myy = myy;
            return this;
        }

        public Builder myy(Float myy) {
            this.myy = Optional.ofNullable(myy);
            return this;
        }

        @JsonSetter(value = "myz", nulls = Nulls.SKIP)
        public Builder myz(Optional<Float> myz) {
            this.myz = myz;
            return this;
        }

        public Builder myz(Float myz) {
            this.myz = Optional.ofNullable(myz);
            return this;
        }

        @JsonSetter(value = "mzz", nulls = Nulls.SKIP)
        public Builder mzz(Optional<Float> mzz) {
            this.mzz = mzz;
            return this;
        }

        public Builder mzz(Float mzz) {
            this.mzz = Optional.ofNullable(mzz);
            return this;
        }

        public TMat3 build() {
            return new TMat3(mxx, mxy, mxz, myy, myz, mzz, additionalProperties);
        }
    }
}
