/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Override.Builder.class)
public final class Override {
    private final Optional<String> requestId;

    private final Optional<String> fieldPath;

    private final Optional<Entity> maskedFieldValue;

    private final Optional<OverrideStatus> status;

    private final Optional<Provenance> provenance;

    private final Optional<OverrideType> type;

    private final Optional<OffsetDateTime> requestTimestamp;

    private final Map<String, Object> additionalProperties;

    private Override(
            Optional<String> requestId,
            Optional<String> fieldPath,
            Optional<Entity> maskedFieldValue,
            Optional<OverrideStatus> status,
            Optional<Provenance> provenance,
            Optional<OverrideType> type,
            Optional<OffsetDateTime> requestTimestamp,
            Map<String, Object> additionalProperties) {
        this.requestId = requestId;
        this.fieldPath = fieldPath;
        this.maskedFieldValue = maskedFieldValue;
        this.status = status;
        this.provenance = provenance;
        this.type = type;
        this.requestTimestamp = requestTimestamp;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return override request id for an override request
     */
    @JsonProperty("requestId")
    public Optional<String> getRequestId() {
        return requestId;
    }

    /**
     * @return proto field path which is the string representation of a field.
     * example: correlated.primary_entity_id would be primary_entity_id in correlated component
     */
    @JsonProperty("fieldPath")
    public Optional<String> getFieldPath() {
        return fieldPath;
    }

    /**
     * @return new field value corresponding to field path. In the shape of an empty entity with only the changed value.
     * example: entity: { mil_view: { disposition: Disposition_DISPOSITION_HOSTILE } }
     */
    @JsonProperty("maskedFieldValue")
    public Optional<Entity> getMaskedFieldValue() {
        return maskedFieldValue;
    }

    /**
     * @return status of the override
     */
    @JsonProperty("status")
    public Optional<OverrideStatus> getStatus() {
        return status;
    }

    @JsonProperty("provenance")
    public Optional<Provenance> getProvenance() {
        return provenance;
    }

    /**
     * @return The type of the override, defined by the stage of the entity lifecycle that the entity was in when the override
     * was requested.
     */
    @JsonProperty("type")
    public Optional<OverrideType> getType() {
        return type;
    }

    /**
     * @return Timestamp of the override request. The timestamp is generated by the Entity Manager instance that receives the request.
     */
    @JsonProperty("requestTimestamp")
    public Optional<OffsetDateTime> getRequestTimestamp() {
        return requestTimestamp;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Override && equalTo((Override) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Override other) {
        return requestId.equals(other.requestId)
                && fieldPath.equals(other.fieldPath)
                && maskedFieldValue.equals(other.maskedFieldValue)
                && status.equals(other.status)
                && provenance.equals(other.provenance)
                && type.equals(other.type)
                && requestTimestamp.equals(other.requestTimestamp);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.requestId,
                this.fieldPath,
                this.maskedFieldValue,
                this.status,
                this.provenance,
                this.type,
                this.requestTimestamp);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> requestId = Optional.empty();

        private Optional<String> fieldPath = Optional.empty();

        private Optional<Entity> maskedFieldValue = Optional.empty();

        private Optional<OverrideStatus> status = Optional.empty();

        private Optional<Provenance> provenance = Optional.empty();

        private Optional<OverrideType> type = Optional.empty();

        private Optional<OffsetDateTime> requestTimestamp = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Override other) {
            requestId(other.getRequestId());
            fieldPath(other.getFieldPath());
            maskedFieldValue(other.getMaskedFieldValue());
            status(other.getStatus());
            provenance(other.getProvenance());
            type(other.getType());
            requestTimestamp(other.getRequestTimestamp());
            return this;
        }

        /**
         * <p>override request id for an override request</p>
         */
        @JsonSetter(value = "requestId", nulls = Nulls.SKIP)
        public Builder requestId(Optional<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            this.requestId = Optional.ofNullable(requestId);
            return this;
        }

        /**
         * <p>proto field path which is the string representation of a field.
         * example: correlated.primary_entity_id would be primary_entity_id in correlated component</p>
         */
        @JsonSetter(value = "fieldPath", nulls = Nulls.SKIP)
        public Builder fieldPath(Optional<String> fieldPath) {
            this.fieldPath = fieldPath;
            return this;
        }

        public Builder fieldPath(String fieldPath) {
            this.fieldPath = Optional.ofNullable(fieldPath);
            return this;
        }

        /**
         * <p>new field value corresponding to field path. In the shape of an empty entity with only the changed value.
         * example: entity: { mil_view: { disposition: Disposition_DISPOSITION_HOSTILE } }</p>
         */
        @JsonSetter(value = "maskedFieldValue", nulls = Nulls.SKIP)
        public Builder maskedFieldValue(Optional<Entity> maskedFieldValue) {
            this.maskedFieldValue = maskedFieldValue;
            return this;
        }

        public Builder maskedFieldValue(Entity maskedFieldValue) {
            this.maskedFieldValue = Optional.ofNullable(maskedFieldValue);
            return this;
        }

        /**
         * <p>status of the override</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<OverrideStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(OverrideStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "provenance", nulls = Nulls.SKIP)
        public Builder provenance(Optional<Provenance> provenance) {
            this.provenance = provenance;
            return this;
        }

        public Builder provenance(Provenance provenance) {
            this.provenance = Optional.ofNullable(provenance);
            return this;
        }

        /**
         * <p>The type of the override, defined by the stage of the entity lifecycle that the entity was in when the override
         * was requested.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<OverrideType> type) {
            this.type = type;
            return this;
        }

        public Builder type(OverrideType type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>Timestamp of the override request. The timestamp is generated by the Entity Manager instance that receives the request.</p>
         */
        @JsonSetter(value = "requestTimestamp", nulls = Nulls.SKIP)
        public Builder requestTimestamp(Optional<OffsetDateTime> requestTimestamp) {
            this.requestTimestamp = requestTimestamp;
            return this;
        }

        public Builder requestTimestamp(OffsetDateTime requestTimestamp) {
            this.requestTimestamp = Optional.ofNullable(requestTimestamp);
            return this;
        }

        public Override build() {
            return new Override(
                    requestId,
                    fieldPath,
                    maskedFieldValue,
                    status,
                    provenance,
                    type,
                    requestTimestamp,
                    additionalProperties);
        }
    }
}
