/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ModeS.Builder.class)
public final class ModeS {
    private final Optional<String> id;

    private final Optional<Integer> address;

    private final Map<String, Object> additionalProperties;

    private ModeS(Optional<String> id, Optional<Integer> address, Map<String, Object> additionalProperties) {
        this.id = id;
        this.address = address;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Mode S identifier which comprises of 8 alphanumeric characters.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The Mode S ICAO aircraft address. Expected values are between 1 and 16777214 decimal. The Mode S address is
     * considered unique.
     */
    @JsonProperty("address")
    public Optional<Integer> getAddress() {
        return address;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ModeS && equalTo((ModeS) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ModeS other) {
        return id.equals(other.id) && address.equals(other.address);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.address);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<Integer> address = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ModeS other) {
            id(other.getId());
            address(other.getAddress());
            return this;
        }

        /**
         * <p>Mode S identifier which comprises of 8 alphanumeric characters.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The Mode S ICAO aircraft address. Expected values are between 1 and 16777214 decimal. The Mode S address is
         * considered unique.</p>
         */
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Integer> address) {
            this.address = address;
            return this;
        }

        public Builder address(Integer address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        public ModeS build() {
            return new ModeS(id, address, additionalProperties);
        }
    }
}
