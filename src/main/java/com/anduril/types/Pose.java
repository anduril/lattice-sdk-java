/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Pose.Builder.class)
public final class Pose {
    private final Optional<Lla> pos;

    private final Optional<Quaternion> attEnu;

    private final Map<String, Object> additionalProperties;

    private Pose(Optional<Lla> pos, Optional<Quaternion> attEnu, Map<String, Object> additionalProperties) {
        this.pos = pos;
        this.attEnu = attEnu;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Geospatial location defined by this Pose.
     */
    @JsonProperty("pos")
    public Optional<Lla> getPos() {
        return pos;
    }

    /**
     * @return The quaternion to transform a point in the Pose frame to the ENU frame. The Pose frame could be Body, Turret,
     * etc and is determined by the context in which this Pose is used.
     * The normal convention for defining orientation is to list the frames of transformation, for example
     * att_gimbal_to_enu is the quaternion which transforms a point in the gimbal frame to the body frame, but
     * in this case we truncate to att_enu because the Pose frame isn't defined. A potentially better name for this
     * field would have been att_pose_to_enu.
     * <p>Implementations of this quaternion should left multiply this quaternion to transform a point from the Pose frame
     * to the enu frame.</p>
     * <p>Point&lt;Pose&gt; posePt{1,0,0};
     * Rotation&lt;Enu, Pose&gt; attPoseToEnu{};
     * Point&lt;Enu&gt; = attPoseToEnu*posePt;</p>
     * <p>This transformed point represents some vector in ENU space that is aligned with the x axis of the attPoseToEnu
     * matrix.</p>
     * <p>An alternative matrix expression is as follows:
     * ptEnu = M x ptPose</p>
     */
    @JsonProperty("attEnu")
    public Optional<Quaternion> getAttEnu() {
        return attEnu;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Pose && equalTo((Pose) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Pose other) {
        return pos.equals(other.pos) && attEnu.equals(other.attEnu);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pos, this.attEnu);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Lla> pos = Optional.empty();

        private Optional<Quaternion> attEnu = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Pose other) {
            pos(other.getPos());
            attEnu(other.getAttEnu());
            return this;
        }

        /**
         * <p>Geospatial location defined by this Pose.</p>
         */
        @JsonSetter(value = "pos", nulls = Nulls.SKIP)
        public Builder pos(Optional<Lla> pos) {
            this.pos = pos;
            return this;
        }

        public Builder pos(Lla pos) {
            this.pos = Optional.ofNullable(pos);
            return this;
        }

        /**
         * <p>The quaternion to transform a point in the Pose frame to the ENU frame. The Pose frame could be Body, Turret,
         * etc and is determined by the context in which this Pose is used.
         * The normal convention for defining orientation is to list the frames of transformation, for example
         * att_gimbal_to_enu is the quaternion which transforms a point in the gimbal frame to the body frame, but
         * in this case we truncate to att_enu because the Pose frame isn't defined. A potentially better name for this
         * field would have been att_pose_to_enu.</p>
         * <p>Implementations of this quaternion should left multiply this quaternion to transform a point from the Pose frame
         * to the enu frame.</p>
         * <p>Point&lt;Pose&gt; posePt{1,0,0};
         * Rotation&lt;Enu, Pose&gt; attPoseToEnu{};
         * Point&lt;Enu&gt; = attPoseToEnu*posePt;</p>
         * <p>This transformed point represents some vector in ENU space that is aligned with the x axis of the attPoseToEnu
         * matrix.</p>
         * <p>An alternative matrix expression is as follows:
         * ptEnu = M x ptPose</p>
         */
        @JsonSetter(value = "attEnu", nulls = Nulls.SKIP)
        public Builder attEnu(Optional<Quaternion> attEnu) {
            this.attEnu = attEnu;
            return this;
        }

        public Builder attEnu(Quaternion attEnu) {
            this.attEnu = Optional.ofNullable(attEnu);
            return this;
        }

        public Pose build() {
            return new Pose(pos, attEnu, additionalProperties);
        }
    }
}
