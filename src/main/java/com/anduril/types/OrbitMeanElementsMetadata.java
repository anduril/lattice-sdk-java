/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrbitMeanElementsMetadata.Builder.class)
public final class OrbitMeanElementsMetadata {
    private final Optional<OffsetDateTime> creationDate;

    private final Optional<String> originator;

    private final Optional<String> messageId;

    private final Optional<OrbitMeanElementsMetadataRefFrame> refFrame;

    private final Optional<OffsetDateTime> refFrameEpoch;

    private final Optional<OrbitMeanElementsMetadataMeanElementTheory> meanElementTheory;

    private final Map<String, Object> additionalProperties;

    private OrbitMeanElementsMetadata(
            Optional<OffsetDateTime> creationDate,
            Optional<String> originator,
            Optional<String> messageId,
            Optional<OrbitMeanElementsMetadataRefFrame> refFrame,
            Optional<OffsetDateTime> refFrameEpoch,
            Optional<OrbitMeanElementsMetadataMeanElementTheory> meanElementTheory,
            Map<String, Object> additionalProperties) {
        this.creationDate = creationDate;
        this.originator = originator;
        this.messageId = messageId;
        this.refFrame = refFrame;
        this.refFrameEpoch = refFrameEpoch;
        this.meanElementTheory = meanElementTheory;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Creation date/time in UTC
     */
    @JsonProperty("creationDate")
    public Optional<OffsetDateTime> getCreationDate() {
        return creationDate;
    }

    /**
     * @return Creating agency or operator
     */
    @JsonProperty("originator")
    public Optional<String> getOriginator() {
        return originator;
    }

    /**
     * @return ID that uniquely identifies a message from a given originator.
     */
    @JsonProperty("messageId")
    public Optional<String> getMessageId() {
        return messageId;
    }

    /**
     * @return Reference frame, assumed to be Earth-centered
     */
    @JsonProperty("refFrame")
    public Optional<OrbitMeanElementsMetadataRefFrame> getRefFrame() {
        return refFrame;
    }

    /**
     * @return Reference frame epoch in UTC - mandatory only if not intrinsic to frame definition
     */
    @JsonProperty("refFrameEpoch")
    public Optional<OffsetDateTime> getRefFrameEpoch() {
        return refFrameEpoch;
    }

    @JsonProperty("meanElementTheory")
    public Optional<OrbitMeanElementsMetadataMeanElementTheory> getMeanElementTheory() {
        return meanElementTheory;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrbitMeanElementsMetadata && equalTo((OrbitMeanElementsMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrbitMeanElementsMetadata other) {
        return creationDate.equals(other.creationDate)
                && originator.equals(other.originator)
                && messageId.equals(other.messageId)
                && refFrame.equals(other.refFrame)
                && refFrameEpoch.equals(other.refFrameEpoch)
                && meanElementTheory.equals(other.meanElementTheory);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.creationDate,
                this.originator,
                this.messageId,
                this.refFrame,
                this.refFrameEpoch,
                this.meanElementTheory);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OffsetDateTime> creationDate = Optional.empty();

        private Optional<String> originator = Optional.empty();

        private Optional<String> messageId = Optional.empty();

        private Optional<OrbitMeanElementsMetadataRefFrame> refFrame = Optional.empty();

        private Optional<OffsetDateTime> refFrameEpoch = Optional.empty();

        private Optional<OrbitMeanElementsMetadataMeanElementTheory> meanElementTheory = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrbitMeanElementsMetadata other) {
            creationDate(other.getCreationDate());
            originator(other.getOriginator());
            messageId(other.getMessageId());
            refFrame(other.getRefFrame());
            refFrameEpoch(other.getRefFrameEpoch());
            meanElementTheory(other.getMeanElementTheory());
            return this;
        }

        /**
         * <p>Creation date/time in UTC</p>
         */
        @JsonSetter(value = "creationDate", nulls = Nulls.SKIP)
        public Builder creationDate(Optional<OffsetDateTime> creationDate) {
            this.creationDate = creationDate;
            return this;
        }

        public Builder creationDate(OffsetDateTime creationDate) {
            this.creationDate = Optional.ofNullable(creationDate);
            return this;
        }

        /**
         * <p>Creating agency or operator</p>
         */
        @JsonSetter(value = "originator", nulls = Nulls.SKIP)
        public Builder originator(Optional<String> originator) {
            this.originator = originator;
            return this;
        }

        public Builder originator(String originator) {
            this.originator = Optional.ofNullable(originator);
            return this;
        }

        /**
         * <p>ID that uniquely identifies a message from a given originator.</p>
         */
        @JsonSetter(value = "messageId", nulls = Nulls.SKIP)
        public Builder messageId(Optional<String> messageId) {
            this.messageId = messageId;
            return this;
        }

        public Builder messageId(String messageId) {
            this.messageId = Optional.ofNullable(messageId);
            return this;
        }

        /**
         * <p>Reference frame, assumed to be Earth-centered</p>
         */
        @JsonSetter(value = "refFrame", nulls = Nulls.SKIP)
        public Builder refFrame(Optional<OrbitMeanElementsMetadataRefFrame> refFrame) {
            this.refFrame = refFrame;
            return this;
        }

        public Builder refFrame(OrbitMeanElementsMetadataRefFrame refFrame) {
            this.refFrame = Optional.ofNullable(refFrame);
            return this;
        }

        /**
         * <p>Reference frame epoch in UTC - mandatory only if not intrinsic to frame definition</p>
         */
        @JsonSetter(value = "refFrameEpoch", nulls = Nulls.SKIP)
        public Builder refFrameEpoch(Optional<OffsetDateTime> refFrameEpoch) {
            this.refFrameEpoch = refFrameEpoch;
            return this;
        }

        public Builder refFrameEpoch(OffsetDateTime refFrameEpoch) {
            this.refFrameEpoch = Optional.ofNullable(refFrameEpoch);
            return this;
        }

        @JsonSetter(value = "meanElementTheory", nulls = Nulls.SKIP)
        public Builder meanElementTheory(Optional<OrbitMeanElementsMetadataMeanElementTheory> meanElementTheory) {
            this.meanElementTheory = meanElementTheory;
            return this;
        }

        public Builder meanElementTheory(OrbitMeanElementsMetadataMeanElementTheory meanElementTheory) {
            this.meanElementTheory = Optional.ofNullable(meanElementTheory);
            return this;
        }

        public OrbitMeanElementsMetadata build() {
            return new OrbitMeanElementsMetadata(
                    creationDate,
                    originator,
                    messageId,
                    refFrame,
                    refFrameEpoch,
                    meanElementTheory,
                    additionalProperties);
        }
    }
}
