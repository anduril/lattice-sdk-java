/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PowerSource.Builder.class)
public final class PowerSource {
    private final Optional<PowerSourcePowerStatus> powerStatus;

    private final Optional<PowerSourcePowerType> powerType;

    private final Optional<PowerLevel> powerLevel;

    private final Optional<List<String>> messages;

    private final Optional<Boolean> offloadable;

    private final Map<String, Object> additionalProperties;

    private PowerSource(
            Optional<PowerSourcePowerStatus> powerStatus,
            Optional<PowerSourcePowerType> powerType,
            Optional<PowerLevel> powerLevel,
            Optional<List<String>> messages,
            Optional<Boolean> offloadable,
            Map<String, Object> additionalProperties) {
        this.powerStatus = powerStatus;
        this.powerType = powerType;
        this.powerLevel = powerLevel;
        this.messages = messages;
        this.offloadable = offloadable;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Status of the power source.
     */
    @JsonProperty("powerStatus")
    public Optional<PowerSourcePowerStatus> getPowerStatus() {
        return powerStatus;
    }

    /**
     * @return Used to determine the type of power source.
     */
    @JsonProperty("powerType")
    public Optional<PowerSourcePowerType> getPowerType() {
        return powerType;
    }

    /**
     * @return Power level of the system. If absent, the power level is assumed to be unknown.
     */
    @JsonProperty("powerLevel")
    public Optional<PowerLevel> getPowerLevel() {
        return powerLevel;
    }

    /**
     * @return Set of human-readable messages with status of the power system. Typically this would be used in an error state
     * to provide additional error information. This can also be used for informational messages.
     */
    @JsonProperty("messages")
    public Optional<List<String>> getMessages() {
        return messages;
    }

    /**
     * @return Whether the power source is offloadable. If the value is missing (as opposed to false) then the entity does not
     * report whether the power source is offloadable.
     */
    @JsonProperty("offloadable")
    public Optional<Boolean> getOffloadable() {
        return offloadable;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PowerSource && equalTo((PowerSource) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PowerSource other) {
        return powerStatus.equals(other.powerStatus)
                && powerType.equals(other.powerType)
                && powerLevel.equals(other.powerLevel)
                && messages.equals(other.messages)
                && offloadable.equals(other.offloadable);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.powerStatus, this.powerType, this.powerLevel, this.messages, this.offloadable);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PowerSourcePowerStatus> powerStatus = Optional.empty();

        private Optional<PowerSourcePowerType> powerType = Optional.empty();

        private Optional<PowerLevel> powerLevel = Optional.empty();

        private Optional<List<String>> messages = Optional.empty();

        private Optional<Boolean> offloadable = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PowerSource other) {
            powerStatus(other.getPowerStatus());
            powerType(other.getPowerType());
            powerLevel(other.getPowerLevel());
            messages(other.getMessages());
            offloadable(other.getOffloadable());
            return this;
        }

        /**
         * <p>Status of the power source.</p>
         */
        @JsonSetter(value = "powerStatus", nulls = Nulls.SKIP)
        public Builder powerStatus(Optional<PowerSourcePowerStatus> powerStatus) {
            this.powerStatus = powerStatus;
            return this;
        }

        public Builder powerStatus(PowerSourcePowerStatus powerStatus) {
            this.powerStatus = Optional.ofNullable(powerStatus);
            return this;
        }

        /**
         * <p>Used to determine the type of power source.</p>
         */
        @JsonSetter(value = "powerType", nulls = Nulls.SKIP)
        public Builder powerType(Optional<PowerSourcePowerType> powerType) {
            this.powerType = powerType;
            return this;
        }

        public Builder powerType(PowerSourcePowerType powerType) {
            this.powerType = Optional.ofNullable(powerType);
            return this;
        }

        /**
         * <p>Power level of the system. If absent, the power level is assumed to be unknown.</p>
         */
        @JsonSetter(value = "powerLevel", nulls = Nulls.SKIP)
        public Builder powerLevel(Optional<PowerLevel> powerLevel) {
            this.powerLevel = powerLevel;
            return this;
        }

        public Builder powerLevel(PowerLevel powerLevel) {
            this.powerLevel = Optional.ofNullable(powerLevel);
            return this;
        }

        /**
         * <p>Set of human-readable messages with status of the power system. Typically this would be used in an error state
         * to provide additional error information. This can also be used for informational messages.</p>
         */
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public Builder messages(Optional<List<String>> messages) {
            this.messages = messages;
            return this;
        }

        public Builder messages(List<String> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>Whether the power source is offloadable. If the value is missing (as opposed to false) then the entity does not
         * report whether the power source is offloadable.</p>
         */
        @JsonSetter(value = "offloadable", nulls = Nulls.SKIP)
        public Builder offloadable(Optional<Boolean> offloadable) {
            this.offloadable = offloadable;
            return this;
        }

        public Builder offloadable(Boolean offloadable) {
            this.offloadable = Optional.ofNullable(offloadable);
            return this;
        }

        public PowerSource build() {
            return new PowerSource(powerStatus, powerType, powerLevel, messages, offloadable, additionalProperties);
        }
    }
}
