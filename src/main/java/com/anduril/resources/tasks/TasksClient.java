/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.resources.tasks;

import com.anduril.core.ClientOptions;
import com.anduril.core.RequestOptions;
import com.anduril.resources.tasks.requests.AgentListener;
import com.anduril.resources.tasks.requests.TaskCreation;
import com.anduril.resources.tasks.requests.TaskQuery;
import com.anduril.resources.tasks.requests.TaskStatusUpdate;
import com.anduril.types.AgentRequest;
import com.anduril.types.Task;
import com.anduril.types.TaskQueryResults;

public class TasksClient {
    protected final ClientOptions clientOptions;

    private final RawTasksClient rawClient;

    public TasksClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawTasksClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawTasksClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public Task createTask() {
        return this.rawClient.createTask().body();
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public Task createTask(TaskCreation request) {
        return this.rawClient.createTask(request).body();
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public Task createTask(TaskCreation request, RequestOptions requestOptions) {
        return this.rawClient.createTask(request, requestOptions).body();
    }

    public Task getTask(String taskId) {
        return this.rawClient.getTask(taskId).body();
    }

    public Task getTask(String taskId, RequestOptions requestOptions) {
        return this.rawClient.getTask(taskId, requestOptions).body();
    }

    /**
     * Update the status of a task.
     */
    public Task updateTaskStatus(String taskId) {
        return this.rawClient.updateTaskStatus(taskId).body();
    }

    /**
     * Update the status of a task.
     */
    public Task updateTaskStatus(String taskId, TaskStatusUpdate request) {
        return this.rawClient.updateTaskStatus(taskId, request).body();
    }

    /**
     * Update the status of a task.
     */
    public Task updateTaskStatus(String taskId, TaskStatusUpdate request, RequestOptions requestOptions) {
        return this.rawClient.updateTaskStatus(taskId, request, requestOptions).body();
    }

    /**
     * Query for tasks by a specified search criteria.
     */
    public TaskQueryResults queryTasks() {
        return this.rawClient.queryTasks().body();
    }

    /**
     * Query for tasks by a specified search criteria.
     */
    public TaskQueryResults queryTasks(TaskQuery request) {
        return this.rawClient.queryTasks(request).body();
    }

    /**
     * Query for tasks by a specified search criteria.
     */
    public TaskQueryResults queryTasks(TaskQuery request, RequestOptions requestOptions) {
        return this.rawClient.queryTasks(request, requestOptions).body();
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public AgentRequest listenAsAgent() {
        return this.rawClient.listenAsAgent().body();
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public AgentRequest listenAsAgent(AgentListener request) {
        return this.rawClient.listenAsAgent(request).body();
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public AgentRequest listenAsAgent(AgentListener request, RequestOptions requestOptions) {
        return this.rawClient.listenAsAgent(request, requestOptions).body();
    }
}
