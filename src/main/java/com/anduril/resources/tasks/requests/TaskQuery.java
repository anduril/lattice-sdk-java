/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.resources.tasks.requests;

import com.anduril.core.ObjectMappers;
import com.anduril.resources.tasks.types.TaskQueryStatusFilter;
import com.anduril.resources.tasks.types.TaskQueryUpdateTimeRange;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaskQuery.Builder.class)
public final class TaskQuery {
    private final Optional<String> pageToken;

    private final Optional<String> parentTaskId;

    private final Optional<TaskQueryStatusFilter> statusFilter;

    private final Optional<TaskQueryUpdateTimeRange> updateTimeRange;

    private final Map<String, Object> additionalProperties;

    private TaskQuery(
            Optional<String> pageToken,
            Optional<String> parentTaskId,
            Optional<TaskQueryStatusFilter> statusFilter,
            Optional<TaskQueryUpdateTimeRange> updateTimeRange,
            Map<String, Object> additionalProperties) {
        this.pageToken = pageToken;
        this.parentTaskId = parentTaskId;
        this.statusFilter = statusFilter;
        this.updateTimeRange = updateTimeRange;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If set, returns results starting from the given pageToken.
     */
    @JsonProperty("pageToken")
    public Optional<String> getPageToken() {
        return pageToken;
    }

    /**
     * @return If present matches Tasks with this parent Task ID.
     * Note: this is mutually exclusive with all other query parameters, i.e., either provide parent Task ID, or
     * any of the remaining parameters, but not both.
     */
    @JsonProperty("parentTaskId")
    public Optional<String> getParentTaskId() {
        return parentTaskId;
    }

    @JsonProperty("statusFilter")
    public Optional<TaskQueryStatusFilter> getStatusFilter() {
        return statusFilter;
    }

    /**
     * @return If provided, only provides Tasks updated within the time range.
     */
    @JsonProperty("updateTimeRange")
    public Optional<TaskQueryUpdateTimeRange> getUpdateTimeRange() {
        return updateTimeRange;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaskQuery && equalTo((TaskQuery) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaskQuery other) {
        return pageToken.equals(other.pageToken)
                && parentTaskId.equals(other.parentTaskId)
                && statusFilter.equals(other.statusFilter)
                && updateTimeRange.equals(other.updateTimeRange);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pageToken, this.parentTaskId, this.statusFilter, this.updateTimeRange);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> pageToken = Optional.empty();

        private Optional<String> parentTaskId = Optional.empty();

        private Optional<TaskQueryStatusFilter> statusFilter = Optional.empty();

        private Optional<TaskQueryUpdateTimeRange> updateTimeRange = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaskQuery other) {
            pageToken(other.getPageToken());
            parentTaskId(other.getParentTaskId());
            statusFilter(other.getStatusFilter());
            updateTimeRange(other.getUpdateTimeRange());
            return this;
        }

        /**
         * <p>If set, returns results starting from the given pageToken.</p>
         */
        @JsonSetter(value = "pageToken", nulls = Nulls.SKIP)
        public Builder pageToken(Optional<String> pageToken) {
            this.pageToken = pageToken;
            return this;
        }

        public Builder pageToken(String pageToken) {
            this.pageToken = Optional.ofNullable(pageToken);
            return this;
        }

        /**
         * <p>If present matches Tasks with this parent Task ID.
         * Note: this is mutually exclusive with all other query parameters, i.e., either provide parent Task ID, or
         * any of the remaining parameters, but not both.</p>
         */
        @JsonSetter(value = "parentTaskId", nulls = Nulls.SKIP)
        public Builder parentTaskId(Optional<String> parentTaskId) {
            this.parentTaskId = parentTaskId;
            return this;
        }

        public Builder parentTaskId(String parentTaskId) {
            this.parentTaskId = Optional.ofNullable(parentTaskId);
            return this;
        }

        @JsonSetter(value = "statusFilter", nulls = Nulls.SKIP)
        public Builder statusFilter(Optional<TaskQueryStatusFilter> statusFilter) {
            this.statusFilter = statusFilter;
            return this;
        }

        public Builder statusFilter(TaskQueryStatusFilter statusFilter) {
            this.statusFilter = Optional.ofNullable(statusFilter);
            return this;
        }

        /**
         * <p>If provided, only provides Tasks updated within the time range.</p>
         */
        @JsonSetter(value = "updateTimeRange", nulls = Nulls.SKIP)
        public Builder updateTimeRange(Optional<TaskQueryUpdateTimeRange> updateTimeRange) {
            this.updateTimeRange = updateTimeRange;
            return this;
        }

        public Builder updateTimeRange(TaskQueryUpdateTimeRange updateTimeRange) {
            this.updateTimeRange = Optional.ofNullable(updateTimeRange);
            return this;
        }

        public TaskQuery build() {
            return new TaskQuery(pageToken, parentTaskId, statusFilter, updateTimeRange, additionalProperties);
        }
    }
}
