/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.resources.tasks;

import com.anduril.core.ClientOptions;
import com.anduril.core.LatticeApiException;
import com.anduril.core.LatticeException;
import com.anduril.core.LatticeHttpResponse;
import com.anduril.core.MediaTypes;
import com.anduril.core.ObjectMappers;
import com.anduril.core.RequestOptions;
import com.anduril.errors.BadRequestError;
import com.anduril.errors.NotFoundError;
import com.anduril.errors.UnauthorizedError;
import com.anduril.resources.tasks.requests.AgentListener;
import com.anduril.resources.tasks.requests.TaskCreation;
import com.anduril.resources.tasks.requests.TaskQuery;
import com.anduril.resources.tasks.requests.TaskStatusUpdate;
import com.anduril.types.AgentRequest;
import com.anduril.types.Task;
import com.anduril.types.TaskQueryResults;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawTasksClient {
    protected final ClientOptions clientOptions;

    public AsyncRawTasksClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public CompletableFuture<LatticeHttpResponse<Task>> createTask() {
        return createTask(TaskCreation.builder().build());
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public CompletableFuture<LatticeHttpResponse<Task>> createTask(TaskCreation request) {
        return createTask(request, null);
    }

    /**
     * Submit a request to create a task and schedule it for delivery. Tasks, once delivered, will
     * be asynchronously updated by their destined agent.
     */
    public CompletableFuture<LatticeHttpResponse<Task>> createTask(
            TaskCreation request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/tasks")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new LatticeException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<Task>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new LatticeHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Task.class), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<LatticeHttpResponse<Task>> getTask(String taskId) {
        return getTask(taskId, null);
    }

    public CompletableFuture<LatticeHttpResponse<Task>> getTask(String taskId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/tasks")
                .addPathSegment(taskId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<Task>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new LatticeHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Task.class), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Update the status of a task.
     */
    public CompletableFuture<LatticeHttpResponse<Task>> updateTaskStatus(String taskId) {
        return updateTaskStatus(taskId, TaskStatusUpdate.builder().build());
    }

    /**
     * Update the status of a task.
     */
    public CompletableFuture<LatticeHttpResponse<Task>> updateTaskStatus(String taskId, TaskStatusUpdate request) {
        return updateTaskStatus(taskId, request, null);
    }

    /**
     * Update the status of a task.
     */
    public CompletableFuture<LatticeHttpResponse<Task>> updateTaskStatus(
            String taskId, TaskStatusUpdate request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/tasks")
                .addPathSegment(taskId)
                .addPathSegments("status")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new LatticeException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<Task>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new LatticeHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Task.class), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Query for tasks by a specified search criteria.
     */
    public CompletableFuture<LatticeHttpResponse<TaskQueryResults>> queryTasks() {
        return queryTasks(TaskQuery.builder().build());
    }

    /**
     * Query for tasks by a specified search criteria.
     */
    public CompletableFuture<LatticeHttpResponse<TaskQueryResults>> queryTasks(TaskQuery request) {
        return queryTasks(request, null);
    }

    /**
     * Query for tasks by a specified search criteria.
     */
    public CompletableFuture<LatticeHttpResponse<TaskQueryResults>> queryTasks(
            TaskQuery request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/tasks/query")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new LatticeException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<TaskQueryResults>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new LatticeHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), TaskQueryResults.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public CompletableFuture<LatticeHttpResponse<AgentRequest>> listenAsAgent() {
        return listenAsAgent(AgentListener.builder().build());
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public CompletableFuture<LatticeHttpResponse<AgentRequest>> listenAsAgent(AgentListener request) {
        return listenAsAgent(request, null);
    }

    /**
     * This is a long polling API that will block until a new task is ready for delivery. If no new task is
     * available then the server will hold on to your request for up to 5 minutes, after that 5 minute timeout
     * period you will be expected to reinitiate a new request.
     */
    public CompletableFuture<LatticeHttpResponse<AgentRequest>> listenAsAgent(
            AgentListener request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/agent/listen")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new LatticeException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<AgentRequest>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new LatticeHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), AgentRequest.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
