/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.resources.tasks.types;

import com.anduril.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TaskQueryUpdateTimeRange.Builder.class)
public final class TaskQueryUpdateTimeRange {
    private final Optional<String> startTime;

    private final Optional<String> endTime;

    private final Map<String, Object> additionalProperties;

    private TaskQueryUpdateTimeRange(
            Optional<String> startTime, Optional<String> endTime, Map<String, Object> additionalProperties) {
        this.startTime = startTime;
        this.endTime = endTime;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If provided, returns Tasks only updated after this time.
     */
    @JsonProperty("startTime")
    public Optional<String> getStartTime() {
        return startTime;
    }

    /**
     * @return If provided, returns Tasks only updated before this time.
     */
    @JsonProperty("endTime")
    public Optional<String> getEndTime() {
        return endTime;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TaskQueryUpdateTimeRange && equalTo((TaskQueryUpdateTimeRange) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TaskQueryUpdateTimeRange other) {
        return startTime.equals(other.startTime) && endTime.equals(other.endTime);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.startTime, this.endTime);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> startTime = Optional.empty();

        private Optional<String> endTime = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TaskQueryUpdateTimeRange other) {
            startTime(other.getStartTime());
            endTime(other.getEndTime());
            return this;
        }

        /**
         * <p>If provided, returns Tasks only updated after this time.</p>
         */
        @JsonSetter(value = "startTime", nulls = Nulls.SKIP)
        public Builder startTime(Optional<String> startTime) {
            this.startTime = startTime;
            return this;
        }

        public Builder startTime(String startTime) {
            this.startTime = Optional.ofNullable(startTime);
            return this;
        }

        /**
         * <p>If provided, returns Tasks only updated before this time.</p>
         */
        @JsonSetter(value = "endTime", nulls = Nulls.SKIP)
        public Builder endTime(Optional<String> endTime) {
            this.endTime = endTime;
            return this;
        }

        public Builder endTime(String endTime) {
            this.endTime = Optional.ofNullable(endTime);
            return this;
        }

        public TaskQueryUpdateTimeRange build() {
            return new TaskQueryUpdateTimeRange(startTime, endTime, additionalProperties);
        }
    }
}
