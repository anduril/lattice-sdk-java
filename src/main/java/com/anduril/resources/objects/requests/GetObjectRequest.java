/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.resources.objects.requests;

import com.anduril.core.ObjectMappers;
import com.anduril.resources.objects.types.GetObjectRequestAcceptEncoding;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetObjectRequest.Builder.class)
public final class GetObjectRequest {
    private final Optional<GetObjectRequestAcceptEncoding> acceptEncoding;

    private final Optional<String> priority;

    private final Map<String, Object> additionalProperties;

    private GetObjectRequest(
            Optional<GetObjectRequestAcceptEncoding> acceptEncoding,
            Optional<String> priority,
            Map<String, Object> additionalProperties) {
        this.acceptEncoding = acceptEncoding;
        this.priority = priority;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If set, Lattice will compress the response using the specified compression method. If the header is not defined, or the compression method is set to <code>identity</code>, no compression will be applied to the response.
     */
    @JsonProperty("Accept-Encoding")
    public Optional<GetObjectRequestAcceptEncoding> getAcceptEncoding() {
        return acceptEncoding;
    }

    /**
     * @return Indicates a client's preference for the priority of the response. The value is a structured header as defined in RFC 9218. If you do not set the header, Lattice uses the default priority set for the environment. Incremental delivery directives are not supported and will be ignored.
     */
    @JsonProperty("Priority")
    public Optional<String> getPriority() {
        return priority;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetObjectRequest && equalTo((GetObjectRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetObjectRequest other) {
        return acceptEncoding.equals(other.acceptEncoding) && priority.equals(other.priority);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.acceptEncoding, this.priority);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<GetObjectRequestAcceptEncoding> acceptEncoding = Optional.empty();

        private Optional<String> priority = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetObjectRequest other) {
            acceptEncoding(other.getAcceptEncoding());
            priority(other.getPriority());
            return this;
        }

        /**
         * <p>If set, Lattice will compress the response using the specified compression method. If the header is not defined, or the compression method is set to <code>identity</code>, no compression will be applied to the response.</p>
         */
        @JsonSetter(value = "Accept-Encoding", nulls = Nulls.SKIP)
        public Builder acceptEncoding(Optional<GetObjectRequestAcceptEncoding> acceptEncoding) {
            this.acceptEncoding = acceptEncoding;
            return this;
        }

        public Builder acceptEncoding(GetObjectRequestAcceptEncoding acceptEncoding) {
            this.acceptEncoding = Optional.ofNullable(acceptEncoding);
            return this;
        }

        /**
         * <p>Indicates a client's preference for the priority of the response. The value is a structured header as defined in RFC 9218. If you do not set the header, Lattice uses the default priority set for the environment. Incremental delivery directives are not supported and will be ignored.</p>
         */
        @JsonSetter(value = "Priority", nulls = Nulls.SKIP)
        public Builder priority(Optional<String> priority) {
            this.priority = priority;
            return this;
        }

        public Builder priority(String priority) {
            this.priority = Optional.ofNullable(priority);
            return this;
        }

        public GetObjectRequest build() {
            return new GetObjectRequest(acceptEncoding, priority, additionalProperties);
        }
    }
}
