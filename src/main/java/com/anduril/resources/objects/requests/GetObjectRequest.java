/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.resources.objects.requests;

import com.anduril.core.ObjectMappers;
import com.anduril.resources.objects.types.GetObjectRequestAcceptEncoding;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetObjectRequest.Builder.class)
public final class GetObjectRequest {
    private final Optional<GetObjectRequestAcceptEncoding> acceptEncoding;

    private final Map<String, Object> additionalProperties;

    private GetObjectRequest(
            Optional<GetObjectRequestAcceptEncoding> acceptEncoding, Map<String, Object> additionalProperties) {
        this.acceptEncoding = acceptEncoding;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return If set, Lattice will compress the response using the specified compression method. If the header is not defined, or the compression method is set to <code>identity</code>, no compression will be applied to the response.
     */
    @JsonProperty("Accept-Encoding")
    public Optional<GetObjectRequestAcceptEncoding> getAcceptEncoding() {
        return acceptEncoding;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetObjectRequest && equalTo((GetObjectRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetObjectRequest other) {
        return acceptEncoding.equals(other.acceptEncoding);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.acceptEncoding);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<GetObjectRequestAcceptEncoding> acceptEncoding = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetObjectRequest other) {
            acceptEncoding(other.getAcceptEncoding());
            return this;
        }

        /**
         * <p>If set, Lattice will compress the response using the specified compression method. If the header is not defined, or the compression method is set to <code>identity</code>, no compression will be applied to the response.</p>
         */
        @JsonSetter(value = "Accept-Encoding", nulls = Nulls.SKIP)
        public Builder acceptEncoding(Optional<GetObjectRequestAcceptEncoding> acceptEncoding) {
            this.acceptEncoding = acceptEncoding;
            return this;
        }

        public Builder acceptEncoding(GetObjectRequestAcceptEncoding acceptEncoding) {
            this.acceptEncoding = Optional.ofNullable(acceptEncoding);
            return this;
        }

        public GetObjectRequest build() {
            return new GetObjectRequest(acceptEncoding, additionalProperties);
        }
    }
}
