/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.resources.objects;

import com.anduril.core.ClientOptions;
import com.anduril.core.InputStreamRequestBody;
import com.anduril.core.LatticeApiException;
import com.anduril.core.LatticeException;
import com.anduril.core.LatticeHttpResponse;
import com.anduril.core.ObjectMappers;
import com.anduril.core.QueryStringMapper;
import com.anduril.core.RequestOptions;
import com.anduril.core.ResponseBodyInputStream;
import com.anduril.core.pagination.SyncPagingIterable;
import com.anduril.errors.BadRequestError;
import com.anduril.errors.ContentTooLargeError;
import com.anduril.errors.InsufficientStorageError;
import com.anduril.errors.InternalServerError;
import com.anduril.errors.NotFoundError;
import com.anduril.errors.UnauthorizedError;
import com.anduril.resources.objects.requests.GetObjectRequest;
import com.anduril.resources.objects.requests.ListObjectsRequest;
import com.anduril.types.ListResponse;
import com.anduril.types.PathMetadata;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawObjectsClient {
    protected final ClientOptions clientOptions;

    public AsyncRawObjectsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     */
    public CompletableFuture<LatticeHttpResponse<SyncPagingIterable<PathMetadata>>> listObjects() {
        return listObjects(ListObjectsRequest.builder().build());
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     */
    public CompletableFuture<LatticeHttpResponse<SyncPagingIterable<PathMetadata>>> listObjects(
            ListObjectsRequest request) {
        return listObjects(request, null);
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     */
    public CompletableFuture<LatticeHttpResponse<SyncPagingIterable<PathMetadata>>> listObjects(
            ListObjectsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/objects");
        if (request.getPrefix().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "prefix", request.getPrefix().get(), false);
        }
        if (request.getSinceTimestamp().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sinceTimestamp", request.getSinceTimestamp().get(), false);
        }
        if (request.getPageToken().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "pageToken", request.getPageToken().get(), false);
        }
        if (request.getAllObjectsInMesh().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "allObjectsInMesh", request.getAllObjectsInMesh().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<SyncPagingIterable<PathMetadata>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListResponse parsedResponse =
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListResponse.class);
                        Optional<String> startingAfter = parsedResponse.getNextPageToken();
                        ListObjectsRequest nextRequest = ListObjectsRequest.builder()
                                .from(request)
                                .pageToken(startingAfter)
                                .build();
                        List<PathMetadata> result = parsedResponse.getPathMetadatas();
                        future.complete(new LatticeHttpResponse<>(
                                new SyncPagingIterable<PathMetadata>(
                                        startingAfter.isPresent(), result, parsedResponse, () -> {
                                            try {
                                                return listObjects(nextRequest, requestOptions)
                                                        .get()
                                                        .body();
                                            } catch (InterruptedException | ExecutionException e) {
                                                throw new RuntimeException(e);
                                            }
                                        }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     */
    public CompletableFuture<LatticeHttpResponse<InputStream>> getObject(String objectPath) {
        return getObject(objectPath, GetObjectRequest.builder().build());
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     */
    public CompletableFuture<LatticeHttpResponse<InputStream>> getObject(String objectPath, GetObjectRequest request) {
        return getObject(objectPath, request, null);
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     */
    public CompletableFuture<LatticeHttpResponse<InputStream>> getObject(
            String objectPath, GetObjectRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/objects")
                .addPathSegment(objectPath)
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        if (request.getAcceptEncoding().isPresent()) {
            _requestBuilder.addHeader(
                    "Accept-Encoding", request.getAcceptEncoding().get().toString());
        }
        if (request.getPriority().isPresent()) {
            _requestBuilder.addHeader("Priority", request.getPriority().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<InputStream>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try {
                    ResponseBody responseBody = response.body();
                    if (response.isSuccessful()) {
                        future.complete(new LatticeHttpResponse<>(new ResponseBodyInputStream(response), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Uploads an object. The object must be 1 GiB or smaller.
     */
    public CompletableFuture<LatticeHttpResponse<PathMetadata>> uploadObject(String objectPath, InputStream request) {
        return uploadObject(objectPath, request, null);
    }

    /**
     * Uploads an object. The object must be 1 GiB or smaller.
     */
    public CompletableFuture<LatticeHttpResponse<PathMetadata>> uploadObject(
            String objectPath, InputStream request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/objects")
                .addPathSegment(objectPath)
                .build();
        RequestBody body = new InputStreamRequestBody(MediaType.parse("application/octet-stream"), request);
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<PathMetadata>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new LatticeHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PathMetadata.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 413:
                                future.completeExceptionally(new ContentTooLargeError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 507:
                                future.completeExceptionally(new InsufficientStorageError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Uploads an object. The object must be 1 GiB or smaller.
     */
    public CompletableFuture<LatticeHttpResponse<PathMetadata>> uploadObject(String objectPath, byte[] request) {
        return uploadObject(objectPath, new ByteArrayInputStream(request));
    }

    /**
     * Uploads an object. The object must be 1 GiB or smaller.
     */
    public CompletableFuture<LatticeHttpResponse<PathMetadata>> uploadObject(
            String objectPath, byte[] request, RequestOptions requestOptions) {
        return uploadObject(objectPath, new ByteArrayInputStream(request), requestOptions);
    }

    /**
     * Deletes an object from your environment given the objectPath path parameter.
     */
    public CompletableFuture<LatticeHttpResponse<Void>> deleteObject(String objectPath) {
        return deleteObject(objectPath, null);
    }

    /**
     * Deletes an object from your environment given the objectPath path parameter.
     */
    public CompletableFuture<LatticeHttpResponse<Void>> deleteObject(String objectPath, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/objects")
                .addPathSegment(objectPath)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new LatticeHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new NotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Returns metadata for a specified object path. Use this to fetch metadata such as object size (size_bytes), its expiry time (expiry_time), or its latest update timestamp (last_updated_at).
     */
    public CompletableFuture<LatticeHttpResponse<Void>> getObjectMetadata(String objectPath) {
        return getObjectMetadata(objectPath, null);
    }

    /**
     * Returns metadata for a specified object path. Use this to fetch metadata such as object size (size_bytes), its expiry time (expiry_time), or its latest update timestamp (last_updated_at).
     */
    public CompletableFuture<LatticeHttpResponse<Void>> getObjectMetadata(
            String objectPath, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api/v1/objects")
                .addPathSegment(objectPath)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("HEAD", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<LatticeHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new LatticeHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new LatticeApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new LatticeException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
