/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.anduril.resources.objects;

import com.anduril.core.ClientOptions;
import com.anduril.core.RequestOptions;
import com.anduril.core.pagination.SyncPagingIterable;
import com.anduril.resources.objects.requests.GetObjectRequest;
import com.anduril.resources.objects.requests.ListObjectsRequest;
import com.anduril.types.PathMetadata;
import java.io.InputStream;

public class ObjectsClient {
    protected final ClientOptions clientOptions;

    private final RawObjectsClient rawClient;

    public ObjectsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawObjectsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawObjectsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     */
    public SyncPagingIterable<PathMetadata> listObjects() {
        return this.rawClient.listObjects().body();
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     */
    public SyncPagingIterable<PathMetadata> listObjects(ListObjectsRequest request) {
        return this.rawClient.listObjects(request).body();
    }

    /**
     * Lists objects in your environment. You can define a prefix to list a subset of your objects. If you do not set a prefix, Lattice returns all available objects. By default this endpoint will list local objects only.
     */
    public SyncPagingIterable<PathMetadata> listObjects(ListObjectsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listObjects(request, requestOptions).body();
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     */
    public InputStream getObject(String objectPath) {
        return this.rawClient.getObject(objectPath).body();
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     */
    public InputStream getObject(String objectPath, GetObjectRequest request) {
        return this.rawClient.getObject(objectPath, request).body();
    }

    /**
     * Fetches an object from your environment using the objectPath path parameter.
     */
    public InputStream getObject(String objectPath, GetObjectRequest request, RequestOptions requestOptions) {
        return this.rawClient.getObject(objectPath, request, requestOptions).body();
    }

    /**
     * Uploads an object using multiform data. The object must be 1 GiB or smaller.
     */
    public PathMetadata uploadObject(String objectPath, InputStream request) {
        return this.rawClient.uploadObject(objectPath, request).body();
    }

    /**
     * Uploads an object using multiform data. The object must be 1 GiB or smaller.
     */
    public PathMetadata uploadObject(String objectPath, InputStream request, RequestOptions requestOptions) {
        return this.rawClient.uploadObject(objectPath, request, requestOptions).body();
    }

    /**
     * Uploads an object using multiform data. The object must be 1 GiB or smaller.
     */
    public PathMetadata uploadObject(String objectPath, byte[] request) {
        return this.rawClient.uploadObject(objectPath, request).body();
    }

    /**
     * Uploads an object using multiform data. The object must be 1 GiB or smaller.
     */
    public PathMetadata uploadObject(String objectPath, byte[] request, RequestOptions requestOptions) {
        return this.rawClient.uploadObject(objectPath, request, requestOptions).body();
    }

    /**
     * Deletes an object from your environment given the objectPath path parameter.
     */
    public void deleteObject(String objectPath) {
        this.rawClient.deleteObject(objectPath).body();
    }

    /**
     * Deletes an object from your environment given the objectPath path parameter.
     */
    public void deleteObject(String objectPath, RequestOptions requestOptions) {
        this.rawClient.deleteObject(objectPath, requestOptions).body();
    }

    /**
     * Returns metadata for a specified object path. Use this to fetch metadata such as object size (size_bytes), its expiry time (expiry_time), or its latest update timestamp (last_updated_at).
     */
    public void getObjectMetadata(String objectPath) {
        this.rawClient.getObjectMetadata(objectPath).body();
    }

    /**
     * Returns metadata for a specified object path. Use this to fetch metadata such as object size (size_bytes), its expiry time (expiry_time), or its latest update timestamp (last_updated_at).
     */
    public void getObjectMetadata(String objectPath, RequestOptions requestOptions) {
        this.rawClient.getObjectMetadata(objectPath, requestOptions).body();
    }
}
